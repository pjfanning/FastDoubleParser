<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ @(#)build-FastDoubleParser.xml
  ~ Copyright © 2021. Werner Randelshofer, Switzerland. MIT License.
  -->
<project name="fastdoubleparser" basedir="." default="all"
         xmlns:artifact="antlib:org.apache.maven.artifact.ant"
         xmlns:unless="ant:unless"
>
    <!-- gobal build properties -->
    <property file="build.properties"/>

    <!-- ignore system classpath to get consistent builds on different platforms -->
    <property name="build.sysclasspath" value="ignore"/>


    <exec executable="git" outputproperty="git.hash.date.author" failifexecutionfails="false" errorproperty="">
        <arg value="log"/>
        <arg value="-1"/>
        <arg value="--pretty=format:%h %cI %cn"/>
    </exec>
    <exec executable="git" outputproperty="git.describe" failifexecutionfails="false" errorproperty="">
        <arg value="describe"/>
        <arg value="--tags"/>
        <arg value="--always"/>
        <arg value="HEAD"/>
    </exec>
    <exec executable="git" outputproperty="git.version" failifexecutionfails="false" errorproperty="">
        <arg value="log"/>
        <arg value="--max-count=1"/>
        <arg value="--date=short"/>
        <arg value="--pretty=format:%cd_%h"/>
    </exec>

    <tstamp>
        <format property="year" pattern="yyyy" locale="en,GB"/>
    </tstamp>
    <property name="name" value="${artifactId}"/>
    <property name="copyright" value="Copyright © ${year} ${author}."/>

    <!-- we have to remove the leading 'v' from the tag 'v1.2.3', so that
         we get a version number '1.2.3' -->
    <loadresource property="version">
        <propertyresource name="git.describe"/>
        <filterchain>
            <tokenfilter>
                <filetokenizer/>
                <replacestring from="v" to=""/>
            </tokenfilter>
        </filterchain>
    </loadresource>
    <property name="buildVersion" value="${version}_${git.version}"/>

    <property name="manifest.application-name" value="${artifactId}"/>
    <property name="manifest.implementation-version" value="${buildVersion}"/>
    <property name="manifest.specification-version" value="${version}"/>
    <property name="manifest.implementation-vendor" value="${groupId}"/>

    <property name="src" value="src/main/java/ch.randelshofer.fastdoubleparser"/>
    <property name="build" value="build"/>
    <property name="classes" value="build/classes"/>
    <property name="jars" value="build/jar"/>
    <property name="javadoc" value="build/javadoc"/>
    <property name="dist" value="build/dist/${name}-${version}"/>


    <target name="init">
        <echo message="app.name ${name}"/>
        <echo message="app.author ${author}"/>
        <echo message="app.vendor ${groupId}"/>
        <echo message="app.license ${licenseName}"/>
        <echo message="app.version ${version} / desc:${git.describe} rev:${git.hash.date.author}"/>
        <echo message="build.version ${buildVersion}"/>
        <echo>java.home: ${java.home}</echo>
    </target>

    <target name="clean">
        <delete dir="${build}"/>
    </target>

    <target name="compile">
        <mkdir dir="${classes}"/>
        <javac encoding="UTF-8" destdir="${classes}"
               debug="true"
               verbose="false"
        >
            <src path="${src}"/>
            <compilerarg value="-Xlint"/>
            <compilerarg value="-version"/>
        </javac>
    </target>

    <target name="javadoc">
        <mkdir dir="${javadoc}"/>
        <javadoc encoding="UTF-8" destdir="${javadoc}"
               verbose="false"
                 charset="UTF-8"
                 header="${artifactId} ${version}"
                 windowtitle="${artifactId} ${version}"
        >
            <sourcepath path="${src}"/>
        </javadoc>
    </target>

    <target name="jar" depends="compile">
        <mkdir dir="${jars}"/>
        <jar destfile="${jars}/${artifactId}.jar">
            <!-- The attributes are structured into section has described here:
            https://docs.oracle.com/javase/8/docs/technotes/guides/jar/jar.html#Main_Attributes
            https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/manifest.html
            -->
            <manifest>
                <!--
                  ~ Main Attributes
                -->
                <!-- general main attributes -->
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Created-By" value="${manifest.implementation-vendor}"/>
                <attribute name="Signature-Version" value="1.0"/>
                <!--attribute name="Class-Path" value="${manifest.class-path}"/-->

                <!-- attribute defined for stand-alone applications (non-modular)  -->
                <!--attribute name="Main-Class" value="${manifest.main-class}"/-->

                <!-- attribute defined for extension identification -->
                <!-- attribute name="Extension-Name" value="..."/-->

                <!-- attributes defined for extension and package versioning and sealing information -->
                <attribute name="Implementation-Title" value="${manifest.application-name}"/>
                <attribute name="Implementation-Version" value="${manifest.implementation-version}"/>
                <attribute name="Implementation-Vendor" value="${manifest.implementation-vendor}"/>
                <attribute name="Specification-Title" value="${manifest.application-name}"/>
                <attribute name="Specification-Version" value="${manifest.specification-version}"/>
                <attribute name="Specification-Vendor" value="${manifest.implementation-vendor}"/>
                <attribute name="Sealed" value="false"/>

                <!-- attributes for security -->
                <attribute name="Permissions" value="sandboxed"/>
                <attribute name="Codebase" value="*"/>
                <attribute name="Application-Name" value="${manifest.application-name}"/>
                <attribute name="Application-Library-Allowable-Codebase" value="*"/>
                <attribute name="Caller-Allowable-Codebase" value="*"/>
                <!--attribute name="Entry-Point" value="${manifest.main-class}"/-->
                <attribute name="Trusted-Only" value="false"/>
                <attribute name="Trusted-Library" value="false"/>
            </manifest>
            <fileset dir="${classes}">
                <exclude name=".*"/>
            </fileset>
        </jar>

    </target>

    <target name="dist" depends="jar,javadoc">
        <copy file="${jars}/${artifactId}.jar"
              tofile="${dist}/${artifactId}-${version}.jar" />

        <jar file="${dist}/${artifactId}-${version}-sources.jar">
            <fileset dir="${src}">
                <exclude name=".*"/>
            </fileset>
        </jar>

        <jar file="${dist}/${artifactId}-${version}-javadoc.jar">
            <fileset dir="${javadoc}">
                <exclude name=".*"/>
            </fileset>
        </jar>
    </target>

    <target name="deploySnapshot" depends="clean,dist"
            description="deploy snapshot version to Maven snapshot repository">

        <property name="versionId" value="${version}-SNAPSHOT"/>

        <copy file="${dist}/${artifactId}-${version}.jar"
              tofile="${dist}-SNAPSHOT/${artifactId}-${version}.jar" />
        <copy file="${dist}/${artifactId}-${version}-sources.jar"
              tofile="${dist}-SNAPSHOT/${artifactId}-${version}-sources.jar" />
        <copy file="${dist}/${artifactId}-${version}-javadoc.jar"
              tofile="${dist}-SNAPSHOT/${artifactId}-${version}-javadoc.jar" />
        <copy file="${artifactId}.pom"
              tofile="${dist}-SNAPSHOT/${artifactId}.pom" >
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>

        <artifact:mvn>
            <arg value="org.apache.maven.plugins:maven-deploy-plugin:2.6:deploy-file" />
            <arg value="-Durl=${snapshotsRepositoryUrl}" />
            <arg value="-DrepositoryId=${repositoryServerId}" />
            <arg value="-DpomFile=${dist}-SNAPSHOT/${artifactId}.pom" />
            <arg value="-Dfile=${dist}-SNAPSHOT/${artifactId}-${version}.jar" />
        </artifact:mvn>
    </target>

    <target name="deployRelease" depends="clean,dist"
            description="deploy release version to Maven staging repository">
        <property name="versionId" value="${version}"/>

        <copy file="${artifactId}.pom"
              tofile="${dist}/${artifactId}.pom">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <sign-and-deploy file="${dist}/${artifactId}-${version}.jar"/>
        <sign-and-deploy file="${dist}/${artifactId}-${version}-javadoc.jar" classifier="javadoc"/>
        <sign-and-deploy file="${dist}/${artifactId}-${version}-sources.jar" classifier="sources"/>
    </target>

    <macrodef name="sign-and-deploy">
        <attribute name="file"/>
        <attribute name="classifier" default=""/>
        <sequential>
            <!-- On macOs you need to install the following packages with brew
            gpg
            pinentry-mac
            -->
            <!-- gpg needs the following line in ~/.zshrc
                # In order for gpg to find gpg-agent, gpg-agent must be running, and there must be an env
                # variable pointing GPG to the gpg-agent socket. This little script, which must be sourced
                # in your shell's init script (ie, .bash_profile, .zshrc, whatever), will either start
                # gpg-agent or set up the GPG_AGENT_INFO variable if it's already running.

                # Add the following to your shell init to set up gpg-agent automatically for every shell
                if [ -f ~/.gnupg/.gpg-agent-info ] && [ -n "$(pgrep gpg-agent)" ]; then
                    source ~/.gnupg/.gpg-agent-info
                    export GPG_AGENT_INFO
                else
                    eval $(gpg-agent - -daemon - -write-env-file ~/.gnupg/.gpg-agent-info)
                fi
            -->
            <!-- gpg needs the following line in ~/.gnupg/gpg.conf
                 use-agent
            -->
            <!-- gpg needs the following lines in ~/.gnupg/gpg-agent.conf
                # Enables GPG to find gpg-agent
                use-standard-socket

                # Connects gpg-agent to the OSX keychain via the brew-installed
                # pinentry program from GPGtools. This is the OSX 'magic sauce',
                # allowing the gpg key's passphrase to be stored in the login
                # keychain, enabling automatic key signing.
                pinentry-program /usr/local/bin/pinentry-mac
            -->
            <!--
            Then you must restart your computer, because otherwise gpg will still
            try to use tty for the passwort prompt instead of a dialog box.
            -->
            <echo message="file @{file}"/>

            <artifact:mvn>
                <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file"/>
                <arg value="-Durl=${stagingRepositoryUrl}"/>
                <arg value="-DrepositoryId=${repositoryServerId}"/>
                <arg value="-DpomFile=${dist}/${artifactId}.pom"/>
                <arg value="-Dfile=@{file}"/>
                <arg unless:blank="@{classifier}" value="-Dclassifier=@{classifier}"/>
                <arg value="-Pgpg"/>
            </artifact:mvn>
        </sequential>
    </macrodef>

    <target name="all" depends="clean,dist"/>

</project>

