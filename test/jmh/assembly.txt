/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin/java -Dvisualvm.id=19332620218016 -javaagent:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar=50301:/Applications/IntelliJ IDEA CE.app/Contents/bin -Dfile.encoding=UTF-8 -classpath /Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/out/test/FastDoubleParser:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/out/production/FastDoubleParser:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/jmh-core-1.28.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/jopt-simple-4.6.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/commons-math3-3.2.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/jmh-generator-annprocess-1.28.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-jupiter-5.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-jupiter-api-5.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/apiguardian-api-1.1.0.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/opentest4j-1.2.0.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-platform-commons-1.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-jupiter-params-5.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-jupiter-engine-5.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-platform-engine-1.7.1.jar org.openjdk.jmh.Main ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheck.*
# JMH version: 1.28
# VM version: JDK 17, OpenJDK 64-Bit Server VM, 17+35-2724
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin/java
# VM options: -Dvisualvm.id=19332620218016 -javaagent:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar=50301:/Applications/IntelliJ IDEA CE.app/Contents/bin -Dfile.encoding=UTF-8 -XX:+UnlockExperimentalVMOptions --add-modules jdk.incubator.vector -XX:+UnlockDiagnosticVMOptions -XX:CompileCommand=print,*EightDigitsJmhWithoutCheckAlgos.*
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheck.m01SwarChainedFromLong

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
CompileCommand: print *EightDigitsJmhWithoutCheckAlgos.* bool print = true
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 
============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)     441  830       3       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigitsChained (50 bytes)
 total in heap  [0x0000000116fe5110,0x0000000116fe5458] = 840
 relocation     [0x0000000116fe5270,0x0000000116fe5298] = 40
 main code      [0x0000000116fe52a0,0x0000000116fe53c0] = 288
 stub code      [0x0000000116fe53c0,0x0000000116fe53f0] = 48
 oops           [0x0000000116fe53f0,0x0000000116fe53f8] = 8
 metadata       [0x0000000116fe53f8,0x0000000116fe5400] = 8
 scopes data    [0x0000000116fe5400,0x0000000116fe5420] = 32
 scopes pcs     [0x0000000116fe5420,0x0000000116fe5450] = 48
 dependencies   [0x0000000116fe5450,0x0000000116fe5458] = 8

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x000000010cca9a50} 'tryToParseEightDigitsChained' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  # parm0:    rsi:rsi   = long
  #           [sp+0x40]  (sp of caller)
  0x0000000116fe52a0:   mov    %eax,-0x14000(%rsp)
  0x0000000116fe52a7:   push   %rbp
  0x0000000116fe52a8:   sub    $0x30,%rsp
  0x0000000116fe52ac:   movabs $0x10ccaa2e0,%rax            ;   {metadata(method data for {method} {0x000000010cca9a50} 'tryToParseEightDigitsChained' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x0000000116fe52b6:   mov    0xac(%rax),%ecx
  0x0000000116fe52bc:   add    $0x2,%ecx
  0x0000000116fe52bf:   mov    %ecx,0xac(%rax)
  0x0000000116fe52c5:   and    $0x7fe,%ecx
  0x0000000116fe52cb:   cmp    $0x0,%ecx
  0x0000000116fe52ce:   je     0x0000000116fe5358
  0x0000000116fe52d4:   movabs $0x3030303030303030,%r10
  0x0000000116fe52de:   sub    %r10,%rsi
  0x0000000116fe52e1:   movabs $0xa01,%rax
  0x0000000116fe52eb:   mov    %rax,%rcx
  0x0000000116fe52ee:   mov    %rsi,%rax
  0x0000000116fe52f1:   imul   %rcx,%rax
  0x0000000116fe52f5:   mov    $0x8,%ecx
  0x0000000116fe52fa:   shr    %cl,%rax
  0x0000000116fe52fd:   movabs $0xff00ff00ff00ff,%r10
  0x0000000116fe5307:   and    %r10,%rax
  0x0000000116fe530a:   movabs $0x640001,%rcx
  0x0000000116fe5314:   imul   %rcx,%rax
  0x0000000116fe5318:   mov    $0x10,%ecx
  0x0000000116fe531d:   shr    %cl,%rax
  0x0000000116fe5320:   movabs $0xffff0000ffff,%r10
  0x0000000116fe532a:   and    %r10,%rax
  0x0000000116fe532d:   movabs $0x271000000001,%rcx
  0x0000000116fe5337:   imul   %rcx,%rax
  0x0000000116fe533b:   mov    $0x20,%ecx
  0x0000000116fe5340:   shr    %cl,%rax
  0x0000000116fe5343:   mov    %eax,%eax
  0x0000000116fe5345:   add    $0x30,%rsp
  0x0000000116fe5349:   pop    %rbp
  0x0000000116fe534a:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x0000000116fe5351:   ja     0x0000000116fe5379
  0x0000000116fe5357:   retq   
  0x0000000116fe5358:   movabs $0x10cca9a50,%r10            ;   {metadata({method} {0x000000010cca9a50} 'tryToParseEightDigitsChained' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x0000000116fe5362:   mov    %r10,0x8(%rsp)
  0x0000000116fe5367:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000116fe536f:   callq  0x00000001169fd480           ; ImmutableOopMap {}
                                                            ;*synchronization entry
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigitsChained@-1 (line 82)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000116fe5374:   jmpq   0x0000000116fe52d4
  0x0000000116fe5379:   movabs $0x116fe534a,%r10            ;   {internal_word}
  0x0000000116fe5383:   mov    %r10,0x358(%r15)
  0x0000000116fe538a:   jmpq   0x0000000116958100           ;   {runtime_call SafepointBlob}
  0x0000000116fe538f:   nop
  0x0000000116fe5390:   nop
  0x0000000116fe5391:   mov    0x3d0(%r15),%rax
  0x0000000116fe5398:   movq   $0x0,0x3d0(%r15)
  0x0000000116fe53a3:   movq   $0x0,0x3d8(%r15)
  0x0000000116fe53ae:   add    $0x30,%rsp
  0x0000000116fe53b2:   pop    %rbp
  0x0000000116fe53b3:   jmpq   0x00000001169f6b80           ;   {runtime_call unwind_exception Runtime1 stub}
  0x0000000116fe53b8:   hlt    
  0x0000000116fe53b9:   hlt    
  0x0000000116fe53ba:   hlt    
  0x0000000116fe53bb:   hlt    
  0x0000000116fe53bc:   hlt    
  0x0000000116fe53bd:   hlt    
  0x0000000116fe53be:   hlt    
  0x0000000116fe53bf:   hlt    
[Exception Handler]
  0x0000000116fe53c0:   callq  0x00000001169f9e80           ;   {no_reloc}
  0x0000000116fe53c5:   movabs $0x10dce1e43,%rdi            ;   {external_word}
  0x0000000116fe53cf:   and    $0xfffffffffffffff0,%rsp
  0x0000000116fe53d3:   callq  0x000000010d984c50           ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x0000000116fe53d8:   hlt    
[Deopt Handler Code]
  0x0000000116fe53d9:   movabs $0x116fe53d9,%r10            ;   {section_word}
  0x0000000116fe53e3:   push   %r10
  0x0000000116fe53e5:   jmpq   0x00000001169573a0           ;   {runtime_call DeoptimizationBlob}
  0x0000000116fe53ea:   hlt    
  0x0000000116fe53eb:   hlt    
  0x0000000116fe53ec:   hlt    
  0x0000000116fe53ed:   hlt    
  0x0000000116fe53ee:   hlt    
  0x0000000116fe53ef:   hlt    
--------------------------------------------------------------------------------

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     451  834       4       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigitsChained (50 bytes)
 total in heap  [0x000000011e40de90,0x000000011e40e0f0] = 608
 relocation     [0x000000011e40dff0,0x000000011e40e000] = 16
 main code      [0x000000011e40e000,0x000000011e40e0a0] = 160
 stub code      [0x000000011e40e0a0,0x000000011e40e0b8] = 24
 oops           [0x000000011e40e0b8,0x000000011e40e0c0] = 8
 scopes data    [0x000000011e40e0c0,0x000000011e40e0c8] = 8
 scopes pcs     [0x000000011e40e0c8,0x000000011e40e0e8] = 32
 dependencies   [0x000000011e40e0e8,0x000000011e40e0f0] = 8

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x000000010cca9a50} 'tryToParseEightDigitsChained' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  # parm0:    rsi:rsi   = long
  #           [sp+0x20]  (sp of caller)
  0x000000011e40e000:   sub    $0x18,%rsp
  0x000000011e40e007:   mov    %rbp,0x10(%rsp)
  0x000000011e40e00c:   movabs $0x271000000001,%r10
  0x000000011e40e016:   movabs $0xcfcfcfcfcfcfcfd0,%r11
  0x000000011e40e020:   add    %r11,%rsi
  0x000000011e40e023:   imul   $0xa01,%rsi,%r11
  0x000000011e40e02a:   shr    $0x8,%r11
  0x000000011e40e02e:   movabs $0xff00ff00ff00ff,%r8
  0x000000011e40e038:   and    %r8,%r11
  0x000000011e40e03b:   imul   $0x640001,%r11,%r11
  0x000000011e40e042:   shr    $0x10,%r11
  0x000000011e40e046:   movabs $0xffff0000ffff,%r8
  0x000000011e40e050:   and    %r8,%r11
  0x000000011e40e053:   imul   %r10,%r11
  0x000000011e40e057:   shr    $0x20,%r11
  0x000000011e40e05b:   mov    %r11d,%eax
  0x000000011e40e05e:   add    $0x10,%rsp
  0x000000011e40e062:   pop    %rbp
  0x000000011e40e063:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x000000011e40e06a:   ja     0x000000011e40e071
  0x000000011e40e070:   retq   
  0x000000011e40e071:   movabs $0x11e40e063,%r10            ;   {internal_word}
  0x000000011e40e07b:   mov    %r10,0x358(%r15)
  0x000000011e40e082:   jmpq   0x0000000116958100           ;   {runtime_call SafepointBlob}
  0x000000011e40e087:   hlt    
  0x000000011e40e088:   hlt    
  0x000000011e40e089:   hlt    
  0x000000011e40e08a:   hlt    
  0x000000011e40e08b:   hlt    
  0x000000011e40e08c:   hlt    
  0x000000011e40e08d:   hlt    
  0x000000011e40e08e:   hlt    
  0x000000011e40e08f:   hlt    
  0x000000011e40e090:   hlt    
  0x000000011e40e091:   hlt    
  0x000000011e40e092:   hlt    
  0x000000011e40e093:   hlt    
  0x000000011e40e094:   hlt    
  0x000000011e40e095:   hlt    
  0x000000011e40e096:   hlt    
  0x000000011e40e097:   hlt    
  0x000000011e40e098:   hlt    
  0x000000011e40e099:   hlt    
  0x000000011e40e09a:   hlt    
  0x000000011e40e09b:   hlt    
  0x000000011e40e09c:   hlt    
  0x000000011e40e09d:   hlt    
  0x000000011e40e09e:   hlt    
  0x000000011e40e09f:   hlt    
[Exception Handler]
  0x000000011e40e0a0:   jmpq   0x0000000116969b00           ;   {no_reloc}
[Deopt Handler Code]
  0x000000011e40e0a5:   callq  0x000000011e40e0aa
  0x000000011e40e0aa:   subq   $0x5,(%rsp)
  0x000000011e40e0af:   jmpq   0x00000001169573a0           ;   {runtime_call DeoptimizationBlob}
  0x000000011e40e0b4:   hlt    
  0x000000011e40e0b5:   hlt    
  0x000000011e40e0b6:   hlt    
  0x000000011e40e0b7:   hlt    
--------------------------------------------------------------------------------
2.358 ns/op
Iteration   1: 2.349 ns/op


Result "ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheck.m01SwarChainedFromLong":
  2.349 ns/op


# JMH version: 1.28
# VM version: JDK 17, OpenJDK 64-Bit Server VM, 17+35-2724
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin/java
# VM options: -Dvisualvm.id=19332620218016 -javaagent:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar=50301:/Applications/IntelliJ IDEA CE.app/Contents/bin -Dfile.encoding=UTF-8 -XX:+UnlockExperimentalVMOptions --add-modules jdk.incubator.vector -XX:+UnlockDiagnosticVMOptions -XX:CompileCommand=print,*EightDigitsJmhWithoutCheckAlgos.*
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheck.m02Swar11FromLong

# Run progress: 16.67% complete, ETA 00:01:44
# Fork: 1 of 1
CompileCommand: print *EightDigitsJmhWithoutCheckAlgos.* bool print = true
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 
============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)     221  839       3       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits11 (54 bytes)
 total in heap  [0x000000010d4d7390,0x000000010d4d76f0] = 864
 relocation     [0x000000010d4d74f0,0x000000010d4d7518] = 40
 main code      [0x000000010d4d7520,0x000000010d4d7660] = 320
 stub code      [0x000000010d4d7660,0x000000010d4d7690] = 48
 oops           [0x000000010d4d7690,0x000000010d4d7698] = 8
 metadata       [0x000000010d4d7698,0x000000010d4d76a0] = 8
 scopes data    [0x000000010d4d76a0,0x000000010d4d76b8] = 24
 scopes pcs     [0x000000010d4d76b8,0x000000010d4d76e8] = 48
 dependencies   [0x000000010d4d76e8,0x000000010d4d76f0] = 8

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00000001020a9890} 'tryToParseEightDigits11' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  # parm0:    rsi:rsi   = long
  #           [sp+0x50]  (sp of caller)
  0x000000010d4d7520:   mov    %eax,-0x14000(%rsp)
  0x000000010d4d7527:   push   %rbp
  0x000000010d4d7528:   sub    $0x40,%rsp
  0x000000010d4d752c:   movabs $0x1020aa078,%rax            ;   {metadata(method data for {method} {0x00000001020a9890} 'tryToParseEightDigits11' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x000000010d4d7536:   mov    0xac(%rax),%ecx
  0x000000010d4d753c:   add    $0x2,%ecx
  0x000000010d4d753f:   mov    %ecx,0xac(%rax)
  0x000000010d4d7545:   and    $0x7fe,%ecx
  0x000000010d4d754b:   cmp    $0x0,%ecx
  0x000000010d4d754e:   je     0x000000010d4d75e6
  0x000000010d4d7554:   movabs $0x3030303030303030,%r10
  0x000000010d4d755e:   sub    %r10,%rsi
  0x000000010d4d7561:   movabs $0xa,%rax
  0x000000010d4d756b:   mov    %rax,%rcx
  0x000000010d4d756e:   mov    %rsi,%rax
  0x000000010d4d7571:   imul   %rcx,%rax
  0x000000010d4d7575:   mov    $0x8,%ecx
  0x000000010d4d757a:   shr    %cl,%rsi
  0x000000010d4d757d:   mov    %rax,%rdi
  0x000000010d4d7580:   add    %rsi,%rdi
  0x000000010d4d7583:   movabs $0xff000000ff,%rsi
  0x000000010d4d758d:   mov    %rdi,%rax
  0x000000010d4d7590:   and    %rsi,%rax
  0x000000010d4d7593:   movabs $0xf424000000064,%rcx
  0x000000010d4d759d:   imul   %rcx,%rax
  0x000000010d4d75a1:   mov    %rax,%rbx
  0x000000010d4d75a4:   mov    $0x10,%ecx
  0x000000010d4d75a9:   shr    %cl,%rdi
  0x000000010d4d75ac:   and    %rsi,%rdi
  0x000000010d4d75af:   movabs $0x271000000001,%rax
  0x000000010d4d75b9:   mov    %rax,%rcx
  0x000000010d4d75bc:   mov    %rdi,%rax
  0x000000010d4d75bf:   imul   %rcx,%rax
  0x000000010d4d75c3:   add    %rax,%rbx
  0x000000010d4d75c6:   mov    $0x20,%ecx
  0x000000010d4d75cb:   shr    %cl,%rbx
  0x000000010d4d75ce:   mov    %ebx,%ebx
  0x000000010d4d75d0:   mov    %rbx,%rax
  0x000000010d4d75d3:   add    $0x40,%rsp
  0x000000010d4d75d7:   pop    %rbp
  0x000000010d4d75d8:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x000000010d4d75df:   ja     0x000000010d4d7607
  0x000000010d4d75e5:   retq   
  0x000000010d4d75e6:   movabs $0x1020a9890,%r10            ;   {metadata({method} {0x00000001020a9890} 'tryToParseEightDigits11' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x000000010d4d75f0:   mov    %r10,0x8(%rsp)
  0x000000010d4d75f5:   movq   $0xffffffffffffffff,(%rsp)
  0x000000010d4d75fd:   callq  0x000000010cef7180           ; ImmutableOopMap {}
                                                            ;*synchronization entry
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits11@-1 (line 55)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010d4d7602:   jmpq   0x000000010d4d7554
  0x000000010d4d7607:   movabs $0x10d4d75d8,%r10            ;   {internal_word}
  0x000000010d4d7611:   mov    %r10,0x358(%r15)
  0x000000010d4d7618:   jmpq   0x000000010ce52100           ;   {runtime_call SafepointBlob}
  0x000000010d4d761d:   nop
  0x000000010d4d761e:   nop
  0x000000010d4d761f:   mov    0x3d0(%r15),%rax
  0x000000010d4d7626:   movq   $0x0,0x3d0(%r15)
  0x000000010d4d7631:   movq   $0x0,0x3d8(%r15)
  0x000000010d4d763c:   add    $0x40,%rsp
  0x000000010d4d7640:   pop    %rbp
  0x000000010d4d7641:   jmpq   0x000000010cef0580           ;   {runtime_call unwind_exception Runtime1 stub}
  0x000000010d4d7646:   hlt    
  0x000000010d4d7647:   hlt    
  0x000000010d4d7648:   hlt    
  0x000000010d4d7649:   hlt    
  0x000000010d4d764a:   hlt    
  0x000000010d4d764b:   hlt    
  0x000000010d4d764c:   hlt    
  0x000000010d4d764d:   hlt    
  0x000000010d4d764e:   hlt    
  0x000000010d4d764f:   hlt    
  0x000000010d4d7650:   hlt    
  0x000000010d4d7651:   hlt    
  0x000000010d4d7652:   hlt    
  0x000000010d4d7653:   hlt    
  0x000000010d4d7654:   hlt    
  0x000000010d4d7655:   hlt    
  0x000000010d4d7656:   hlt    
  0x000000010d4d7657:   hlt    
  0x000000010d4d7658:   hlt    
  0x000000010d4d7659:   hlt    
  0x000000010d4d765a:   hlt    
  0x000000010d4d765b:   hlt    
  0x000000010d4d765c:   hlt    
  0x000000010d4d765d:   hlt    
  0x000000010d4d765e:   hlt    
  0x000000010d4d765f:   hlt    
[Exception Handler]
  0x000000010d4d7660:   callq  0x000000010cef3280           ;   {no_reloc}
  0x000000010d4d7665:   movabs $0x1031aee43,%rdi            ;   {external_word}
  0x000000010d4d766f:   and    $0xfffffffffffffff0,%rsp
  0x000000010d4d7673:   callq  0x0000000102e51c50           ;   {runtime_call _ZN14MacroAssembler7debug64EPcxPx}
  0x000000010d4d7678:   hlt    
[Deopt Handler Code]
  0x000000010d4d7679:   movabs $0x10d4d7679,%r10            ;   {section_word}
  0x000000010d4d7683:   push   %r10
  0x000000010d4d7685:   jmpq   0x000000010ce513a0           ;   {runtime_call DeoptimizationBlob}
  0x000000010d4d768a:   hlt    
  0x000000010d4d768b:   hlt    
  0x000000010d4d768c:   hlt    
  0x000000010d4d768d:   hlt    
  0x000000010d4d768e:   hlt    
  0x000000010d4d768f:   hlt    
--------------------------------------------------------------------------------

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     223  842       4       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits11 (54 bytes)
 total in heap  [0x0000000114907a90,0x0000000114907d10] = 640
 relocation     [0x0000000114907bf0,0x0000000114907c00] = 16
 main code      [0x0000000114907c00,0x0000000114907cc0] = 192
 stub code      [0x0000000114907cc0,0x0000000114907cd8] = 24
 oops           [0x0000000114907cd8,0x0000000114907ce0] = 8
 scopes data    [0x0000000114907ce0,0x0000000114907ce8] = 8
 scopes pcs     [0x0000000114907ce8,0x0000000114907d08] = 32
 dependencies   [0x0000000114907d08,0x0000000114907d10] = 8

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00000001020a9890} 'tryToParseEightDigits11' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  # parm0:    rsi:rsi   = long
  #           [sp+0x20]  (sp of caller)
  0x0000000114907c00:   sub    $0x18,%rsp
  0x0000000114907c07:   mov    %rbp,0x10(%rsp)
  0x0000000114907c0c:   mov    %rsi,%r10
  0x0000000114907c0f:   shl    %r10
  0x0000000114907c12:   mov    %rsi,%r11
  0x0000000114907c15:   shl    $0x3,%r11
  0x0000000114907c19:   add    %r11,%r10
  0x0000000114907c1c:   movabs $0x271000000001,%r11
  0x0000000114907c26:   movabs $0xff000000ff,%r8
  0x0000000114907c30:   movabs $0x1e1e1e1e1e1e1e20,%r9
  0x0000000114907c3a:   movabs $0xcfcfcfcfcfcfcfd0,%rcx
  0x0000000114907c44:   add    %rcx,%rsi
  0x0000000114907c47:   shr    $0x8,%rsi
  0x0000000114907c4b:   add    %rsi,%r10
  0x0000000114907c4e:   add    %r9,%r10
  0x0000000114907c51:   mov    %r10,%r9
  0x0000000114907c54:   and    %r8,%r9
  0x0000000114907c57:   shr    $0x10,%r10
  0x0000000114907c5b:   and    %r8,%r10
  0x0000000114907c5e:   imul   %r11,%r10
  0x0000000114907c62:   movabs $0xf424000000064,%r11
  0x0000000114907c6c:   imul   %r11,%r9
  0x0000000114907c70:   add    %r10,%r9
  0x0000000114907c73:   shr    $0x20,%r9
  0x0000000114907c77:   mov    %r9d,%eax
  0x0000000114907c7a:   add    $0x10,%rsp
  0x0000000114907c7e:   pop    %rbp
  0x0000000114907c7f:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x0000000114907c86:   ja     0x0000000114907c8d
  0x0000000114907c8c:   retq   
  0x0000000114907c8d:   movabs $0x114907c7f,%r10            ;   {internal_word}
  0x0000000114907c97:   mov    %r10,0x358(%r15)
  0x0000000114907c9e:   jmpq   0x000000010ce52100           ;   {runtime_call SafepointBlob}
  0x0000000114907ca3:   hlt    
  0x0000000114907ca4:   hlt    
  0x0000000114907ca5:   hlt    
  0x0000000114907ca6:   hlt    
  0x0000000114907ca7:   hlt    
  0x0000000114907ca8:   hlt    
  0x0000000114907ca9:   hlt    
  0x0000000114907caa:   hlt    
  0x0000000114907cab:   hlt    
  0x0000000114907cac:   hlt    
  0x0000000114907cad:   hlt    
  0x0000000114907cae:   hlt    
  0x0000000114907caf:   hlt    
  0x0000000114907cb0:   hlt    
  0x0000000114907cb1:   hlt    
  0x0000000114907cb2:   hlt    
  0x0000000114907cb3:   hlt    
  0x0000000114907cb4:   hlt    
  0x0000000114907cb5:   hlt    
  0x0000000114907cb6:   hlt    
  0x0000000114907cb7:   hlt    
  0x0000000114907cb8:   hlt    
  0x0000000114907cb9:   hlt    
  0x0000000114907cba:   hlt    
  0x0000000114907cbb:   hlt    
  0x0000000114907cbc:   hlt    
  0x0000000114907cbd:   hlt    
  0x0000000114907cbe:   hlt    
  0x0000000114907cbf:   hlt    
[Exception Handler]
  0x0000000114907cc0:   jmpq   0x000000010cef0880           ;   {no_reloc}
[Deopt Handler Code]
  0x0000000114907cc5:   callq  0x0000000114907cca
  0x0000000114907cca:   subq   $0x5,(%rsp)
  0x0000000114907ccf:   jmpq   0x000000010ce513a0           ;   {runtime_call DeoptimizationBlob}
  0x0000000114907cd4:   hlt    
  0x0000000114907cd5:   hlt    
  0x0000000114907cd6:   hlt    
  0x0000000114907cd7:   hlt    
--------------------------------------------------------------------------------
2.321 ns/op
Iteration   1: 2.320 ns/op


Result "ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheck.m02Swar11FromLong":
  2.320 ns/op


# JMH version: 1.28
# VM version: JDK 17, OpenJDK 64-Bit Server VM, 17+35-2724
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin/java
# VM options: -Dvisualvm.id=19332620218016 -javaagent:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar=50301:/Applications/IntelliJ IDEA CE.app/Contents/bin -Dfile.encoding=UTF-8 -XX:+UnlockExperimentalVMOptions --add-modules jdk.incubator.vector -XX:+UnlockDiagnosticVMOptions -XX:CompileCommand=print,*EightDigitsJmhWithoutCheckAlgos.*
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheck.m03Swar10FromLong

# Run progress: 33.33% complete, ETA 00:01:22
# Fork: 1 of 1
CompileCommand: print *EightDigitsJmhWithoutCheckAlgos.* bool print = true
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 
============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)     210  831       3       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10 (51 bytes)
 total in heap  [0x000000011d655c10,0x000000011d655f70] = 864
 relocation     [0x000000011d655d70,0x000000011d655d98] = 40
 main code      [0x000000011d655da0,0x000000011d655ee0] = 320
 stub code      [0x000000011d655ee0,0x000000011d655f10] = 48
 oops           [0x000000011d655f10,0x000000011d655f18] = 8
 metadata       [0x000000011d655f18,0x000000011d655f20] = 8
 scopes data    [0x000000011d655f20,0x000000011d655f38] = 24
 scopes pcs     [0x000000011d655f38,0x000000011d655f68] = 48
 dependencies   [0x000000011d655f68,0x000000011d655f70] = 8

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x000000010cca93f8} 'tryToParseEightDigits10' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  # parm0:    rsi:rsi   = long
  #           [sp+0x50]  (sp of caller)
  0x000000011d655da0:   mov    %eax,-0x14000(%rsp)
  0x000000011d655da7:   push   %rbp
  0x000000011d655da8:   sub    $0x40,%rsp
  0x000000011d655dac:   movabs $0x10ccaa1b8,%rax            ;   {metadata(method data for {method} {0x000000010cca93f8} 'tryToParseEightDigits10' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x000000011d655db6:   mov    0xac(%rax),%ecx
  0x000000011d655dbc:   add    $0x2,%ecx
  0x000000011d655dbf:   mov    %ecx,0xac(%rax)
  0x000000011d655dc5:   and    $0x7fe,%ecx
  0x000000011d655dcb:   cmp    $0x0,%ecx
  0x000000011d655dce:   je     0x000000011d655e63
  0x000000011d655dd4:   movabs $0x3030303030303030,%r10
  0x000000011d655dde:   sub    %r10,%rsi
  0x000000011d655de1:   movabs $0xa01,%rax
  0x000000011d655deb:   mov    %rax,%rcx
  0x000000011d655dee:   mov    %rsi,%rax
  0x000000011d655df1:   imul   %rcx,%rax
  0x000000011d655df5:   mov    $0x8,%ecx
  0x000000011d655dfa:   mov    %rax,%rsi
  0x000000011d655dfd:   sar    %cl,%rsi
  0x000000011d655e00:   movabs $0xff000000ff,%rdi
  0x000000011d655e0a:   mov    %rsi,%rax
  0x000000011d655e0d:   and    %rdi,%rax
  0x000000011d655e10:   movabs $0xf424000000064,%rcx
  0x000000011d655e1a:   imul   %rcx,%rax
  0x000000011d655e1e:   mov    %rax,%rbx
  0x000000011d655e21:   mov    $0x10,%ecx
  0x000000011d655e26:   shr    %cl,%rsi
  0x000000011d655e29:   and    %rdi,%rsi
  0x000000011d655e2c:   movabs $0x271000000001,%rax
  0x000000011d655e36:   mov    %rax,%rcx
  0x000000011d655e39:   mov    %rsi,%rax
  0x000000011d655e3c:   imul   %rcx,%rax
  0x000000011d655e40:   add    %rax,%rbx
  0x000000011d655e43:   mov    $0x20,%ecx
  0x000000011d655e48:   shr    %cl,%rbx
  0x000000011d655e4b:   mov    %ebx,%ebx
  0x000000011d655e4d:   mov    %rbx,%rax
  0x000000011d655e50:   add    $0x40,%rsp
  0x000000011d655e54:   pop    %rbp
  0x000000011d655e55:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x000000011d655e5c:   ja     0x000000011d655e84
  0x000000011d655e62:   retq   
  0x000000011d655e63:   movabs $0x10cca93f8,%r10            ;   {metadata({method} {0x000000010cca93f8} 'tryToParseEightDigits10' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x000000011d655e6d:   mov    %r10,0x8(%rsp)
  0x000000011d655e72:   movq   $0xffffffffffffffff,(%rsp)
  0x000000011d655e7a:   callq  0x000000011d077480           ; ImmutableOopMap {}
                                                            ;*synchronization entry
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10@-1 (line 29)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000011d655e7f:   jmpq   0x000000011d655dd4
  0x000000011d655e84:   movabs $0x11d655e55,%r10            ;   {internal_word}
  0x000000011d655e8e:   mov    %r10,0x358(%r15)
  0x000000011d655e95:   jmpq   0x000000011cfd2100           ;   {runtime_call SafepointBlob}
  0x000000011d655e9a:   nop
  0x000000011d655e9b:   nop
  0x000000011d655e9c:   mov    0x3d0(%r15),%rax
  0x000000011d655ea3:   movq   $0x0,0x3d0(%r15)
  0x000000011d655eae:   movq   $0x0,0x3d8(%r15)
  0x000000011d655eb9:   add    $0x40,%rsp
  0x000000011d655ebd:   pop    %rbp
  0x000000011d655ebe:   jmpq   0x000000011d070b80           ;   {runtime_call unwind_exception Runtime1 stub}
  0x000000011d655ec3:   hlt    
  0x000000011d655ec4:   hlt    
  0x000000011d655ec5:   hlt    
  0x000000011d655ec6:   hlt    
  0x000000011d655ec7:   hlt    
  0x000000011d655ec8:   hlt    
  0x000000011d655ec9:   hlt    
  0x000000011d655eca:   hlt    
  0x000000011d655ecb:   hlt    
  0x000000011d655ecc:   hlt    
  0x000000011d655ecd:   hlt    
  0x000000011d655ece:   hlt    
  0x000000011d655ecf:   hlt    
  0x000000011d655ed0:   hlt    
  0x000000011d655ed1:   hlt    
  0x000000011d655ed2:   hlt    
  0x000000011d655ed3:   hlt    
  0x000000011d655ed4:   hlt    
  0x000000011d655ed5:   hlt    
  0x000000011d655ed6:   hlt    
  0x000000011d655ed7:   hlt    
  0x000000011d655ed8:   hlt    
  0x000000011d655ed9:   hlt    
  0x000000011d655eda:   hlt    
  0x000000011d655edb:   hlt    
  0x000000011d655edc:   hlt    
  0x000000011d655edd:   hlt    
  0x000000011d655ede:   hlt    
  0x000000011d655edf:   hlt    
[Exception Handler]
  0x000000011d655ee0:   callq  0x000000011d073e80           ;   {no_reloc}
  0x000000011d655ee5:   movabs $0x10df75e43,%rdi            ;   {external_word}
  0x000000011d655eef:   and    $0xfffffffffffffff0,%rsp
  0x000000011d655ef3:   callq  0x000000010dc18c50           ;   {runtime_call _ZN14MacroAssembler7debug64EPcxPx}
  0x000000011d655ef8:   hlt    
[Deopt Handler Code]
  0x000000011d655ef9:   movabs $0x11d655ef9,%r10            ;   {section_word}
  0x000000011d655f03:   push   %r10
  0x000000011d655f05:   jmpq   0x000000011cfd13a0           ;   {runtime_call DeoptimizationBlob}
  0x000000011d655f0a:   hlt    
  0x000000011d655f0b:   hlt    
  0x000000011d655f0c:   hlt    
  0x000000011d655f0d:   hlt    
  0x000000011d655f0e:   hlt    
  0x000000011d655f0f:   hlt    
--------------------------------------------------------------------------------

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     222  835       4       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10 (51 bytes)
 total in heap  [0x0000000124a86910,0x0000000124a86b70] = 608
 relocation     [0x0000000124a86a70,0x0000000124a86a80] = 16
 main code      [0x0000000124a86a80,0x0000000124a86b20] = 160
 stub code      [0x0000000124a86b20,0x0000000124a86b38] = 24
 oops           [0x0000000124a86b38,0x0000000124a86b40] = 8
 scopes data    [0x0000000124a86b40,0x0000000124a86b48] = 8
 scopes pcs     [0x0000000124a86b48,0x0000000124a86b68] = 32
 dependencies   [0x0000000124a86b68,0x0000000124a86b70] = 8

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x000000010cca93f8} 'tryToParseEightDigits10' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  # parm0:    rsi:rsi   = long
  #           [sp+0x20]  (sp of caller)
  0x0000000124a86a80:   sub    $0x18,%rsp
  0x0000000124a86a87:   mov    %rbp,0x10(%rsp)
  0x0000000124a86a8c:   movabs $0x271000000001,%r10
  0x0000000124a86a96:   movabs $0xff000000ff,%r11
  0x0000000124a86aa0:   movabs $0xcfcfcfcfcfcfcfd0,%r8
  0x0000000124a86aaa:   add    %r8,%rsi
  0x0000000124a86aad:   imul   $0xa01,%rsi,%r8
  0x0000000124a86ab4:   mov    %r8,%r9
  0x0000000124a86ab7:   sar    $0x8,%r9
  0x0000000124a86abb:   shr    $0x8,%r8
  0x0000000124a86abf:   and    %r11,%r8
  0x0000000124a86ac2:   shr    $0x10,%r9
  0x0000000124a86ac6:   and    %r11,%r9
  0x0000000124a86ac9:   imul   %r10,%r9
  0x0000000124a86acd:   movabs $0xf424000000064,%r10
  0x0000000124a86ad7:   imul   %r10,%r8
  0x0000000124a86adb:   add    %r9,%r8
  0x0000000124a86ade:   shr    $0x20,%r8
  0x0000000124a86ae2:   mov    %r8d,%eax
  0x0000000124a86ae5:   add    $0x10,%rsp
  0x0000000124a86ae9:   pop    %rbp
  0x0000000124a86aea:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x0000000124a86af1:   ja     0x0000000124a86af8
  0x0000000124a86af7:   retq   
  0x0000000124a86af8:   movabs $0x124a86aea,%r10            ;   {internal_word}
  0x0000000124a86b02:   mov    %r10,0x358(%r15)
  0x0000000124a86b09:   jmpq   0x000000011cfd2100           ;   {runtime_call SafepointBlob}
  0x0000000124a86b0e:   hlt    
  0x0000000124a86b0f:   hlt    
  0x0000000124a86b10:   hlt    
  0x0000000124a86b11:   hlt    
  0x0000000124a86b12:   hlt    
  0x0000000124a86b13:   hlt    
  0x0000000124a86b14:   hlt    
  0x0000000124a86b15:   hlt    
  0x0000000124a86b16:   hlt    
  0x0000000124a86b17:   hlt    
  0x0000000124a86b18:   hlt    
  0x0000000124a86b19:   hlt    
  0x0000000124a86b1a:   hlt    
  0x0000000124a86b1b:   hlt    
  0x0000000124a86b1c:   hlt    
  0x0000000124a86b1d:   hlt    
  0x0000000124a86b1e:   hlt    
  0x0000000124a86b1f:   hlt    
[Exception Handler]
  0x0000000124a86b20:   jmpq   0x000000011cfe3b00           ;   {no_reloc}
[Deopt Handler Code]
  0x0000000124a86b25:   callq  0x0000000124a86b2a
  0x0000000124a86b2a:   subq   $0x5,(%rsp)
  0x0000000124a86b2f:   jmpq   0x000000011cfd13a0           ;   {runtime_call DeoptimizationBlob}
  0x0000000124a86b34:   hlt    
  0x0000000124a86b35:   hlt    
  0x0000000124a86b36:   hlt    
  0x0000000124a86b37:   hlt    
--------------------------------------------------------------------------------
2.335 ns/op
Iteration   1: 2.258 ns/op


Result "ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheck.m03Swar10FromLong":
  2.258 ns/op


# JMH version: 1.28
# VM version: JDK 17, OpenJDK 64-Bit Server VM, 17+35-2724
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin/java
# VM options: -Dvisualvm.id=19332620218016 -javaagent:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar=50301:/Applications/IntelliJ IDEA CE.app/Contents/bin -Dfile.encoding=UTF-8 -XX:+UnlockExperimentalVMOptions --add-modules jdk.incubator.vector -XX:+UnlockDiagnosticVMOptions -XX:CompileCommand=print,*EightDigitsJmhWithoutCheckAlgos.*
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheck.m11SwarChainedFromLongInLoop

# Run progress: 50.00% complete, ETA 00:01:02
# Fork: 1 of 1
CompileCommand: print *EightDigitsJmhWithoutCheckAlgos.* bool print = true
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 
============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)     214  835       2       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigitsChained (50 bytes)
 total in heap  [0x000000010e3f1c10,0x000000010e3f1f58] = 840
 relocation     [0x000000010e3f1d70,0x000000010e3f1d98] = 40
 main code      [0x000000010e3f1da0,0x000000010e3f1ec0] = 288
 stub code      [0x000000010e3f1ec0,0x000000010e3f1ef0] = 48
 oops           [0x000000010e3f1ef0,0x000000010e3f1ef8] = 8
 metadata       [0x000000010e3f1ef8,0x000000010e3f1f00] = 8
 scopes data    [0x000000010e3f1f00,0x000000010e3f1f20] = 32
 scopes pcs     [0x000000010e3f1f20,0x000000010e3f1f50] = 48
 dependencies   [0x000000010e3f1f50,0x000000010e3f1f58] = 8

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00000001314a9918} 'tryToParseEightDigitsChained' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  # parm0:    rsi:rsi   = long
  #           [sp+0x40]  (sp of caller)
  0x000000010e3f1da0:   mov    %eax,-0x14000(%rsp)
  0x000000010e3f1da7:   push   %rbp
  0x000000010e3f1da8:   sub    $0x30,%rsp
  0x000000010e3f1dac:   movabs $0x1314aa130,%rax
  0x000000010e3f1db6:   mov    0x8(%rax),%ecx
  0x000000010e3f1db9:   add    $0x2,%ecx
  0x000000010e3f1dbc:   mov    %ecx,0x8(%rax)
  0x000000010e3f1dbf:   and    $0xffe,%ecx
  0x000000010e3f1dc5:   cmp    $0x0,%ecx
  0x000000010e3f1dc8:   je     0x000000010e3f1e52
  0x000000010e3f1dce:   movabs $0x3030303030303030,%r10
  0x000000010e3f1dd8:   sub    %r10,%rsi
  0x000000010e3f1ddb:   movabs $0xa01,%rax
  0x000000010e3f1de5:   mov    %rax,%rcx
  0x000000010e3f1de8:   mov    %rsi,%rax
  0x000000010e3f1deb:   imul   %rcx,%rax
  0x000000010e3f1def:   mov    $0x8,%ecx
  0x000000010e3f1df4:   shr    %cl,%rax
  0x000000010e3f1df7:   movabs $0xff00ff00ff00ff,%r10
  0x000000010e3f1e01:   and    %r10,%rax
  0x000000010e3f1e04:   movabs $0x640001,%rcx
  0x000000010e3f1e0e:   imul   %rcx,%rax
  0x000000010e3f1e12:   mov    $0x10,%ecx
  0x000000010e3f1e17:   shr    %cl,%rax
  0x000000010e3f1e1a:   movabs $0xffff0000ffff,%r10
  0x000000010e3f1e24:   and    %r10,%rax
  0x000000010e3f1e27:   movabs $0x271000000001,%rcx
  0x000000010e3f1e31:   imul   %rcx,%rax
  0x000000010e3f1e35:   mov    $0x20,%ecx
  0x000000010e3f1e3a:   shr    %cl,%rax
  0x000000010e3f1e3d:   mov    %eax,%eax
  0x000000010e3f1e3f:   add    $0x30,%rsp
  0x000000010e3f1e43:   pop    %rbp
  0x000000010e3f1e44:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x000000010e3f1e4b:   ja     0x000000010e3f1e73
  0x000000010e3f1e51:   retq   
  0x000000010e3f1e52:   movabs $0x1314a9918,%r10            ;   {metadata({method} {0x00000001314a9918} 'tryToParseEightDigitsChained' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x000000010e3f1e5c:   mov    %r10,0x8(%rsp)
  0x000000010e3f1e61:   movq   $0xffffffffffffffff,(%rsp)
  0x000000010e3f1e69:   callq  0x000000010de0e480           ; ImmutableOopMap {}
                                                            ;*synchronization entry
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigitsChained@-1 (line 82)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e3f1e6e:   jmpq   0x000000010e3f1dce
  0x000000010e3f1e73:   movabs $0x10e3f1e44,%r10            ;   {internal_word}
  0x000000010e3f1e7d:   mov    %r10,0x358(%r15)
  0x000000010e3f1e84:   jmpq   0x000000010dd69100           ;   {runtime_call SafepointBlob}
  0x000000010e3f1e89:   nop
  0x000000010e3f1e8a:   nop
  0x000000010e3f1e8b:   mov    0x3d0(%r15),%rax
  0x000000010e3f1e92:   movq   $0x0,0x3d0(%r15)
  0x000000010e3f1e9d:   movq   $0x0,0x3d8(%r15)
  0x000000010e3f1ea8:   add    $0x30,%rsp
  0x000000010e3f1eac:   pop    %rbp
  0x000000010e3f1ead:   jmpq   0x000000010dd7a500           ;   {runtime_call unwind_exception Runtime1 stub}
  0x000000010e3f1eb2:   hlt    
  0x000000010e3f1eb3:   hlt    
  0x000000010e3f1eb4:   hlt    
  0x000000010e3f1eb5:   hlt    
  0x000000010e3f1eb6:   hlt    
  0x000000010e3f1eb7:   hlt    
  0x000000010e3f1eb8:   hlt    
  0x000000010e3f1eb9:   hlt    
  0x000000010e3f1eba:   hlt    
  0x000000010e3f1ebb:   hlt    
  0x000000010e3f1ebc:   hlt    
  0x000000010e3f1ebd:   hlt    
  0x000000010e3f1ebe:   hlt    
  0x000000010e3f1ebf:   hlt    
[Exception Handler]
  0x000000010e3f1ec0:   callq  0x000000010de0ae80           ;   {no_reloc}
  0x000000010e3f1ec5:   movabs $0x10607be43,%rdi            ;   {external_word}
  0x000000010e3f1ecf:   and    $0xfffffffffffffff0,%rsp
  0x000000010e3f1ed3:   callq  0x0000000105d1ec50           ;   {runtime_call _ZN14MacroAssembler7debug64EPcxPx}
  0x000000010e3f1ed8:   hlt    
[Deopt Handler Code]
  0x000000010e3f1ed9:   movabs $0x10e3f1ed9,%r10            ;   {section_word}
  0x000000010e3f1ee3:   push   %r10
  0x000000010e3f1ee5:   jmpq   0x000000010dd683a0           ;   {runtime_call DeoptimizationBlob}
  0x000000010e3f1eea:   hlt    
  0x000000010e3f1eeb:   hlt    
  0x000000010e3f1eec:   hlt    
  0x000000010e3f1eed:   hlt    
  0x000000010e3f1eee:   hlt    
  0x000000010e3f1eef:   hlt    
--------------------------------------------------------------------------------

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     567  837       4       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigitsChained (50 bytes)
 total in heap  [0x0000000115834a90,0x0000000115834cf0] = 608
 relocation     [0x0000000115834bf0,0x0000000115834c00] = 16
 main code      [0x0000000115834c00,0x0000000115834ca0] = 160
 stub code      [0x0000000115834ca0,0x0000000115834cb8] = 24
 oops           [0x0000000115834cb8,0x0000000115834cc0] = 8
 scopes data    [0x0000000115834cc0,0x0000000115834cc8] = 8
 scopes pcs     [0x0000000115834cc8,0x0000000115834ce8] = 32
 dependencies   [0x0000000115834ce8,0x0000000115834cf0] = 8

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00000001314a9918} 'tryToParseEightDigitsChained' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  # parm0:    rsi:rsi   = long
  #           [sp+0x20]  (sp of caller)
  0x0000000115834c00:   sub    $0x18,%rsp
  0x0000000115834c07:   mov    %rbp,0x10(%rsp)
  0x0000000115834c0c:   movabs $0x271000000001,%r10
  0x0000000115834c16:   movabs $0xcfcfcfcfcfcfcfd0,%r11
  0x0000000115834c20:   add    %r11,%rsi
  0x0000000115834c23:   imul   $0xa01,%rsi,%r11
  0x0000000115834c2a:   shr    $0x8,%r11
  0x0000000115834c2e:   movabs $0xff00ff00ff00ff,%r8
  0x0000000115834c38:   and    %r8,%r11
  0x0000000115834c3b:   imul   $0x640001,%r11,%r11
  0x0000000115834c42:   shr    $0x10,%r11
  0x0000000115834c46:   movabs $0xffff0000ffff,%r8
  0x0000000115834c50:   and    %r8,%r11
  0x0000000115834c53:   imul   %r10,%r11
  0x0000000115834c57:   shr    $0x20,%r11
  0x0000000115834c5b:   mov    %r11d,%eax
  0x0000000115834c5e:   add    $0x10,%rsp
  0x0000000115834c62:   pop    %rbp
  0x0000000115834c63:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x0000000115834c6a:   ja     0x0000000115834c71
  0x0000000115834c70:   retq   
  0x0000000115834c71:   movabs $0x115834c63,%r10            ;   {internal_word}
  0x0000000115834c7b:   mov    %r10,0x358(%r15)
  0x0000000115834c82:   jmpq   0x000000010dd69100           ;   {runtime_call SafepointBlob}
  0x0000000115834c87:   hlt    
  0x0000000115834c88:   hlt    
  0x0000000115834c89:   hlt    
  0x0000000115834c8a:   hlt    
  0x0000000115834c8b:   hlt    
  0x0000000115834c8c:   hlt    
  0x0000000115834c8d:   hlt    
  0x0000000115834c8e:   hlt    
  0x0000000115834c8f:   hlt    
  0x0000000115834c90:   hlt    
  0x0000000115834c91:   hlt    
  0x0000000115834c92:   hlt    
  0x0000000115834c93:   hlt    
  0x0000000115834c94:   hlt    
  0x0000000115834c95:   hlt    
  0x0000000115834c96:   hlt    
  0x0000000115834c97:   hlt    
  0x0000000115834c98:   hlt    
  0x0000000115834c99:   hlt    
  0x0000000115834c9a:   hlt    
  0x0000000115834c9b:   hlt    
  0x0000000115834c9c:   hlt    
  0x0000000115834c9d:   hlt    
  0x0000000115834c9e:   hlt    
  0x0000000115834c9f:   hlt    
[Exception Handler]
  0x0000000115834ca0:   jmpq   0x000000010de07880           ;   {no_reloc}
[Deopt Handler Code]
  0x0000000115834ca5:   callq  0x0000000115834caa
  0x0000000115834caa:   subq   $0x5,(%rsp)
  0x0000000115834caf:   jmpq   0x000000010dd683a0           ;   {runtime_call DeoptimizationBlob}
  0x0000000115834cb4:   hlt    
  0x0000000115834cb5:   hlt    
  0x0000000115834cb6:   hlt    
  0x0000000115834cb7:   hlt    
--------------------------------------------------------------------------------

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     571  836 %     4       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigitsChainedInLoop @ 10 (38 bytes)
 total in heap  [0x0000000115835610,0x0000000115835bf0] = 1504
 relocation     [0x0000000115835770,0x0000000115835790] = 32
 main code      [0x00000001158357a0,0x0000000115835ae0] = 832
 stub code      [0x0000000115835ae0,0x0000000115835af8] = 24
 oops           [0x0000000115835af8,0x0000000115835b00] = 8
 metadata       [0x0000000115835b00,0x0000000115835b10] = 16
 scopes data    [0x0000000115835b10,0x0000000115835b78] = 104
 scopes pcs     [0x0000000115835b78,0x0000000115835bd8] = 96
 dependencies   [0x0000000115835bd8,0x0000000115835be0] = 8
 nul chk table  [0x0000000115835be0,0x0000000115835bf0] = 16

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00000001314a99f8} 'tryToParseEightDigitsChainedInLoop' '([J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  0x00000001158357a0:   callq  0x0000000105e1c100           ;   {runtime_call _ZN2os10breakpointEv}
  0x00000001158357a5:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x00000001158357b0:   mov    %eax,-0x14000(%rsp)
  0x00000001158357b7:   push   %rbp
  0x00000001158357b8:   sub    $0x30,%rsp
  0x00000001158357bc:   mov    0x20(%rsi),%r14
  0x00000001158357c0:   mov    0x28(%rsi),%ebp
  0x00000001158357c3:   mov    0x18(%rsi),%r13d
  0x00000001158357c7:   mov    0x10(%rsi),%ebx
  0x00000001158357ca:   mov    %rsi,%rdi
  0x00000001158357cd:   movabs $0x105eb9200,%r10
  0x00000001158357d7:   callq  *%r10
  0x00000001158357da:   nopw   0x0(%rax,%rax,1)
  0x00000001158357e0:   mov    0x8(%r14),%r11d              ; implicit exception: dispatches to 0x0000000115835ab4
  0x00000001158357e4:   cmp    $0x1180,%r11d                ;   {metadata({type array long})}
  0x00000001158357eb:   jne    0x0000000115835a9c
  0x00000001158357f1:   cmp    %r13d,%ebx
  0x00000001158357f4:   jge    0x0000000115835a6d
  0x00000001158357fa:   mov    0xc(%r14),%r11d
  0x00000001158357fe:   mov    %ebx,%r10d
  0x0000000115835801:   inc    %r10d
  0x0000000115835804:   movabs $0x271000000001,%rdi
  0x000000011583580e:   movabs $0xffff0000ffff,%r9
  0x0000000115835818:   xor    %ecx,%ecx
  0x000000011583581a:   test   %r10d,%r10d
  0x000000011583581d:   cmovl  %ecx,%r10d
  0x0000000115835821:   cmp    %r13d,%r10d
  0x0000000115835824:   cmovg  %r13d,%r10d
  0x0000000115835828:   movabs $0xff00ff00ff00ff,%rcx
  0x0000000115835832:   cmp    %r11d,%ebx
  0x0000000115835835:   jae    0x0000000115835a82
  0x000000011583583b:   movabs $0xcfcfcfcfcfcfcfd0,%r8
  0x0000000115835845:   add    0x10(%r14,%rbx,8),%r8
  0x000000011583584a:   imul   $0xa01,%r8,%r8
  0x0000000115835851:   shr    $0x8,%r8
  0x0000000115835855:   and    %rcx,%r8
  0x0000000115835858:   imul   $0x640001,%r8,%r8
  0x000000011583585f:   shr    $0x10,%r8
  0x0000000115835863:   and    %r9,%r8
  0x0000000115835866:   imul   %rdi,%r8
  0x000000011583586a:   shr    $0x20,%r8
  0x000000011583586e:   mov    %r8d,%r8d
  0x0000000115835871:   add    %r8d,%ebp
  0x0000000115835874:   inc    %ebx
  0x0000000115835876:   cmp    %r10d,%ebx
  0x0000000115835879:   jl     0x0000000115835832
  0x000000011583587b:   movslq %r11d,%r10
  0x000000011583587e:   movslq %r13d,%r8
  0x0000000115835881:   cmp    %r10,%r8
  0x0000000115835884:   mov    %r13d,%r10d
  0x0000000115835887:   cmovg  %r11d,%r10d
  0x000000011583588b:   mov    %r10d,%eax
  0x000000011583588e:   add    $0xfffffffd,%eax
  0x0000000115835891:   mov    $0x80000000,%r8d
  0x0000000115835897:   cmp    %eax,%r10d
  0x000000011583589a:   cmovl  %r8d,%eax
  0x000000011583589e:   xchg   %ax,%ax
  0x00000001158358a0:   cmp    %eax,%ebx
  0x00000001158358a2:   jge    0x0000000115835a1a
  0x00000001158358a8:   mov    $0xfa0,%esi
  0x00000001158358ad:   jmp    0x00000001158358bd
  0x00000001158358af:   vmovd  %xmm0,%ebp
  0x00000001158358b3:   vmovd  %xmm3,%r13d
  0x00000001158358b8:   vmovd  %xmm2,%r11d
  0x00000001158358bd:   mov    %eax,%edx
  0x00000001158358bf:   sub    %ebx,%edx
  0x00000001158358c1:   xor    %r10d,%r10d
  0x00000001158358c4:   cmp    %ebx,%eax
  0x00000001158358c6:   cmovl  %r10d,%edx
  0x00000001158358ca:   cmp    $0xfa0,%edx
  0x00000001158358d0:   cmova  %esi,%edx
  0x00000001158358d3:   add    %ebx,%edx
  0x00000001158358d5:   vmovd  %ebp,%xmm0
  0x00000001158358d9:   vmovd  %r13d,%xmm3
  0x00000001158358de:   vmovd  %r11d,%xmm2
  0x00000001158358e3:   nopw   0x0(%rax,%rax,1)
  0x00000001158358ec:   data16 data16 xchg %ax,%ax
  0x00000001158358f0:   movabs $0xcfcfcfcfcfcfcfd0,%r10
  0x00000001158358fa:   add    0x10(%r14,%rbx,8),%r10
  0x00000001158358ff:   movslq %ebx,%rbp
  0x0000000115835902:   movabs $0xcfcfcfcfcfcfcfd0,%r11
  0x000000011583590c:   add    0x18(%r14,%rbp,8),%r11
  0x0000000115835911:   movabs $0xcfcfcfcfcfcfcfd0,%r8
  0x000000011583591b:   add    0x28(%r14,%rbp,8),%r8
  0x0000000115835920:   movabs $0xcfcfcfcfcfcfcfd0,%r13
  0x000000011583592a:   add    0x20(%r14,%rbp,8),%r13
  0x000000011583592f:   imul   $0xa01,%r10,%r10
  0x0000000115835936:   imul   $0xa01,%r13,%rbp
  0x000000011583593d:   shr    $0x8,%r10
  0x0000000115835941:   and    %rcx,%r10
  0x0000000115835944:   shr    $0x8,%rbp
  0x0000000115835948:   and    %rcx,%rbp
  0x000000011583594b:   imul   $0x640001,%r10,%r10
  0x0000000115835952:   imul   $0x640001,%rbp,%r13
  0x0000000115835959:   shr    $0x10,%r10
  0x000000011583595d:   and    %r9,%r10
  0x0000000115835960:   imul   %rdi,%r10
  0x0000000115835964:   shr    $0x10,%r13
  0x0000000115835968:   and    %r9,%r13
  0x000000011583596b:   imul   %rdi,%r13
  0x000000011583596f:   shr    $0x20,%r10
  0x0000000115835973:   shr    $0x20,%r13
  0x0000000115835977:   mov    %r10d,%r10d
  0x000000011583597a:   vmovd  %xmm0,%ebp
  0x000000011583597e:   add    %r10d,%ebp
  0x0000000115835981:   vmovd  %ebp,%xmm1
  0x0000000115835985:   mov    %r13d,%r10d
  0x0000000115835988:   imul   $0xa01,%r8,%r8
  0x000000011583598f:   imul   $0xa01,%r11,%r11
  0x0000000115835996:   shr    $0x8,%r8
  0x000000011583599a:   and    %rcx,%r8
  0x000000011583599d:   shr    $0x8,%r11
  0x00000001158359a1:   and    %rcx,%r11
  0x00000001158359a4:   imul   $0x640001,%r8,%r8
  0x00000001158359ab:   imul   $0x640001,%r11,%r11
  0x00000001158359b2:   shr    $0x10,%r8
  0x00000001158359b6:   and    %r9,%r8
  0x00000001158359b9:   imul   %rdi,%r8
  0x00000001158359bd:   shr    $0x10,%r11
  0x00000001158359c1:   and    %r9,%r11
  0x00000001158359c4:   imul   %rdi,%r11
  0x00000001158359c8:   shr    $0x20,%r8
  0x00000001158359cc:   shr    $0x20,%r11
  0x00000001158359d0:   mov    %r8d,%ebp
  0x00000001158359d3:   mov    %r11d,%r13d
  0x00000001158359d6:   vmovd  %xmm1,%r11d
  0x00000001158359db:   add    %r13d,%r11d
  0x00000001158359de:   mov    %r11d,%r8d
  0x00000001158359e1:   add    %r10d,%r8d
  0x00000001158359e4:   mov    %r8d,%r10d
  0x00000001158359e7:   add    %ebp,%r10d
  0x00000001158359ea:   vmovd  %r10d,%xmm0
  0x00000001158359ef:   add    $0x4,%ebx
  0x00000001158359f2:   cmp    %edx,%ebx
  0x00000001158359f4:   jl     0x00000001158358f0
  0x00000001158359fa:   mov    0x348(%r15),%r10             ; ImmutableOopMap {r14=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigitsChainedInLoop@33 (line 102)
  0x0000000115835a01:   test   %eax,(%r10)                  ;   {poll}
  0x0000000115835a04:   cmp    %eax,%ebx
  0x0000000115835a06:   jl     0x00000001158358af
  0x0000000115835a0c:   vmovd  %xmm0,%ebp
  0x0000000115835a10:   vmovd  %xmm3,%r13d
  0x0000000115835a15:   vmovd  %xmm2,%r11d
  0x0000000115835a1a:   nopw   0x0(%rax,%rax,1)
  0x0000000115835a20:   cmp    %r13d,%ebx
  0x0000000115835a23:   jge    0x0000000115835a6d
  0x0000000115835a25:   data16 xchg %ax,%ax
  0x0000000115835a28:   cmp    %r11d,%ebx
  0x0000000115835a2b:   jae    0x0000000115835a82
  0x0000000115835a2d:   movabs $0xcfcfcfcfcfcfcfd0,%r10
  0x0000000115835a37:   add    0x10(%r14,%rbx,8),%r10
  0x0000000115835a3c:   imul   $0xa01,%r10,%r10
  0x0000000115835a43:   shr    $0x8,%r10
  0x0000000115835a47:   and    %rcx,%r10
  0x0000000115835a4a:   imul   $0x640001,%r10,%r10
  0x0000000115835a51:   shr    $0x10,%r10
  0x0000000115835a55:   and    %r9,%r10
  0x0000000115835a58:   imul   %rdi,%r10
  0x0000000115835a5c:   shr    $0x20,%r10
  0x0000000115835a60:   mov    %r10d,%r8d
  0x0000000115835a63:   add    %r8d,%ebp
  0x0000000115835a66:   inc    %ebx
  0x0000000115835a68:   cmp    %r13d,%ebx
  0x0000000115835a6b:   jl     0x0000000115835a28
  0x0000000115835a6d:   mov    %ebp,%eax
  0x0000000115835a6f:   add    $0x30,%rsp
  0x0000000115835a73:   pop    %rbp
  0x0000000115835a74:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x0000000115835a7b:   ja     0x0000000115835ac8
  0x0000000115835a81:   retq   
  0x0000000115835a82:   mov    $0xffffffe4,%esi
  0x0000000115835a87:   mov    %r13d,0x8(%rsp)
  0x0000000115835a8c:   mov    %r14,0x10(%rsp)
  0x0000000115835a91:   mov    %ebx,0x18(%rsp)
  0x0000000115835a95:   xchg   %ax,%ax
  0x0000000115835a97:   callq  0x000000010dd68000           ; ImmutableOopMap {[16]=Oop }
                                                            ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigitsChainedInLoop@19 (line 102)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x0000000115835a9c:   mov    $0xffffff8d,%esi
  0x0000000115835aa1:   mov    %r14,(%rsp)
  0x0000000115835aa5:   mov    %r13d,0x8(%rsp)
  0x0000000115835aaa:   mov    %ebx,0xc(%rsp)
  0x0000000115835aae:   nop
  0x0000000115835aaf:   callq  0x000000010dd68000           ; ImmutableOopMap {[0]=Oop }
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigitsChainedInLoop@10 (line 102)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x0000000115835ab4:   mov    $0xffffffbe,%esi
  0x0000000115835ab9:   mov    %r13d,(%rsp)
  0x0000000115835abd:   mov    %ebx,0x4(%rsp)
  0x0000000115835ac1:   xchg   %ax,%ax
  0x0000000115835ac3:   callq  0x000000010dd68000           ; ImmutableOopMap {}
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigitsChainedInLoop@10 (line 102)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x0000000115835ac8:   movabs $0x115835a74,%r10            ;   {internal_word}
  0x0000000115835ad2:   mov    %r10,0x358(%r15)
  0x0000000115835ad9:   jmpq   0x000000010dd69100           ;   {runtime_call SafepointBlob}
  0x0000000115835ade:   hlt    
  0x0000000115835adf:   hlt    
[Exception Handler]
  0x0000000115835ae0:   jmpq   0x000000010de07880           ;   {no_reloc}
[Deopt Handler Code]
  0x0000000115835ae5:   callq  0x0000000115835aea
  0x0000000115835aea:   subq   $0x5,(%rsp)
  0x0000000115835aef:   jmpq   0x000000010dd683a0           ;   {runtime_call DeoptimizationBlob}
  0x0000000115835af4:   hlt    
  0x0000000115835af5:   hlt    
  0x0000000115835af6:   hlt    
  0x0000000115835af7:   hlt    
--------------------------------------------------------------------------------

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     609  846       4       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigitsChainedInLoop (38 bytes)
 total in heap  [0x000000011584ed90,0x000000011584f280] = 1264
 relocation     [0x000000011584eef0,0x000000011584ef08] = 24
 main code      [0x000000011584ef20,0x000000011584f1a0] = 640
 stub code      [0x000000011584f1a0,0x000000011584f1b8] = 24
 oops           [0x000000011584f1b8,0x000000011584f1c0] = 8
 metadata       [0x000000011584f1c0,0x000000011584f1c8] = 8
 scopes data    [0x000000011584f1c8,0x000000011584f218] = 80
 scopes pcs     [0x000000011584f218,0x000000011584f268] = 80
 dependencies   [0x000000011584f268,0x000000011584f270] = 8
 nul chk table  [0x000000011584f270,0x000000011584f280] = 16

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00000001314a99f8} 'tryToParseEightDigitsChainedInLoop' '([J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  # parm0:    rsi:rsi   = '[J'
  #           [sp+0x30]  (sp of caller)
  0x000000011584ef20:   mov    %eax,-0x14000(%rsp)
  0x000000011584ef27:   push   %rbp
  0x000000011584ef28:   sub    $0x20,%rsp
  0x000000011584ef2c:   mov    0xc(%rsi),%ebx               ; implicit exception: dispatches to 0x000000011584f160
  0x000000011584ef2f:   test   %ebx,%ebx
  0x000000011584ef31:   jbe    0x000000011584f14b
  0x000000011584ef37:   mov    %ebx,%r11d
  0x000000011584ef3a:   dec    %r11d
  0x000000011584ef3d:   data16 xchg %ax,%ax
  0x000000011584ef40:   cmp    %ebx,%r11d
  0x000000011584ef43:   jae    0x000000011584f14f
  0x000000011584ef49:   mov    %ebx,%r8d
  0x000000011584ef4c:   add    $0xfffffffd,%r8d
  0x000000011584ef50:   mov    $0x80000000,%r10d
  0x000000011584ef56:   cmp    %r8d,%r11d
  0x000000011584ef59:   cmovl  %r10d,%r8d
  0x000000011584ef5d:   movabs $0xcfcfcfcfcfcfcfd0,%r10
  0x000000011584ef67:   add    0x10(%rsi),%r10
  0x000000011584ef6b:   imul   $0xa01,%r10,%r11
  0x000000011584ef72:   shr    $0x8,%r11
  0x000000011584ef76:   mov    $0x1,%r9d
  0x000000011584ef7c:   movabs $0xff00ff00ff00ff,%r10
  0x000000011584ef86:   and    %r10,%r11
  0x000000011584ef89:   imul   $0x640001,%r11,%rcx
  0x000000011584ef90:   shr    $0x10,%rcx
  0x000000011584ef94:   movabs $0xffff0000ffff,%r11
  0x000000011584ef9e:   and    %r11,%rcx
  0x000000011584efa1:   movabs $0x271000000001,%rbp
  0x000000011584efab:   imul   %rbp,%rcx
  0x000000011584efaf:   shr    $0x20,%rcx
  0x000000011584efb3:   mov    %ecx,%eax
  0x000000011584efb5:   cmp    $0x1,%r8d
  0x000000011584efb9:   jle    0x000000011584f0f2
  0x000000011584efbf:   mov    $0xfa0,%ecx
  0x000000011584efc4:   jmp    0x000000011584efcd
  0x000000011584efc6:   mov    %r13,%rsi
  0x000000011584efc9:   vmovd  %xmm0,%ebx
  0x000000011584efcd:   mov    %r8d,%edx
  0x000000011584efd0:   sub    %r9d,%edx
  0x000000011584efd3:   xor    %edi,%edi
  0x000000011584efd5:   cmp    %r9d,%r8d
  0x000000011584efd8:   cmovl  %edi,%edx
  0x000000011584efdb:   cmp    $0xfa0,%edx
  0x000000011584efe1:   cmova  %ecx,%edx
  0x000000011584efe4:   add    %r9d,%edx
  0x000000011584efe7:   mov    %rsi,%r13
  0x000000011584efea:   vmovd  %ebx,%xmm0
  0x000000011584efee:   xchg   %ax,%ax
  0x000000011584eff0:   movabs $0xcfcfcfcfcfcfcfd0,%rsi
  0x000000011584effa:   add    0x28(%r13,%r9,8),%rsi
  0x000000011584efff:   movabs $0xcfcfcfcfcfcfcfd0,%rdi
  0x000000011584f009:   add    0x20(%r13,%r9,8),%rdi
  0x000000011584f00e:   movabs $0xcfcfcfcfcfcfcfd0,%r14
  0x000000011584f018:   add    0x18(%r13,%r9,8),%r14
  0x000000011584f01d:   movabs $0xcfcfcfcfcfcfcfd0,%rbx
  0x000000011584f027:   add    0x10(%r13,%r9,8),%rbx
  0x000000011584f02c:   imul   $0xa01,%rsi,%rsi
  0x000000011584f033:   imul   $0xa01,%rbx,%rbx
  0x000000011584f03a:   shr    $0x8,%rsi
  0x000000011584f03e:   and    %r10,%rsi
  0x000000011584f041:   shr    $0x8,%rbx
  0x000000011584f045:   and    %r10,%rbx
  0x000000011584f048:   imul   $0x640001,%rsi,%rsi
  0x000000011584f04f:   imul   $0x640001,%rbx,%rbx
  0x000000011584f056:   shr    $0x10,%rsi
  0x000000011584f05a:   and    %r11,%rsi
  0x000000011584f05d:   imul   %rbp,%rsi
  0x000000011584f061:   shr    $0x10,%rbx
  0x000000011584f065:   and    %r11,%rbx
  0x000000011584f068:   imul   %rbp,%rbx
  0x000000011584f06c:   shr    $0x20,%rsi
  0x000000011584f070:   shr    $0x20,%rbx
  0x000000011584f074:   mov    %esi,%esi
  0x000000011584f076:   mov    %ebx,%ebx
  0x000000011584f078:   add    %ebx,%eax
  0x000000011584f07a:   imul   $0xa01,%r14,%rbx
  0x000000011584f081:   imul   $0xa01,%rdi,%rdi
  0x000000011584f088:   shr    $0x8,%rbx
  0x000000011584f08c:   and    %r10,%rbx
  0x000000011584f08f:   shr    $0x8,%rdi
  0x000000011584f093:   and    %r10,%rdi
  0x000000011584f096:   imul   $0x640001,%rbx,%rbx
  0x000000011584f09d:   imul   $0x640001,%rdi,%rdi
  0x000000011584f0a4:   shr    $0x10,%rbx
  0x000000011584f0a8:   and    %r11,%rbx
  0x000000011584f0ab:   imul   %rbp,%rbx
  0x000000011584f0af:   shr    $0x10,%rdi
  0x000000011584f0b3:   and    %r11,%rdi
  0x000000011584f0b6:   imul   %rbp,%rdi
  0x000000011584f0ba:   shr    $0x20,%rbx
  0x000000011584f0be:   shr    $0x20,%rdi
  0x000000011584f0c2:   mov    %ebx,%ebx
  0x000000011584f0c4:   add    %ebx,%eax
  0x000000011584f0c6:   mov    %edi,%edi
  0x000000011584f0c8:   add    %edi,%eax
  0x000000011584f0ca:   add    %esi,%eax
  0x000000011584f0cc:   add    $0x4,%r9d
  0x000000011584f0d0:   cmp    %edx,%r9d
  0x000000011584f0d3:   jl     0x000000011584eff0
  0x000000011584f0d9:   mov    0x348(%r15),%rbx             ; ImmutableOopMap {r13=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigitsChainedInLoop@33 (line 102)
  0x000000011584f0e0:   test   %eax,(%rbx)                  ;   {poll}
  0x000000011584f0e2:   cmp    %r8d,%r9d
  0x000000011584f0e5:   jl     0x000000011584efc6
  0x000000011584f0eb:   mov    %r13,%rsi
  0x000000011584f0ee:   vmovd  %xmm0,%ebx
  0x000000011584f0f2:   cmp    %ebx,%r9d
  0x000000011584f0f5:   jge    0x000000011584f138
  0x000000011584f0f7:   nop
  0x000000011584f0f8:   movabs $0xcfcfcfcfcfcfcfd0,%r8
  0x000000011584f102:   add    0x10(%rsi,%r9,8),%r8
  0x000000011584f107:   imul   $0xa01,%r8,%r8
  0x000000011584f10e:   shr    $0x8,%r8
  0x000000011584f112:   and    %r10,%r8
  0x000000011584f115:   imul   $0x640001,%r8,%r8
  0x000000011584f11c:   shr    $0x10,%r8
  0x000000011584f120:   and    %r11,%r8
  0x000000011584f123:   imul   %rbp,%r8
  0x000000011584f127:   shr    $0x20,%r8
  0x000000011584f12b:   mov    %r8d,%ecx
  0x000000011584f12e:   add    %ecx,%eax
  0x000000011584f130:   inc    %r9d
  0x000000011584f133:   cmp    %ebx,%r9d
  0x000000011584f136:   jl     0x000000011584f0f8
  0x000000011584f138:   add    $0x20,%rsp
  0x000000011584f13c:   pop    %rbp
  0x000000011584f13d:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x000000011584f144:   ja     0x000000011584f16c
  0x000000011584f14a:   retq   
  0x000000011584f14b:   xor    %eax,%eax
  0x000000011584f14d:   jmp    0x000000011584f138
  0x000000011584f14f:   mov    %rsi,%rbp
  0x000000011584f152:   mov    %ebx,0x4(%rsp)
  0x000000011584f156:   mov    $0xffffff76,%esi
  0x000000011584f15b:   callq  0x000000010dd68000           ; ImmutableOopMap {rbp=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigitsChainedInLoop@13 (line 102)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x000000011584f160:   mov    $0xfffffff6,%esi
  0x000000011584f165:   xchg   %ax,%ax
  0x000000011584f167:   callq  0x000000010dd68000           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigitsChainedInLoop@5 (line 102)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x000000011584f16c:   movabs $0x11584f13d,%r10            ;   {internal_word}
  0x000000011584f176:   mov    %r10,0x358(%r15)
  0x000000011584f17d:   jmpq   0x000000010dd69100           ;   {runtime_call SafepointBlob}
  0x000000011584f182:   hlt    
  0x000000011584f183:   hlt    
  0x000000011584f184:   hlt    
  0x000000011584f185:   hlt    
  0x000000011584f186:   hlt    
  0x000000011584f187:   hlt    
  0x000000011584f188:   hlt    
  0x000000011584f189:   hlt    
  0x000000011584f18a:   hlt    
  0x000000011584f18b:   hlt    
  0x000000011584f18c:   hlt    
  0x000000011584f18d:   hlt    
  0x000000011584f18e:   hlt    
  0x000000011584f18f:   hlt    
  0x000000011584f190:   hlt    
  0x000000011584f191:   hlt    
  0x000000011584f192:   hlt    
  0x000000011584f193:   hlt    
  0x000000011584f194:   hlt    
  0x000000011584f195:   hlt    
  0x000000011584f196:   hlt    
  0x000000011584f197:   hlt    
  0x000000011584f198:   hlt    
  0x000000011584f199:   hlt    
  0x000000011584f19a:   hlt    
  0x000000011584f19b:   hlt    
  0x000000011584f19c:   hlt    
  0x000000011584f19d:   hlt    
  0x000000011584f19e:   hlt    
  0x000000011584f19f:   hlt    
[Exception Handler]
  0x000000011584f1a0:   jmpq   0x000000010de07880           ;   {no_reloc}
[Deopt Handler Code]
  0x000000011584f1a5:   callq  0x000000011584f1aa
  0x000000011584f1aa:   subq   $0x5,(%rsp)
  0x000000011584f1af:   jmpq   0x000000010dd683a0           ;   {runtime_call DeoptimizationBlob}
  0x000000011584f1b4:   hlt    
  0x000000011584f1b5:   hlt    
  0x000000011584f1b6:   hlt    
  0x000000011584f1b7:   hlt    
--------------------------------------------------------------------------------
1364.337 ns/op
Iteration   1: 1321.626 ns/op


Result "ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheck.m11SwarChainedFromLongInLoop":
  1321.626 ns/op


# JMH version: 1.28
# VM version: JDK 17, OpenJDK 64-Bit Server VM, 17+35-2724
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin/java
# VM options: -Dvisualvm.id=19332620218016 -javaagent:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar=50301:/Applications/IntelliJ IDEA CE.app/Contents/bin -Dfile.encoding=UTF-8 -XX:+UnlockExperimentalVMOptions --add-modules jdk.incubator.vector -XX:+UnlockDiagnosticVMOptions -XX:CompileCommand=print,*EightDigitsJmhWithoutCheckAlgos.*
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheck.m12Swar11FromLongInLoop

# Run progress: 66.67% complete, ETA 00:00:41
# Fork: 1 of 1
CompileCommand: print *EightDigitsJmhWithoutCheckAlgos.* bool print = true
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 
============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)     207  837       3       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits11 (54 bytes)
 total in heap  [0x000000011a93f410,0x000000011a93f770] = 864
 relocation     [0x000000011a93f570,0x000000011a93f598] = 40
 main code      [0x000000011a93f5a0,0x000000011a93f6e0] = 320
 stub code      [0x000000011a93f6e0,0x000000011a93f710] = 48
 oops           [0x000000011a93f710,0x000000011a93f718] = 8
 metadata       [0x000000011a93f718,0x000000011a93f720] = 8
 scopes data    [0x000000011a93f720,0x000000011a93f738] = 24
 scopes pcs     [0x000000011a93f738,0x000000011a93f768] = 48
 dependencies   [0x000000011a93f768,0x000000011a93f770] = 8

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x000000010e8a9890} 'tryToParseEightDigits11' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  # parm0:    rsi:rsi   = long
  #           [sp+0x50]  (sp of caller)
  0x000000011a93f5a0:   mov    %eax,-0x14000(%rsp)
  0x000000011a93f5a7:   push   %rbp
  0x000000011a93f5a8:   sub    $0x40,%rsp
  0x000000011a93f5ac:   movabs $0x10e8aa0b0,%rax            ;   {metadata(method data for {method} {0x000000010e8a9890} 'tryToParseEightDigits11' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x000000011a93f5b6:   mov    0xac(%rax),%ecx
  0x000000011a93f5bc:   add    $0x2,%ecx
  0x000000011a93f5bf:   mov    %ecx,0xac(%rax)
  0x000000011a93f5c5:   and    $0x7fe,%ecx
  0x000000011a93f5cb:   cmp    $0x0,%ecx
  0x000000011a93f5ce:   je     0x000000011a93f666
  0x000000011a93f5d4:   movabs $0x3030303030303030,%r10
  0x000000011a93f5de:   sub    %r10,%rsi
  0x000000011a93f5e1:   movabs $0xa,%rax
  0x000000011a93f5eb:   mov    %rax,%rcx
  0x000000011a93f5ee:   mov    %rsi,%rax
  0x000000011a93f5f1:   imul   %rcx,%rax
  0x000000011a93f5f5:   mov    $0x8,%ecx
  0x000000011a93f5fa:   shr    %cl,%rsi
  0x000000011a93f5fd:   mov    %rax,%rdi
  0x000000011a93f600:   add    %rsi,%rdi
  0x000000011a93f603:   movabs $0xff000000ff,%rsi
  0x000000011a93f60d:   mov    %rdi,%rax
  0x000000011a93f610:   and    %rsi,%rax
  0x000000011a93f613:   movabs $0xf424000000064,%rcx
  0x000000011a93f61d:   imul   %rcx,%rax
  0x000000011a93f621:   mov    %rax,%rbx
  0x000000011a93f624:   mov    $0x10,%ecx
  0x000000011a93f629:   shr    %cl,%rdi
  0x000000011a93f62c:   and    %rsi,%rdi
  0x000000011a93f62f:   movabs $0x271000000001,%rax
  0x000000011a93f639:   mov    %rax,%rcx
  0x000000011a93f63c:   mov    %rdi,%rax
  0x000000011a93f63f:   imul   %rcx,%rax
  0x000000011a93f643:   add    %rax,%rbx
  0x000000011a93f646:   mov    $0x20,%ecx
  0x000000011a93f64b:   shr    %cl,%rbx
  0x000000011a93f64e:   mov    %ebx,%ebx
  0x000000011a93f650:   mov    %rbx,%rax
  0x000000011a93f653:   add    $0x40,%rsp
  0x000000011a93f657:   pop    %rbp
  0x000000011a93f658:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x000000011a93f65f:   ja     0x000000011a93f687
  0x000000011a93f665:   retq   
  0x000000011a93f666:   movabs $0x10e8a9890,%r10            ;   {metadata({method} {0x000000010e8a9890} 'tryToParseEightDigits11' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x000000011a93f670:   mov    %r10,0x8(%rsp)
  0x000000011a93f675:   movq   $0xffffffffffffffff,(%rsp)
  0x000000011a93f67d:   callq  0x000000011a35f480           ; ImmutableOopMap {}
                                                            ;*synchronization entry
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits11@-1 (line 55)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000011a93f682:   jmpq   0x000000011a93f5d4
  0x000000011a93f687:   movabs $0x11a93f658,%r10            ;   {internal_word}
  0x000000011a93f691:   mov    %r10,0x358(%r15)
  0x000000011a93f698:   jmpq   0x000000011a2ba100           ;   {runtime_call SafepointBlob}
  0x000000011a93f69d:   nop
  0x000000011a93f69e:   nop
  0x000000011a93f69f:   mov    0x3d0(%r15),%rax
  0x000000011a93f6a6:   movq   $0x0,0x3d0(%r15)
  0x000000011a93f6b1:   movq   $0x0,0x3d8(%r15)
  0x000000011a93f6bc:   add    $0x40,%rsp
  0x000000011a93f6c0:   pop    %rbp
  0x000000011a93f6c1:   jmpq   0x000000011a2cb500           ;   {runtime_call unwind_exception Runtime1 stub}
  0x000000011a93f6c6:   hlt    
  0x000000011a93f6c7:   hlt    
  0x000000011a93f6c8:   hlt    
  0x000000011a93f6c9:   hlt    
  0x000000011a93f6ca:   hlt    
  0x000000011a93f6cb:   hlt    
  0x000000011a93f6cc:   hlt    
  0x000000011a93f6cd:   hlt    
  0x000000011a93f6ce:   hlt    
  0x000000011a93f6cf:   hlt    
  0x000000011a93f6d0:   hlt    
  0x000000011a93f6d1:   hlt    
  0x000000011a93f6d2:   hlt    
  0x000000011a93f6d3:   hlt    
  0x000000011a93f6d4:   hlt    
  0x000000011a93f6d5:   hlt    
  0x000000011a93f6d6:   hlt    
  0x000000011a93f6d7:   hlt    
  0x000000011a93f6d8:   hlt    
  0x000000011a93f6d9:   hlt    
  0x000000011a93f6da:   hlt    
  0x000000011a93f6db:   hlt    
  0x000000011a93f6dc:   hlt    
  0x000000011a93f6dd:   hlt    
  0x000000011a93f6de:   hlt    
  0x000000011a93f6df:   hlt    
[Exception Handler]
  0x000000011a93f6e0:   callq  0x000000011a35be80           ;   {no_reloc}
  0x000000011a93f6e5:   movabs $0x10f8f5e43,%rdi            ;   {external_word}
  0x000000011a93f6ef:   and    $0xfffffffffffffff0,%rsp
  0x000000011a93f6f3:   callq  0x000000010f598c50           ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x000000011a93f6f8:   hlt    
[Deopt Handler Code]
  0x000000011a93f6f9:   movabs $0x11a93f6f9,%r10            ;   {section_word}
  0x000000011a93f703:   push   %r10
  0x000000011a93f705:   jmpq   0x000000011a2b93a0           ;   {runtime_call DeoptimizationBlob}
  0x000000011a93f70a:   hlt    
  0x000000011a93f70b:   hlt    
  0x000000011a93f70c:   hlt    
  0x000000011a93f70d:   hlt    
  0x000000011a93f70e:   hlt    
  0x000000011a93f70f:   hlt    
--------------------------------------------------------------------------------

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     570  839       4       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits11 (54 bytes)
 total in heap  [0x0000000121d86d10,0x0000000121d86f90] = 640
 relocation     [0x0000000121d86e70,0x0000000121d86e80] = 16
 main code      [0x0000000121d86e80,0x0000000121d86f40] = 192
 stub code      [0x0000000121d86f40,0x0000000121d86f58] = 24
 oops           [0x0000000121d86f58,0x0000000121d86f60] = 8
 scopes data    [0x0000000121d86f60,0x0000000121d86f68] = 8
 scopes pcs     [0x0000000121d86f68,0x0000000121d86f88] = 32
 dependencies   [0x0000000121d86f88,0x0000000121d86f90] = 8

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x000000010e8a9890} 'tryToParseEightDigits11' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  # parm0:    rsi:rsi   = long
  #           [sp+0x20]  (sp of caller)
  0x0000000121d86e80:   sub    $0x18,%rsp
  0x0000000121d86e87:   mov    %rbp,0x10(%rsp)
  0x0000000121d86e8c:   mov    %rsi,%r10
  0x0000000121d86e8f:   shl    %r10
  0x0000000121d86e92:   mov    %rsi,%r11
  0x0000000121d86e95:   shl    $0x3,%r11
  0x0000000121d86e99:   add    %r11,%r10
  0x0000000121d86e9c:   movabs $0x271000000001,%r11
  0x0000000121d86ea6:   movabs $0xff000000ff,%r8
  0x0000000121d86eb0:   movabs $0x1e1e1e1e1e1e1e20,%r9
  0x0000000121d86eba:   movabs $0xcfcfcfcfcfcfcfd0,%rcx
  0x0000000121d86ec4:   add    %rcx,%rsi
  0x0000000121d86ec7:   shr    $0x8,%rsi
  0x0000000121d86ecb:   add    %rsi,%r10
  0x0000000121d86ece:   add    %r9,%r10
  0x0000000121d86ed1:   mov    %r10,%r9
  0x0000000121d86ed4:   and    %r8,%r9
  0x0000000121d86ed7:   shr    $0x10,%r10
  0x0000000121d86edb:   and    %r8,%r10
  0x0000000121d86ede:   imul   %r11,%r10
  0x0000000121d86ee2:   movabs $0xf424000000064,%r11
  0x0000000121d86eec:   imul   %r11,%r9
  0x0000000121d86ef0:   add    %r10,%r9
  0x0000000121d86ef3:   shr    $0x20,%r9
  0x0000000121d86ef7:   mov    %r9d,%eax
  0x0000000121d86efa:   add    $0x10,%rsp
  0x0000000121d86efe:   pop    %rbp
  0x0000000121d86eff:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x0000000121d86f06:   ja     0x0000000121d86f0d
  0x0000000121d86f0c:   retq   
  0x0000000121d86f0d:   movabs $0x121d86eff,%r10            ;   {internal_word}
  0x0000000121d86f17:   mov    %r10,0x358(%r15)
  0x0000000121d86f1e:   jmpq   0x000000011a2ba100           ;   {runtime_call SafepointBlob}
  0x0000000121d86f23:   hlt    
  0x0000000121d86f24:   hlt    
  0x0000000121d86f25:   hlt    
  0x0000000121d86f26:   hlt    
  0x0000000121d86f27:   hlt    
  0x0000000121d86f28:   hlt    
  0x0000000121d86f29:   hlt    
  0x0000000121d86f2a:   hlt    
  0x0000000121d86f2b:   hlt    
  0x0000000121d86f2c:   hlt    
  0x0000000121d86f2d:   hlt    
  0x0000000121d86f2e:   hlt    
  0x0000000121d86f2f:   hlt    
  0x0000000121d86f30:   hlt    
  0x0000000121d86f31:   hlt    
  0x0000000121d86f32:   hlt    
  0x0000000121d86f33:   hlt    
  0x0000000121d86f34:   hlt    
  0x0000000121d86f35:   hlt    
  0x0000000121d86f36:   hlt    
  0x0000000121d86f37:   hlt    
  0x0000000121d86f38:   hlt    
  0x0000000121d86f39:   hlt    
  0x0000000121d86f3a:   hlt    
  0x0000000121d86f3b:   hlt    
  0x0000000121d86f3c:   hlt    
  0x0000000121d86f3d:   hlt    
  0x0000000121d86f3e:   hlt    
  0x0000000121d86f3f:   hlt    
[Exception Handler]
  0x0000000121d86f40:   jmpq   0x000000011a358880           ;   {no_reloc}
[Deopt Handler Code]
  0x0000000121d86f45:   callq  0x0000000121d86f4a
  0x0000000121d86f4a:   subq   $0x5,(%rsp)
  0x0000000121d86f4f:   jmpq   0x000000011a2b93a0           ;   {runtime_call DeoptimizationBlob}
  0x0000000121d86f54:   hlt    
  0x0000000121d86f55:   hlt    
  0x0000000121d86f56:   hlt    
  0x0000000121d86f57:   hlt    
--------------------------------------------------------------------------------

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     577  838 %     4       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits11InLoop @ 10 (39 bytes)
 total in heap  [0x0000000121d88810,0x0000000121d88f70] = 1888
 relocation     [0x0000000121d88970,0x0000000121d88990] = 32
 main code      [0x0000000121d889a0,0x0000000121d88e60] = 1216
 stub code      [0x0000000121d88e60,0x0000000121d88e78] = 24
 oops           [0x0000000121d88e78,0x0000000121d88e80] = 8
 metadata       [0x0000000121d88e80,0x0000000121d88e90] = 16
 scopes data    [0x0000000121d88e90,0x0000000121d88ef8] = 104
 scopes pcs     [0x0000000121d88ef8,0x0000000121d88f58] = 96
 dependencies   [0x0000000121d88f58,0x0000000121d88f60] = 8
 nul chk table  [0x0000000121d88f60,0x0000000121d88f70] = 16

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x000000010e8a9c30} 'tryToParseEightDigits11InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  0x0000000121d889a0:   callq  0x000000010f696100           ;   {runtime_call os::breakpoint()}
  0x0000000121d889a5:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x0000000121d889b0:   mov    %eax,-0x14000(%rsp)
  0x0000000121d889b7:   push   %rbp
  0x0000000121d889b8:   sub    $0x30,%rsp
  0x0000000121d889bc:   mov    0x20(%rsi),%r14
  0x0000000121d889c0:   mov    0x28(%rsi),%ebp
  0x0000000121d889c3:   mov    0x18(%rsi),%r13d
  0x0000000121d889c7:   mov    0x10(%rsi),%ebx
  0x0000000121d889ca:   mov    %rsi,%rdi
  0x0000000121d889cd:   movabs $0x10f733200,%r10
  0x0000000121d889d7:   callq  *%r10
  0x0000000121d889da:   nopw   0x0(%rax,%rax,1)
  0x0000000121d889e0:   mov    0x8(%r14),%r11d              ; implicit exception: dispatches to 0x0000000121d88e20
  0x0000000121d889e4:   cmp    $0x1180,%r11d                ;   {metadata({type array long})}
  0x0000000121d889eb:   jne    0x0000000121d88e08
  0x0000000121d889f1:   cmp    %r13d,%ebx
  0x0000000121d889f4:   jge    0x0000000121d88dd5
  0x0000000121d889fa:   mov    0xc(%r14),%r11d
  0x0000000121d889fe:   mov    %ebx,%r8d
  0x0000000121d88a01:   inc    %r8d
  0x0000000121d88a04:   xor    %r10d,%r10d
  0x0000000121d88a07:   test   %r8d,%r8d
  0x0000000121d88a0a:   cmovl  %r10d,%r8d
  0x0000000121d88a0e:   cmp    %r13d,%r8d
  0x0000000121d88a11:   cmovg  %r13d,%r8d
  0x0000000121d88a15:   cmp    %r11d,%ebx
  0x0000000121d88a18:   jae    0x0000000121d88def
  0x0000000121d88a1e:   mov    %r11d,0x4(%rsp)
  0x0000000121d88a23:   mov    %r13d,(%rsp)
  0x0000000121d88a27:   mov    0x10(%r14,%rbx,8),%r10
  0x0000000121d88a2c:   mov    %r10,%r11
  0x0000000121d88a2f:   movabs $0xcfcfcfcfcfcfcfd0,%r9
  0x0000000121d88a39:   add    %r9,%r11
  0x0000000121d88a3c:   mov    %r10,%r9
  0x0000000121d88a3f:   shl    %r9
  0x0000000121d88a42:   shr    $0x8,%r11
  0x0000000121d88a46:   shl    $0x3,%r10
  0x0000000121d88a4a:   add    %r10,%r9
  0x0000000121d88a4d:   add    %r11,%r9
  0x0000000121d88a50:   movabs $0x1e1e1e1e1e1e1e20,%r10
  0x0000000121d88a5a:   add    %r10,%r9
  0x0000000121d88a5d:   mov    %r9,%r10
  0x0000000121d88a60:   movabs $0xff000000ff,%r11
  0x0000000121d88a6a:   and    %r11,%r10
  0x0000000121d88a6d:   movabs $0xf424000000064,%r11
  0x0000000121d88a77:   imul   %r11,%r10
  0x0000000121d88a7b:   shr    $0x10,%r9
  0x0000000121d88a7f:   movabs $0xff000000ff,%r11
  0x0000000121d88a89:   and    %r11,%r9
  0x0000000121d88a8c:   movabs $0x271000000001,%r11
  0x0000000121d88a96:   imul   %r11,%r9
  0x0000000121d88a9a:   add    %r10,%r9
  0x0000000121d88a9d:   shr    $0x20,%r9
  0x0000000121d88aa1:   mov    %r9d,%r11d
  0x0000000121d88aa4:   add    %r11d,%ebp
  0x0000000121d88aa7:   inc    %ebx
  0x0000000121d88aa9:   cmp    %r8d,%ebx
  0x0000000121d88aac:   jge    0x0000000121d88ab8
  0x0000000121d88aae:   mov    0x4(%rsp),%r11d
  0x0000000121d88ab3:   jmpq   0x0000000121d88a15
  0x0000000121d88ab8:   movslq 0x4(%rsp),%r10
  0x0000000121d88abd:   movslq %r13d,%r11
  0x0000000121d88ac0:   cmp    %r10,%r11
  0x0000000121d88ac3:   mov    %r13d,%r10d
  0x0000000121d88ac6:   cmovg  0x4(%rsp),%r10d
  0x0000000121d88acc:   mov    %r10d,%r9d
  0x0000000121d88acf:   add    $0xfffffffd,%r9d
  0x0000000121d88ad3:   mov    $0x80000000,%r11d
  0x0000000121d88ad9:   cmp    %r9d,%r10d
  0x0000000121d88adc:   cmovl  %r11d,%r9d
  0x0000000121d88ae0:   mov    %r9d,0x8(%rsp)
  0x0000000121d88ae5:   cmp    %r9d,%ebx
  0x0000000121d88ae8:   jge    0x0000000121d88d30
  0x0000000121d88aee:   mov    0x8(%rsp),%r10d
  0x0000000121d88af3:   sub    %ebx,%r10d
  0x0000000121d88af6:   mov    0x8(%rsp),%r8d
  0x0000000121d88afb:   xor    %r11d,%r11d
  0x0000000121d88afe:   cmp    %ebx,%r8d
  0x0000000121d88b01:   cmovl  %r11d,%r10d
  0x0000000121d88b05:   cmp    $0xfa0,%r10d
  0x0000000121d88b0c:   mov    $0xfa0,%r11d
  0x0000000121d88b12:   cmova  %r11d,%r10d
  0x0000000121d88b16:   add    %ebx,%r10d
  0x0000000121d88b19:   mov    %r10d,0xc(%rsp)
  0x0000000121d88b1e:   xchg   %ax,%ax
  0x0000000121d88b20:   mov    0x10(%r14,%rbx,8),%rcx
  0x0000000121d88b25:   mov    %rcx,%rdi
  0x0000000121d88b28:   movabs $0xcfcfcfcfcfcfcfd0,%r10
  0x0000000121d88b32:   add    %r10,%rdi
  0x0000000121d88b35:   movslq %ebx,%r10
  0x0000000121d88b38:   mov    0x18(%r14,%r10,8),%rdx
  0x0000000121d88b3d:   mov    0x28(%r14,%r10,8),%r11
  0x0000000121d88b42:   mov    0x20(%r14,%r10,8),%rsi
  0x0000000121d88b47:   mov    %rdx,%rax
  0x0000000121d88b4a:   movabs $0xcfcfcfcfcfcfcfd0,%r10
  0x0000000121d88b54:   add    %r10,%rax
  0x0000000121d88b57:   mov    %rsi,%r8
  0x0000000121d88b5a:   add    %r10,%r8
  0x0000000121d88b5d:   mov    %r11,%r9
  0x0000000121d88b60:   add    %r10,%r9
  0x0000000121d88b63:   shr    $0x8,%rdi
  0x0000000121d88b67:   shr    $0x8,%r9
  0x0000000121d88b6b:   mov    %rsi,%r10
  0x0000000121d88b6e:   shl    $0x3,%r10
  0x0000000121d88b72:   shl    %rsi
  0x0000000121d88b75:   add    %r10,%rsi
  0x0000000121d88b78:   mov    %r11,%r10
  0x0000000121d88b7b:   shl    $0x3,%r10
  0x0000000121d88b7f:   shl    %r11
  0x0000000121d88b82:   add    %r10,%r11
  0x0000000121d88b85:   add    %r9,%r11
  0x0000000121d88b88:   movabs $0x1e1e1e1e1e1e1e20,%r10
  0x0000000121d88b92:   add    %r10,%r11
  0x0000000121d88b95:   mov    %r11,%r9
  0x0000000121d88b98:   movabs $0xff000000ff,%r10
  0x0000000121d88ba2:   and    %r10,%r9
  0x0000000121d88ba5:   movabs $0xf424000000064,%r10
  0x0000000121d88baf:   imul   %r10,%r9
  0x0000000121d88bb3:   mov    %rdx,%r13
  0x0000000121d88bb6:   shl    $0x3,%r13
  0x0000000121d88bba:   shr    $0x10,%r11
  0x0000000121d88bbe:   movabs $0xff000000ff,%r10
  0x0000000121d88bc8:   and    %r10,%r11
  0x0000000121d88bcb:   movabs $0x271000000001,%r10
  0x0000000121d88bd5:   imul   %r10,%r11
  0x0000000121d88bd9:   add    %r9,%r11
  0x0000000121d88bdc:   shl    %rdx
  0x0000000121d88bdf:   add    %r13,%rdx
  0x0000000121d88be2:   shr    $0x20,%r11
  0x0000000121d88be6:   shr    $0x8,%r8
  0x0000000121d88bea:   add    %r8,%rsi
  0x0000000121d88bed:   movabs $0x1e1e1e1e1e1e1e20,%r10
  0x0000000121d88bf7:   add    %r10,%rsi
  0x0000000121d88bfa:   mov    %rsi,%r8
  0x0000000121d88bfd:   movabs $0xff000000ff,%r10
  0x0000000121d88c07:   and    %r10,%r8
  0x0000000121d88c0a:   movabs $0xf424000000064,%r10
  0x0000000121d88c14:   imul   %r10,%r8
  0x0000000121d88c18:   mov    %r11d,%r10d
  0x0000000121d88c1b:   shr    $0x10,%rsi
  0x0000000121d88c1f:   movabs $0xff000000ff,%r11
  0x0000000121d88c29:   and    %r11,%rsi
  0x0000000121d88c2c:   movabs $0x271000000001,%r11
  0x0000000121d88c36:   imul   %r11,%rsi
  0x0000000121d88c3a:   add    %r8,%rsi
  0x0000000121d88c3d:   shr    $0x8,%rax
  0x0000000121d88c41:   add    %rax,%rdx
  0x0000000121d88c44:   movabs $0x1e1e1e1e1e1e1e20,%r11
  0x0000000121d88c4e:   add    %r11,%rdx
  0x0000000121d88c51:   mov    %rdx,%r8
  0x0000000121d88c54:   movabs $0xff000000ff,%r11
  0x0000000121d88c5e:   and    %r11,%r8
  0x0000000121d88c61:   movabs $0xf424000000064,%r11
  0x0000000121d88c6b:   imul   %r11,%r8
  0x0000000121d88c6f:   shr    $0x20,%rsi
  0x0000000121d88c73:   shr    $0x10,%rdx
  0x0000000121d88c77:   movabs $0xff000000ff,%r11
  0x0000000121d88c81:   and    %r11,%rdx
  0x0000000121d88c84:   movabs $0x271000000001,%r11
  0x0000000121d88c8e:   imul   %r11,%rdx
  0x0000000121d88c92:   add    %r8,%rdx
  0x0000000121d88c95:   mov    %esi,%r11d
  0x0000000121d88c98:   shr    $0x20,%rdx
  0x0000000121d88c9c:   mov    %rcx,%r9
  0x0000000121d88c9f:   shl    $0x3,%r9
  0x0000000121d88ca3:   mov    %edx,%r8d
  0x0000000121d88ca6:   shl    %rcx
  0x0000000121d88ca9:   add    %r9,%rcx
  0x0000000121d88cac:   add    %rdi,%rcx
  0x0000000121d88caf:   movabs $0x1e1e1e1e1e1e1e20,%r9
  0x0000000121d88cb9:   add    %r9,%rcx
  0x0000000121d88cbc:   mov    %rcx,%rdi
  0x0000000121d88cbf:   movabs $0xff000000ff,%r9
  0x0000000121d88cc9:   and    %r9,%rdi
  0x0000000121d88ccc:   movabs $0xf424000000064,%r9
  0x0000000121d88cd6:   imul   %r9,%rdi
  0x0000000121d88cda:   shr    $0x10,%rcx
  0x0000000121d88cde:   movabs $0xff000000ff,%r9
  0x0000000121d88ce8:   and    %r9,%rcx
  0x0000000121d88ceb:   movabs $0x271000000001,%r9
  0x0000000121d88cf5:   imul   %r9,%rcx
  0x0000000121d88cf9:   add    %rdi,%rcx
  0x0000000121d88cfc:   shr    $0x20,%rcx
  0x0000000121d88d00:   mov    %ecx,%r9d
  0x0000000121d88d03:   add    %r9d,%ebp
  0x0000000121d88d06:   add    %r8d,%ebp
  0x0000000121d88d09:   add    %r11d,%ebp
  0x0000000121d88d0c:   add    %r10d,%ebp
  0x0000000121d88d0f:   add    $0x4,%ebx
  0x0000000121d88d12:   cmp    0xc(%rsp),%ebx
  0x0000000121d88d16:   jl     0x0000000121d88b20
  0x0000000121d88d1c:   mov    0x348(%r15),%r10             ; ImmutableOopMap {r14=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits11InLoop@33 (line 111)
  0x0000000121d88d23:   test   %eax,(%r10)                  ;   {poll}
  0x0000000121d88d26:   cmp    0x8(%rsp),%ebx
  0x0000000121d88d2a:   jl     0x0000000121d88aee
  0x0000000121d88d30:   cmp    (%rsp),%ebx
  0x0000000121d88d33:   jge    0x0000000121d88dd5
  0x0000000121d88d39:   data16 xchg %ax,%ax
  0x0000000121d88d3c:   nopl   0x0(%rax)
  0x0000000121d88d40:   cmp    0x4(%rsp),%ebx
  0x0000000121d88d44:   jae    0x0000000121d88deb
  0x0000000121d88d4a:   mov    0x10(%r14,%rbx,8),%r10
  0x0000000121d88d4f:   mov    %r10,%r11
  0x0000000121d88d52:   movabs $0xcfcfcfcfcfcfcfd0,%r8
  0x0000000121d88d5c:   add    %r8,%r11
  0x0000000121d88d5f:   mov    %r10,%r8
  0x0000000121d88d62:   shl    %r8
  0x0000000121d88d65:   shr    $0x8,%r11
  0x0000000121d88d69:   shl    $0x3,%r10
  0x0000000121d88d6d:   add    %r10,%r8
  0x0000000121d88d70:   add    %r11,%r8
  0x0000000121d88d73:   movabs $0x1e1e1e1e1e1e1e20,%r10
  0x0000000121d88d7d:   add    %r10,%r8
  0x0000000121d88d80:   mov    %r8,%r10
  0x0000000121d88d83:   movabs $0xff000000ff,%r11
  0x0000000121d88d8d:   and    %r11,%r10
  0x0000000121d88d90:   movabs $0xf424000000064,%r11
  0x0000000121d88d9a:   imul   %r11,%r10
  0x0000000121d88d9e:   shr    $0x10,%r8
  0x0000000121d88da2:   movabs $0xff000000ff,%r11
  0x0000000121d88dac:   and    %r11,%r8
  0x0000000121d88daf:   movabs $0x271000000001,%r11
  0x0000000121d88db9:   imul   %r11,%r8
  0x0000000121d88dbd:   add    %r10,%r8
  0x0000000121d88dc0:   shr    $0x20,%r8
  0x0000000121d88dc4:   mov    %r8d,%r11d
  0x0000000121d88dc7:   add    %r11d,%ebp
  0x0000000121d88dca:   inc    %ebx
  0x0000000121d88dcc:   cmp    (%rsp),%ebx
  0x0000000121d88dcf:   jl     0x0000000121d88d3c
  0x0000000121d88dd5:   movslq %ebp,%rax
  0x0000000121d88dd8:   add    $0x30,%rsp
  0x0000000121d88ddc:   pop    %rbp
  0x0000000121d88ddd:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x0000000121d88de4:   ja     0x0000000121d88e34
  0x0000000121d88dea:   retq   
  0x0000000121d88deb:   mov    (%rsp),%r13d
  0x0000000121d88def:   mov    $0xffffffe4,%esi
  0x0000000121d88df4:   mov    %r13d,0x8(%rsp)
  0x0000000121d88df9:   mov    %r14,0x10(%rsp)
  0x0000000121d88dfe:   mov    %ebx,0x18(%rsp)
  0x0000000121d88e02:   nop
  0x0000000121d88e03:   callq  0x000000011a2b9000           ; ImmutableOopMap {[16]=Oop }
                                                            ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits11InLoop@19 (line 111)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x0000000121d88e08:   mov    $0xffffff8d,%esi
  0x0000000121d88e0d:   mov    %r14,(%rsp)
  0x0000000121d88e11:   mov    %r13d,0x8(%rsp)
  0x0000000121d88e16:   mov    %ebx,0xc(%rsp)
  0x0000000121d88e1a:   nop
  0x0000000121d88e1b:   callq  0x000000011a2b9000           ; ImmutableOopMap {[0]=Oop }
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits11InLoop@10 (line 111)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x0000000121d88e20:   mov    $0xffffffbe,%esi
  0x0000000121d88e25:   mov    %r13d,(%rsp)
  0x0000000121d88e29:   mov    %ebx,0x4(%rsp)
  0x0000000121d88e2d:   xchg   %ax,%ax
  0x0000000121d88e2f:   callq  0x000000011a2b9000           ; ImmutableOopMap {}
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits11InLoop@10 (line 111)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x0000000121d88e34:   movabs $0x121d88ddd,%r10            ;   {internal_word}
  0x0000000121d88e3e:   mov    %r10,0x358(%r15)
  0x0000000121d88e45:   jmpq   0x000000011a2ba100           ;   {runtime_call SafepointBlob}
  0x0000000121d88e4a:   hlt    
  0x0000000121d88e4b:   hlt    
  0x0000000121d88e4c:   hlt    
  0x0000000121d88e4d:   hlt    
  0x0000000121d88e4e:   hlt    
  0x0000000121d88e4f:   hlt    
  0x0000000121d88e50:   hlt    
  0x0000000121d88e51:   hlt    
  0x0000000121d88e52:   hlt    
  0x0000000121d88e53:   hlt    
  0x0000000121d88e54:   hlt    
  0x0000000121d88e55:   hlt    
  0x0000000121d88e56:   hlt    
  0x0000000121d88e57:   hlt    
  0x0000000121d88e58:   hlt    
  0x0000000121d88e59:   hlt    
  0x0000000121d88e5a:   hlt    
  0x0000000121d88e5b:   hlt    
  0x0000000121d88e5c:   hlt    
  0x0000000121d88e5d:   hlt    
  0x0000000121d88e5e:   hlt    
  0x0000000121d88e5f:   hlt    
[Exception Handler]
  0x0000000121d88e60:   jmpq   0x000000011a358880           ;   {no_reloc}
[Deopt Handler Code]
  0x0000000121d88e65:   callq  0x0000000121d88e6a
  0x0000000121d88e6a:   subq   $0x5,(%rsp)
  0x0000000121d88e6f:   jmpq   0x000000011a2b93a0           ;   {runtime_call DeoptimizationBlob}
  0x0000000121d88e74:   hlt    
  0x0000000121d88e75:   hlt    
  0x0000000121d88e76:   hlt    
  0x0000000121d88e77:   hlt    
--------------------------------------------------------------------------------

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     651  848       4       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits11InLoop (39 bytes)
 total in heap  [0x0000000121da0090,0x0000000121da06c0] = 1584
 relocation     [0x0000000121da01f0,0x0000000121da0208] = 24
 main code      [0x0000000121da0220,0x0000000121da05e0] = 960
 stub code      [0x0000000121da05e0,0x0000000121da05f8] = 24
 oops           [0x0000000121da05f8,0x0000000121da0600] = 8
 metadata       [0x0000000121da0600,0x0000000121da0608] = 8
 scopes data    [0x0000000121da0608,0x0000000121da0658] = 80
 scopes pcs     [0x0000000121da0658,0x0000000121da06a8] = 80
 dependencies   [0x0000000121da06a8,0x0000000121da06b0] = 8
 nul chk table  [0x0000000121da06b0,0x0000000121da06c0] = 16

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x000000010e8a9c30} 'tryToParseEightDigits11InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  # parm0:    rsi:rsi   = '[J'
  #           [sp+0x30]  (sp of caller)
  0x0000000121da0220:   mov    %eax,-0x14000(%rsp)
  0x0000000121da0227:   push   %rbp
  0x0000000121da0228:   sub    $0x20,%rsp
  0x0000000121da022c:   mov    0xc(%rsi),%r9d               ; implicit exception: dispatches to 0x0000000121da05a0
  0x0000000121da0230:   test   %r9d,%r9d
  0x0000000121da0233:   jbe    0x0000000121da0586
  0x0000000121da0239:   mov    %r9d,%ebx
  0x0000000121da023c:   dec    %ebx
  0x0000000121da023e:   xchg   %ax,%ax
  0x0000000121da0240:   cmp    %r9d,%ebx
  0x0000000121da0243:   jae    0x0000000121da058b
  0x0000000121da0249:   mov    0x10(%rsi),%r11
  0x0000000121da024d:   mov    %r9d,%r8d
  0x0000000121da0250:   add    $0xfffffffd,%r8d
  0x0000000121da0254:   mov    %r11,%r10
  0x0000000121da0257:   shl    $0x3,%r10
  0x0000000121da025b:   mov    %r11,%rdi
  0x0000000121da025e:   shl    %rdi
  0x0000000121da0261:   add    %r10,%rdi
  0x0000000121da0264:   mov    $0x80000000,%ecx
  0x0000000121da0269:   cmp    %r8d,%ebx
  0x0000000121da026c:   cmovl  %ecx,%r8d
  0x0000000121da0270:   movabs $0xcfcfcfcfcfcfcfd0,%r10
  0x0000000121da027a:   add    %r10,%r11
  0x0000000121da027d:   shr    $0x8,%r11
  0x0000000121da0281:   add    %r11,%rdi
  0x0000000121da0284:   mov    $0x1,%r10d
  0x0000000121da028a:   movabs $0x1e1e1e1e1e1e1e20,%r11
  0x0000000121da0294:   add    %r11,%rdi
  0x0000000121da0297:   mov    %rdi,%r11
  0x0000000121da029a:   shr    $0x10,%r11
  0x0000000121da029e:   movabs $0xff000000ff,%rdx
  0x0000000121da02a8:   and    %rdx,%rdi
  0x0000000121da02ab:   and    %rdx,%r11
  0x0000000121da02ae:   movabs $0x271000000001,%rcx
  0x0000000121da02b8:   imul   %rcx,%r11
  0x0000000121da02bc:   movabs $0xf424000000064,%rcx
  0x0000000121da02c6:   imul   %rcx,%rdi
  0x0000000121da02ca:   add    %rdi,%r11
  0x0000000121da02cd:   shr    $0x20,%r11
  0x0000000121da02d1:   mov    %r11d,%r11d
  0x0000000121da02d4:   cmp    $0x1,%r8d
  0x0000000121da02d8:   jle    0x0000000121da04f2
  0x0000000121da02de:   xchg   %ax,%ax
  0x0000000121da02e0:   jmpq   0x0000000121da04b7
  0x0000000121da02e5:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x0000000121da02f0:   vmovq  %xmm0,%rsi
  0x0000000121da02f5:   vmovq  %rsi,%xmm0
  0x0000000121da02fa:   mov    0x28(%rsi,%r10,8),%rbx
  0x0000000121da02ff:   mov    0x20(%rsi,%r10,8),%rsi
  0x0000000121da0304:   vmovq  %xmm0,%r8
  0x0000000121da0309:   mov    0x18(%r8,%r10,8),%r8
  0x0000000121da030e:   vmovq  %xmm0,%r9
  0x0000000121da0313:   mov    0x10(%r9,%r10,8),%rax
  0x0000000121da0318:   mov    %rbx,%rdi
  0x0000000121da031b:   movabs $0xcfcfcfcfcfcfcfd0,%r9
  0x0000000121da0325:   add    %r9,%rdi
  0x0000000121da0328:   mov    %rax,%rbp
  0x0000000121da032b:   add    %r9,%rbp
  0x0000000121da032e:   mov    %rsi,%r13
  0x0000000121da0331:   add    %r9,%r13
  0x0000000121da0334:   mov    %r8,%rcx
  0x0000000121da0337:   add    %r9,%rcx
  0x0000000121da033a:   shr    $0x8,%rdi
  0x0000000121da033e:   shr    $0x8,%rcx
  0x0000000121da0342:   mov    %rax,%r9
  0x0000000121da0345:   shl    $0x3,%r9
  0x0000000121da0349:   shl    %rax
  0x0000000121da034c:   add    %r9,%rax
  0x0000000121da034f:   mov    %r8,%r9
  0x0000000121da0352:   shl    $0x3,%r9
  0x0000000121da0356:   shl    %r8
  0x0000000121da0359:   add    %r9,%r8
  0x0000000121da035c:   add    %rcx,%r8
  0x0000000121da035f:   movabs $0x1e1e1e1e1e1e1e20,%r9
  0x0000000121da0369:   add    %r9,%r8
  0x0000000121da036c:   mov    %r8,%r9
  0x0000000121da036f:   and    %rdx,%r9
  0x0000000121da0372:   movabs $0xf424000000064,%rcx
  0x0000000121da037c:   imul   %rcx,%r9
  0x0000000121da0380:   mov    %rsi,%rcx
  0x0000000121da0383:   shl    $0x3,%rcx
  0x0000000121da0387:   shr    $0x10,%r8
  0x0000000121da038b:   and    %rdx,%r8
  0x0000000121da038e:   movabs $0x271000000001,%r14
  0x0000000121da0398:   imul   %r14,%r8
  0x0000000121da039c:   add    %r9,%r8
  0x0000000121da039f:   shl    %rsi
  0x0000000121da03a2:   add    %rcx,%rsi
  0x0000000121da03a5:   shr    $0x20,%r8
  0x0000000121da03a9:   mov    %rbx,%rcx
  0x0000000121da03ac:   shl    $0x3,%rcx
  0x0000000121da03b0:   mov    %r8d,%r9d
  0x0000000121da03b3:   shl    %rbx
  0x0000000121da03b6:   add    %rcx,%rbx
  0x0000000121da03b9:   add    %rdi,%rbx
  0x0000000121da03bc:   movabs $0x1e1e1e1e1e1e1e20,%r8
  0x0000000121da03c6:   add    %r8,%rbx
  0x0000000121da03c9:   mov    %rbx,%rcx
  0x0000000121da03cc:   and    %rdx,%rcx
  0x0000000121da03cf:   movabs $0xf424000000064,%r8
  0x0000000121da03d9:   imul   %r8,%rcx
  0x0000000121da03dd:   shr    $0x8,%r13
  0x0000000121da03e1:   add    %r13,%rsi
  0x0000000121da03e4:   movabs $0x1e1e1e1e1e1e1e20,%r8
  0x0000000121da03ee:   add    %r8,%rsi
  0x0000000121da03f1:   mov    %rsi,%rdi
  0x0000000121da03f4:   and    %rdx,%rdi
  0x0000000121da03f7:   movabs $0xf424000000064,%r8
  0x0000000121da0401:   imul   %r8,%rdi
  0x0000000121da0405:   shr    $0x10,%rbx
  0x0000000121da0409:   and    %rdx,%rbx
  0x0000000121da040c:   movabs $0x271000000001,%r8
  0x0000000121da0416:   imul   %r8,%rbx
  0x0000000121da041a:   add    %rcx,%rbx
  0x0000000121da041d:   shr    $0x10,%rsi
  0x0000000121da0421:   and    %rdx,%rsi
  0x0000000121da0424:   imul   %r8,%rsi
  0x0000000121da0428:   add    %rdi,%rsi
  0x0000000121da042b:   shr    $0x20,%rbx
  0x0000000121da042f:   shr    $0x20,%rsi
  0x0000000121da0433:   mov    %ebx,%r8d
  0x0000000121da0436:   mov    %esi,%ebx
  0x0000000121da0438:   shr    $0x8,%rbp
  0x0000000121da043c:   add    %rbp,%rax
  0x0000000121da043f:   movabs $0x1e1e1e1e1e1e1e20,%rcx
  0x0000000121da0449:   add    %rcx,%rax
  0x0000000121da044c:   mov    %rax,%rdi
  0x0000000121da044f:   and    %rdx,%rdi
  0x0000000121da0452:   movabs $0xf424000000064,%rcx
  0x0000000121da045c:   imul   %rcx,%rdi
  0x0000000121da0460:   shr    $0x10,%rax
  0x0000000121da0464:   and    %rdx,%rax
  0x0000000121da0467:   movabs $0x271000000001,%rcx
  0x0000000121da0471:   imul   %rcx,%rax
  0x0000000121da0475:   add    %rdi,%rax
  0x0000000121da0478:   shr    $0x20,%rax
  0x0000000121da047c:   mov    %eax,%ecx
  0x0000000121da047e:   add    %ecx,%r11d
  0x0000000121da0481:   add    %r9d,%r11d
  0x0000000121da0484:   add    %ebx,%r11d
  0x0000000121da0487:   add    %r8d,%r11d
  0x0000000121da048a:   add    $0x4,%r10d
  0x0000000121da048e:   cmp    0x4(%rsp),%r10d
  0x0000000121da0493:   jl     0x0000000121da02f0
  0x0000000121da0499:   mov    0x348(%r15),%r8              ; ImmutableOopMap {xmm0=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits11InLoop@33 (line 111)
  0x0000000121da04a0:   test   %eax,(%r8)                   ;   {poll}
  0x0000000121da04a3:   cmp    (%rsp),%r10d
  0x0000000121da04a7:   jge    0x0000000121da04e8
  0x0000000121da04a9:   vmovq  %xmm0,%rsi
  0x0000000121da04ae:   vmovd  %xmm1,%r9d
  0x0000000121da04b3:   mov    (%rsp),%r8d
  0x0000000121da04b7:   mov    %r8d,%edi
  0x0000000121da04ba:   sub    %r10d,%edi
  0x0000000121da04bd:   xor    %ebx,%ebx
  0x0000000121da04bf:   cmp    %r10d,%r8d
  0x0000000121da04c2:   cmovl  %ebx,%edi
  0x0000000121da04c5:   cmp    $0xfa0,%edi
  0x0000000121da04cb:   mov    $0xfa0,%ecx
  0x0000000121da04d0:   cmova  %ecx,%edi
  0x0000000121da04d3:   add    %r10d,%edi
  0x0000000121da04d6:   vmovd  %r9d,%xmm1
  0x0000000121da04db:   mov    %r8d,(%rsp)
  0x0000000121da04df:   mov    %edi,0x4(%rsp)
  0x0000000121da04e3:   jmpq   0x0000000121da02f5
  0x0000000121da04e8:   vmovq  %xmm0,%rsi
  0x0000000121da04ed:   vmovd  %xmm1,%r9d
  0x0000000121da04f2:   cmp    %r9d,%r10d
  0x0000000121da04f5:   jge    0x0000000121da0570
  0x0000000121da04fb:   nop
  0x0000000121da04fc:   mov    0x10(%rsi,%r10,8),%r8
  0x0000000121da0501:   mov    %r8,%rcx
  0x0000000121da0504:   movabs $0xcfcfcfcfcfcfcfd0,%rbx
  0x0000000121da050e:   add    %rbx,%rcx
  0x0000000121da0511:   mov    %r8,%rbx
  0x0000000121da0514:   shl    %rbx
  0x0000000121da0517:   shr    $0x8,%rcx
  0x0000000121da051b:   shl    $0x3,%r8
  0x0000000121da051f:   add    %r8,%rbx
  0x0000000121da0522:   add    %rcx,%rbx
  0x0000000121da0525:   movabs $0x1e1e1e1e1e1e1e20,%r8
  0x0000000121da052f:   add    %r8,%rbx
  0x0000000121da0532:   mov    %rbx,%r8
  0x0000000121da0535:   and    %rdx,%r8
  0x0000000121da0538:   movabs $0xf424000000064,%rcx
  0x0000000121da0542:   imul   %rcx,%r8
  0x0000000121da0546:   shr    $0x10,%rbx
  0x0000000121da054a:   and    %rdx,%rbx
  0x0000000121da054d:   movabs $0x271000000001,%rcx
  0x0000000121da0557:   imul   %rcx,%rbx
  0x0000000121da055b:   add    %r8,%rbx
  0x0000000121da055e:   shr    $0x20,%rbx
  0x0000000121da0562:   mov    %ebx,%r8d
  0x0000000121da0565:   add    %r8d,%r11d
  0x0000000121da0568:   inc    %r10d
  0x0000000121da056b:   cmp    %r9d,%r10d
  0x0000000121da056e:   jl     0x0000000121da04fc
  0x0000000121da0570:   movslq %r11d,%rax
  0x0000000121da0573:   add    $0x20,%rsp
  0x0000000121da0577:   pop    %rbp
  0x0000000121da0578:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x0000000121da057f:   ja     0x0000000121da05ac
  0x0000000121da0585:   retq   
  0x0000000121da0586:   xor    %r11d,%r11d
  0x0000000121da0589:   jmp    0x0000000121da0570
  0x0000000121da058b:   mov    %rsi,%rbp
  0x0000000121da058e:   mov    %r9d,0x4(%rsp)
  0x0000000121da0593:   mov    $0xffffff76,%esi
  0x0000000121da0598:   data16 xchg %ax,%ax
  0x0000000121da059b:   callq  0x000000011a2b9000           ; ImmutableOopMap {rbp=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits11InLoop@13 (line 111)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x0000000121da05a0:   mov    $0xfffffff6,%esi
  0x0000000121da05a5:   xchg   %ax,%ax
  0x0000000121da05a7:   callq  0x000000011a2b9000           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits11InLoop@5 (line 111)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x0000000121da05ac:   movabs $0x121da0578,%r10            ;   {internal_word}
  0x0000000121da05b6:   mov    %r10,0x358(%r15)
  0x0000000121da05bd:   jmpq   0x000000011a2ba100           ;   {runtime_call SafepointBlob}
  0x0000000121da05c2:   hlt    
  0x0000000121da05c3:   hlt    
  0x0000000121da05c4:   hlt    
  0x0000000121da05c5:   hlt    
  0x0000000121da05c6:   hlt    
  0x0000000121da05c7:   hlt    
  0x0000000121da05c8:   hlt    
  0x0000000121da05c9:   hlt    
  0x0000000121da05ca:   hlt    
  0x0000000121da05cb:   hlt    
  0x0000000121da05cc:   hlt    
  0x0000000121da05cd:   hlt    
  0x0000000121da05ce:   hlt    
  0x0000000121da05cf:   hlt    
  0x0000000121da05d0:   hlt    
  0x0000000121da05d1:   hlt    
  0x0000000121da05d2:   hlt    
  0x0000000121da05d3:   hlt    
  0x0000000121da05d4:   hlt    
  0x0000000121da05d5:   hlt    
  0x0000000121da05d6:   hlt    
  0x0000000121da05d7:   hlt    
  0x0000000121da05d8:   hlt    
  0x0000000121da05d9:   hlt    
  0x0000000121da05da:   hlt    
  0x0000000121da05db:   hlt    
  0x0000000121da05dc:   hlt    
  0x0000000121da05dd:   hlt    
  0x0000000121da05de:   hlt    
  0x0000000121da05df:   hlt    
[Exception Handler]
  0x0000000121da05e0:   jmpq   0x000000011a358880           ;   {no_reloc}
[Deopt Handler Code]
  0x0000000121da05e5:   callq  0x0000000121da05ea
  0x0000000121da05ea:   subq   $0x5,(%rsp)
  0x0000000121da05ef:   jmpq   0x000000011a2b93a0           ;   {runtime_call DeoptimizationBlob}
  0x0000000121da05f4:   hlt    
  0x0000000121da05f5:   hlt    
  0x0000000121da05f6:   hlt    
  0x0000000121da05f7:   hlt    
--------------------------------------------------------------------------------
1859.829 ns/op
Iteration   1: 1792.160 ns/op


Result "ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheck.m12Swar11FromLongInLoop":
  1792.160 ns/op


# JMH version: 1.28
# VM version: JDK 17, OpenJDK 64-Bit Server VM, 17+35-2724
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin/java
# VM options: -Dvisualvm.id=19332620218016 -javaagent:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar=50301:/Applications/IntelliJ IDEA CE.app/Contents/bin -Dfile.encoding=UTF-8 -XX:+UnlockExperimentalVMOptions --add-modules jdk.incubator.vector -XX:+UnlockDiagnosticVMOptions -XX:CompileCommand=print,*EightDigitsJmhWithoutCheckAlgos.*
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheck.m13Swar10FromLongInLoop

# Run progress: 83.33% complete, ETA 00:00:20
# Fork: 1 of 1
CompileCommand: print *EightDigitsJmhWithoutCheckAlgos.* bool print = true
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 
============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)     209  829       3       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10 (51 bytes)
 total in heap  [0x0000000116363990,0x0000000116363cf0] = 864
 relocation     [0x0000000116363af0,0x0000000116363b18] = 40
 main code      [0x0000000116363b20,0x0000000116363c60] = 320
 stub code      [0x0000000116363c60,0x0000000116363c90] = 48
 oops           [0x0000000116363c90,0x0000000116363c98] = 8
 metadata       [0x0000000116363c98,0x0000000116363ca0] = 8
 scopes data    [0x0000000116363ca0,0x0000000116363cb8] = 24
 scopes pcs     [0x0000000116363cb8,0x0000000116363ce8] = 48
 dependencies   [0x0000000116363ce8,0x0000000116363cf0] = 8

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000108ca96d8} 'tryToParseEightDigits10' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  # parm0:    rsi:rsi   = long
  #           [sp+0x50]  (sp of caller)
  0x0000000116363b20:   mov    %eax,-0x14000(%rsp)
  0x0000000116363b27:   push   %rbp
  0x0000000116363b28:   sub    $0x40,%rsp
  0x0000000116363b2c:   movabs $0x108caa0b0,%rax            ;   {metadata(method data for {method} {0x0000000108ca96d8} 'tryToParseEightDigits10' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x0000000116363b36:   mov    0xac(%rax),%ecx
  0x0000000116363b3c:   add    $0x2,%ecx
  0x0000000116363b3f:   mov    %ecx,0xac(%rax)
  0x0000000116363b45:   and    $0x7fe,%ecx
  0x0000000116363b4b:   cmp    $0x0,%ecx
  0x0000000116363b4e:   je     0x0000000116363be3
  0x0000000116363b54:   movabs $0x3030303030303030,%r10
  0x0000000116363b5e:   sub    %r10,%rsi
  0x0000000116363b61:   movabs $0xa01,%rax
  0x0000000116363b6b:   mov    %rax,%rcx
  0x0000000116363b6e:   mov    %rsi,%rax
  0x0000000116363b71:   imul   %rcx,%rax
  0x0000000116363b75:   mov    $0x8,%ecx
  0x0000000116363b7a:   mov    %rax,%rsi
  0x0000000116363b7d:   sar    %cl,%rsi
  0x0000000116363b80:   movabs $0xff000000ff,%rdi
  0x0000000116363b8a:   mov    %rsi,%rax
  0x0000000116363b8d:   and    %rdi,%rax
  0x0000000116363b90:   movabs $0xf424000000064,%rcx
  0x0000000116363b9a:   imul   %rcx,%rax
  0x0000000116363b9e:   mov    %rax,%rbx
  0x0000000116363ba1:   mov    $0x10,%ecx
  0x0000000116363ba6:   shr    %cl,%rsi
  0x0000000116363ba9:   and    %rdi,%rsi
  0x0000000116363bac:   movabs $0x271000000001,%rax
  0x0000000116363bb6:   mov    %rax,%rcx
  0x0000000116363bb9:   mov    %rsi,%rax
  0x0000000116363bbc:   imul   %rcx,%rax
  0x0000000116363bc0:   add    %rax,%rbx
  0x0000000116363bc3:   mov    $0x20,%ecx
  0x0000000116363bc8:   shr    %cl,%rbx
  0x0000000116363bcb:   mov    %ebx,%ebx
  0x0000000116363bcd:   mov    %rbx,%rax
  0x0000000116363bd0:   add    $0x40,%rsp
  0x0000000116363bd4:   pop    %rbp
  0x0000000116363bd5:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x0000000116363bdc:   ja     0x0000000116363c04
  0x0000000116363be2:   retq   
  0x0000000116363be3:   movabs $0x108ca96d8,%r10            ;   {metadata({method} {0x0000000108ca96d8} 'tryToParseEightDigits10' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x0000000116363bed:   mov    %r10,0x8(%rsp)
  0x0000000116363bf2:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000116363bfa:   callq  0x0000000115d82480           ; ImmutableOopMap {}
                                                            ;*synchronization entry
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10@-1 (line 29)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000116363bff:   jmpq   0x0000000116363b54
  0x0000000116363c04:   movabs $0x116363bd5,%r10            ;   {internal_word}
  0x0000000116363c0e:   mov    %r10,0x358(%r15)
  0x0000000116363c15:   jmpq   0x0000000115cdd100           ;   {runtime_call SafepointBlob}
  0x0000000116363c1a:   nop
  0x0000000116363c1b:   nop
  0x0000000116363c1c:   mov    0x3d0(%r15),%rax
  0x0000000116363c23:   movq   $0x0,0x3d0(%r15)
  0x0000000116363c2e:   movq   $0x0,0x3d8(%r15)
  0x0000000116363c39:   add    $0x40,%rsp
  0x0000000116363c3d:   pop    %rbp
  0x0000000116363c3e:   jmpq   0x0000000115cee500           ;   {runtime_call unwind_exception Runtime1 stub}
  0x0000000116363c43:   hlt    
  0x0000000116363c44:   hlt    
  0x0000000116363c45:   hlt    
  0x0000000116363c46:   hlt    
  0x0000000116363c47:   hlt    
  0x0000000116363c48:   hlt    
  0x0000000116363c49:   hlt    
  0x0000000116363c4a:   hlt    
  0x0000000116363c4b:   hlt    
  0x0000000116363c4c:   hlt    
  0x0000000116363c4d:   hlt    
  0x0000000116363c4e:   hlt    
  0x0000000116363c4f:   hlt    
  0x0000000116363c50:   hlt    
  0x0000000116363c51:   hlt    
  0x0000000116363c52:   hlt    
  0x0000000116363c53:   hlt    
  0x0000000116363c54:   hlt    
  0x0000000116363c55:   hlt    
  0x0000000116363c56:   hlt    
  0x0000000116363c57:   hlt    
  0x0000000116363c58:   hlt    
  0x0000000116363c59:   hlt    
  0x0000000116363c5a:   hlt    
  0x0000000116363c5b:   hlt    
  0x0000000116363c5c:   hlt    
  0x0000000116363c5d:   hlt    
  0x0000000116363c5e:   hlt    
  0x0000000116363c5f:   hlt    
[Exception Handler]
  0x0000000116363c60:   callq  0x0000000115d7ee80           ;   {no_reloc}
  0x0000000116363c65:   movabs $0x109bdae43,%rdi            ;   {external_word}
  0x0000000116363c6f:   and    $0xfffffffffffffff0,%rsp
  0x0000000116363c73:   callq  0x000000010987dc50           ;   {runtime_call _ZN14MacroAssembler7debug64EPcxPx}
  0x0000000116363c78:   hlt    
[Deopt Handler Code]
  0x0000000116363c79:   movabs $0x116363c79,%r10            ;   {section_word}
  0x0000000116363c83:   push   %r10
  0x0000000116363c85:   jmpq   0x0000000115cdc3a0           ;   {runtime_call DeoptimizationBlob}
  0x0000000116363c8a:   hlt    
  0x0000000116363c8b:   hlt    
  0x0000000116363c8c:   hlt    
  0x0000000116363c8d:   hlt    
  0x0000000116363c8e:   hlt    
  0x0000000116363c8f:   hlt    
--------------------------------------------------------------------------------

============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)     212  830 %     3       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop @ 10 (39 bytes)
 total in heap  [0x0000000116363d10,0x0000000116364260] = 1360
 relocation     [0x0000000116363e70,0x0000000116363ec0] = 80
 main code      [0x0000000116363ec0,0x00000001163640e0] = 544
 stub code      [0x00000001163640e0,0x0000000116364120] = 64
 oops           [0x0000000116364120,0x0000000116364128] = 8
 metadata       [0x0000000116364128,0x0000000116364130] = 8
 scopes data    [0x0000000116364130,0x0000000116364198] = 104
 scopes pcs     [0x0000000116364198,0x0000000116364238] = 160
 dependencies   [0x0000000116364238,0x0000000116364240] = 8
 nul chk table  [0x0000000116364240,0x0000000116364260] = 32

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000108ca9d30} 'tryToParseEightDigits10InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  0x0000000116363ec0:   mov    %eax,-0x14000(%rsp)
  0x0000000116363ec7:   push   %rbp
  0x0000000116363ec8:   sub    $0x50,%rsp
  0x0000000116363ecc:   movabs $0x108caa1d8,%rdi            ;   {metadata(method data for {method} {0x0000000108ca9d30} 'tryToParseEightDigits10InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x0000000116363ed6:   mov    0xac(%rdi),%ebx
  0x0000000116363edc:   add    $0x2,%ebx
  0x0000000116363edf:   mov    %ebx,0xac(%rdi)
  0x0000000116363ee5:   and    $0x7fe,%ebx
  0x0000000116363eeb:   cmp    $0x0,%ebx
  0x0000000116363eee:   je     0x0000000116364040
  0x0000000116363ef4:   mov    0xc(%rsi),%edi               ; implicit exception: dispatches to 0x0000000116364061
  0x0000000116363ef7:   mov    $0x0,%ebx
  0x0000000116363efc:   mov    $0x0,%eax
  0x0000000116363f01:   jmpq   0x0000000116363f99
  0x0000000116363f06:   xchg   %ax,%ax
  0x0000000116363f08:   mov    %edi,0x3c(%rsp)
  0x0000000116363f0c:   cmp    0xc(%rsi),%ebx               ; implicit exception: dispatches to 0x0000000116364066
  0x0000000116363f0f:   jae    0x0000000116364070
  0x0000000116363f15:   movslq %ebx,%rdx
  0x0000000116363f18:   mov    0x10(%rsi,%rdx,8),%rcx
  0x0000000116363f1d:   movabs $0x108caa1d8,%rdx            ;   {metadata(method data for {method} {0x0000000108ca9d30} 'tryToParseEightDigits10InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x0000000116363f27:   addq   $0x1,0x110(%rdx)
  0x0000000116363f2f:   mov    %rsi,0x40(%rsp)
  0x0000000116363f34:   mov    %rcx,%rsi
  0x0000000116363f37:   mov    %ebx,0x38(%rsp)
  0x0000000116363f3b:   nopl   0x0(%rax)
  0x0000000116363f3f:   callq  0x0000000116363b20           ; ImmutableOopMap {[64]=Oop }
                                                            ;*invokestatic tryToParseEightDigits10 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@25 (line 121)
                                                            ;   {static_call}
  0x0000000116363f44:   add    0x34(%rsp),%eax
  0x0000000116363f48:   mov    0x38(%rsp),%ebx
  0x0000000116363f4c:   inc    %ebx
  0x0000000116363f4e:   movabs $0x108caa1d8,%rsi            ;   {metadata(method data for {method} {0x0000000108ca9d30} 'tryToParseEightDigits10InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x0000000116363f58:   mov    0xb0(%rsi),%edi
  0x0000000116363f5e:   add    $0x2,%edi
  0x0000000116363f61:   mov    %edi,0xb0(%rsi)
  0x0000000116363f67:   and    $0x3ffe,%edi
  0x0000000116363f6d:   cmp    $0x0,%edi
  0x0000000116363f70:   je     0x000000011636407e
  0x0000000116363f76:   mov    0x348(%r15),%r10             ; ImmutableOopMap {[64]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@33 (line 120)
  0x0000000116363f7d:   test   %eax,(%r10)                  ;   {poll}
  0x0000000116363f80:   movabs $0x108caa1d8,%rsi            ;   {metadata(method data for {method} {0x0000000108ca9d30} 'tryToParseEightDigits10InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x0000000116363f8a:   incl   0x120(%rsi)
  0x0000000116363f90:   mov    0x3c(%rsp),%edi
  0x0000000116363f94:   mov    0x40(%rsp),%rsi
  0x0000000116363f99:   mov    %eax,0x34(%rsp)
  0x0000000116363f9d:   cmp    %edi,%ebx
  0x0000000116363f9f:   movabs $0x108caa1d8,%rdx            ;   {metadata(method data for {method} {0x0000000108ca9d30} 'tryToParseEightDigits10InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x0000000116363fa9:   movabs $0x100,%rcx
  0x0000000116363fb3:   jl     0x0000000116363fc3
  0x0000000116363fb9:   movabs $0xf0,%rcx
  0x0000000116363fc3:   mov    (%rdx,%rcx,1),%r8
  0x0000000116363fc7:   lea    0x1(%r8),%r8
  0x0000000116363fcb:   mov    %r8,(%rdx,%rcx,1)
  0x0000000116363fcf:   jl     0x0000000116363f08
  0x0000000116363fd5:   mov    0x34(%rsp),%eax
  0x0000000116363fd9:   movslq %eax,%rax
  0x0000000116363fdc:   add    $0x50,%rsp
  0x0000000116363fe0:   pop    %rbp
  0x0000000116363fe1:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x0000000116363fe8:   ja     0x000000011636409f
  0x0000000116363fee:   retq   
  0x0000000116363fef:   mov    %eax,-0x14000(%rsp)
  0x0000000116363ff6:   push   %rbp
  0x0000000116363ff7:   sub    $0x50,%rsp
  0x0000000116363ffb:   mov    0x28(%rsi),%ebx
  0x0000000116363ffe:   mov    0x20(%rsi),%rax
  0x0000000116364002:   mov    0x18(%rsi),%edx
  0x0000000116364005:   mov    0x10(%rsi),%ecx
  0x0000000116364008:   mov    %rsi,%rdi
  0x000000011636400b:   mov    %ebx,0x30(%rsp)
  0x000000011636400f:   mov    %rax,0x28(%rsp)
  0x0000000116364014:   mov    %edx,0x24(%rsp)
  0x0000000116364018:   mov    %ecx,0x20(%rsp)
  0x000000011636401c:   callq  0x0000000109a18200           ;   {runtime_call _ZN13SharedRuntime17OSR_migration_endEPl}
  0x0000000116364021:   mov    0x20(%rsp),%ecx
  0x0000000116364025:   mov    %rcx,%rbx
  0x0000000116364028:   mov    0x24(%rsp),%edx
  0x000000011636402c:   mov    %rdx,%rdi
  0x000000011636402f:   mov    0x28(%rsp),%rax
  0x0000000116364034:   mov    %rax,%rsi
  0x0000000116364037:   mov    0x30(%rsp),%eax
  0x000000011636403b:   jmpq   0x0000000116363f99
  0x0000000116364040:   movabs $0x108ca9d30,%r10            ;   {metadata({method} {0x0000000108ca9d30} 'tryToParseEightDigits10InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x000000011636404a:   mov    %r10,0x8(%rsp)
  0x000000011636404f:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000116364057:   callq  0x0000000115d82480           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@-1 (line 119)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000011636405c:   jmpq   0x0000000116363ef4
  0x0000000116364061:   callq  0x0000000115d7c4a0           ; ImmutableOopMap {rsi=Oop }
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@5 (line 120)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000116364066:   callq  0x0000000115d7c4a0           ; ImmutableOopMap {rsi=Oop }
                                                            ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@19 (line 120)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000011636406b:   callq  0x0000000115d7c4a0           ; ImmutableOopMap {rsi=Oop }
                                                            ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@19 (line 120)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000116364070:   mov    %rbx,(%rsp)
  0x0000000116364074:   mov    %rsi,0x8(%rsp)
  0x0000000116364079:   callq  0x0000000115d7bba0           ; ImmutableOopMap {rsi=Oop }
                                                            ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@19 (line 120)
                                                            ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x000000011636407e:   movabs $0x108ca9d30,%r10            ;   {metadata({method} {0x0000000108ca9d30} 'tryToParseEightDigits10InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x0000000116364088:   mov    %r10,0x8(%rsp)
  0x000000011636408d:   movq   $0x21,(%rsp)
  0x0000000116364095:   callq  0x0000000115d82480           ; ImmutableOopMap {[64]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@33 (line 120)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000011636409a:   jmpq   0x0000000116363f76
  0x000000011636409f:   movabs $0x116363fe1,%r10            ;   {internal_word}
  0x00000001163640a9:   mov    %r10,0x358(%r15)
  0x00000001163640b0:   jmpq   0x0000000115cdd100           ;   {runtime_call SafepointBlob}
  0x00000001163640b5:   nop
  0x00000001163640b6:   nop
  0x00000001163640b7:   mov    0x3d0(%r15),%rax
  0x00000001163640be:   movq   $0x0,0x3d0(%r15)
  0x00000001163640c9:   movq   $0x0,0x3d8(%r15)
  0x00000001163640d4:   add    $0x50,%rsp
  0x00000001163640d8:   pop    %rbp
  0x00000001163640d9:   jmpq   0x0000000115cee500           ;   {runtime_call unwind_exception Runtime1 stub}
  0x00000001163640de:   hlt    
  0x00000001163640df:   hlt    
[Stub Code]
  0x00000001163640e0:   nopl   0x0(%rax,%rax,1)             ;   {no_reloc}
  0x00000001163640e5:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00000001163640ef:   jmpq   0x00000001163640ef           ;   {runtime_call const_jargs+-133693537}
[Exception Handler]
  0x00000001163640f4:   callq  0x0000000115d7ee80           ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x00000001163640f9:   movabs $0x109bdae43,%rdi            ;   {external_word}
  0x0000000116364103:   and    $0xfffffffffffffff0,%rsp
  0x0000000116364107:   callq  0x000000010987dc50           ;   {runtime_call _ZN14MacroAssembler7debug64EPcxPx}
  0x000000011636410c:   hlt    
[Deopt Handler Code]
  0x000000011636410d:   movabs $0x11636410d,%r10            ;   {section_word}
  0x0000000116364117:   push   %r10
  0x0000000116364119:   jmpq   0x0000000115cdc3a0           ;   {runtime_call DeoptimizationBlob}
  0x000000011636411e:   hlt    
  0x000000011636411f:   hlt    
--------------------------------------------------------------------------------

============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)     216  832       3       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop (39 bytes)
 total in heap  [0x0000000116364990,0x0000000116364e38] = 1192
 relocation     [0x0000000116364af0,0x0000000116364b38] = 72
 main code      [0x0000000116364b40,0x0000000116364d00] = 448
 stub code      [0x0000000116364d00,0x0000000116364d40] = 64
 oops           [0x0000000116364d40,0x0000000116364d48] = 8
 metadata       [0x0000000116364d48,0x0000000116364d50] = 8
 scopes data    [0x0000000116364d50,0x0000000116364db0] = 96
 scopes pcs     [0x0000000116364db0,0x0000000116364e20] = 112
 dependencies   [0x0000000116364e20,0x0000000116364e28] = 8
 nul chk table  [0x0000000116364e28,0x0000000116364e38] = 16

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000108ca9d30} 'tryToParseEightDigits10InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  # parm0:    rsi:rsi   = '[J'
  #           [sp+0x50]  (sp of caller)
  0x0000000116364b40:   mov    %eax,-0x14000(%rsp)
  0x0000000116364b47:   push   %rbp
  0x0000000116364b48:   sub    $0x40,%rsp
  0x0000000116364b4c:   mov    %rsi,0x28(%rsp)
  0x0000000116364b51:   movabs $0x108caa1d8,%rdi            ;   {metadata(method data for {method} {0x0000000108ca9d30} 'tryToParseEightDigits10InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x0000000116364b5b:   mov    0xac(%rdi),%ebx
  0x0000000116364b61:   add    $0x2,%ebx
  0x0000000116364b64:   mov    %ebx,0xac(%rdi)
  0x0000000116364b6a:   and    $0x7fe,%ebx
  0x0000000116364b70:   cmp    $0x0,%ebx
  0x0000000116364b73:   je     0x0000000116364c6f
  0x0000000116364b79:   mov    0xc(%rsi),%edi               ; implicit exception: dispatches to 0x0000000116364c90
  0x0000000116364b7c:   mov    %edi,0x30(%rsp)
  0x0000000116364b80:   mov    $0x0,%ebx
  0x0000000116364b85:   mov    $0x0,%eax
  0x0000000116364b8a:   mov    %eax,0x20(%rsp)
  0x0000000116364b8e:   jmpq   0x0000000116364c1d
  0x0000000116364b93:   nopl   0x0(%rax,%rax,1)
  0x0000000116364b98:   movslq %ebx,%rdx
  0x0000000116364b9b:   mov    0x10(%rsi,%rdx,8),%rcx
  0x0000000116364ba0:   movabs $0x108caa1d8,%rdx            ;   {metadata(method data for {method} {0x0000000108ca9d30} 'tryToParseEightDigits10InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x0000000116364baa:   addq   $0x1,0x110(%rdx)
  0x0000000116364bb2:   mov    %rcx,%rsi
  0x0000000116364bb5:   mov    %ebx,0x24(%rsp)
  0x0000000116364bb9:   nopw   0x0(%rax,%rax,1)
  0x0000000116364bbf:   callq  0x0000000116363b20           ; ImmutableOopMap {[40]=Oop }
                                                            ;*invokestatic tryToParseEightDigits10 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@25 (line 121)
                                                            ;   {static_call}
  0x0000000116364bc4:   add    0x20(%rsp),%eax
  0x0000000116364bc8:   mov    0x24(%rsp),%ebx
  0x0000000116364bcc:   inc    %ebx
  0x0000000116364bce:   movabs $0x108caa1d8,%rsi            ;   {metadata(method data for {method} {0x0000000108ca9d30} 'tryToParseEightDigits10InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x0000000116364bd8:   mov    0xb0(%rsi),%edi
  0x0000000116364bde:   add    $0x2,%edi
  0x0000000116364be1:   mov    %edi,0xb0(%rsi)
  0x0000000116364be7:   and    $0x3ffe,%edi
  0x0000000116364bed:   cmp    $0x0,%edi
  0x0000000116364bf0:   je     0x0000000116364c95
  0x0000000116364bf6:   mov    0x348(%r15),%r10             ; ImmutableOopMap {[40]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@33 (line 120)
  0x0000000116364bfd:   test   %eax,(%r10)                  ;   {poll}
  0x0000000116364c00:   movabs $0x108caa1d8,%rsi            ;   {metadata(method data for {method} {0x0000000108ca9d30} 'tryToParseEightDigits10InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x0000000116364c0a:   incl   0x120(%rsi)
  0x0000000116364c10:   mov    %eax,0x20(%rsp)
  0x0000000116364c14:   mov    0x30(%rsp),%edi
  0x0000000116364c18:   mov    0x28(%rsp),%rsi
  0x0000000116364c1d:   cmp    %edi,%ebx
  0x0000000116364c1f:   movabs $0x108caa1d8,%rdx            ;   {metadata(method data for {method} {0x0000000108ca9d30} 'tryToParseEightDigits10InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x0000000116364c29:   movabs $0x100,%rcx
  0x0000000116364c33:   jl     0x0000000116364c43
  0x0000000116364c39:   movabs $0xf0,%rcx
  0x0000000116364c43:   mov    (%rdx,%rcx,1),%r8
  0x0000000116364c47:   lea    0x1(%r8),%r8
  0x0000000116364c4b:   mov    %r8,(%rdx,%rcx,1)
  0x0000000116364c4f:   jl     0x0000000116364b98
  0x0000000116364c55:   mov    0x20(%rsp),%eax
  0x0000000116364c59:   movslq %eax,%rax
  0x0000000116364c5c:   add    $0x40,%rsp
  0x0000000116364c60:   pop    %rbp
  0x0000000116364c61:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x0000000116364c68:   ja     0x0000000116364cb6
  0x0000000116364c6e:   retq   
  0x0000000116364c6f:   movabs $0x108ca9d30,%r10            ;   {metadata({method} {0x0000000108ca9d30} 'tryToParseEightDigits10InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x0000000116364c79:   mov    %r10,0x8(%rsp)
  0x0000000116364c7e:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000116364c86:   callq  0x0000000115d82480           ; ImmutableOopMap {rsi=Oop [40]=Oop }
                                                            ;*synchronization entry
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@-1 (line 119)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000116364c8b:   jmpq   0x0000000116364b79
  0x0000000116364c90:   callq  0x0000000115d7c4a0           ; ImmutableOopMap {rsi=Oop [40]=Oop }
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@5 (line 120)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000116364c95:   movabs $0x108ca9d30,%r10            ;   {metadata({method} {0x0000000108ca9d30} 'tryToParseEightDigits10InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos')}
  0x0000000116364c9f:   mov    %r10,0x8(%rsp)
  0x0000000116364ca4:   movq   $0x21,(%rsp)
  0x0000000116364cac:   callq  0x0000000115d82480           ; ImmutableOopMap {[40]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@33 (line 120)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000116364cb1:   jmpq   0x0000000116364bf6
  0x0000000116364cb6:   movabs $0x116364c61,%r10            ;   {internal_word}
  0x0000000116364cc0:   mov    %r10,0x358(%r15)
  0x0000000116364cc7:   jmpq   0x0000000115cdd100           ;   {runtime_call SafepointBlob}
  0x0000000116364ccc:   nop
  0x0000000116364ccd:   nop
  0x0000000116364cce:   mov    0x3d0(%r15),%rax
  0x0000000116364cd5:   movq   $0x0,0x3d0(%r15)
  0x0000000116364ce0:   movq   $0x0,0x3d8(%r15)
  0x0000000116364ceb:   add    $0x40,%rsp
  0x0000000116364cef:   pop    %rbp
  0x0000000116364cf0:   jmpq   0x0000000115cee500           ;   {runtime_call unwind_exception Runtime1 stub}
  0x0000000116364cf5:   hlt    
  0x0000000116364cf6:   hlt    
  0x0000000116364cf7:   hlt    
  0x0000000116364cf8:   hlt    
  0x0000000116364cf9:   hlt    
  0x0000000116364cfa:   hlt    
  0x0000000116364cfb:   hlt    
  0x0000000116364cfc:   hlt    
  0x0000000116364cfd:   hlt    
  0x0000000116364cfe:   hlt    
  0x0000000116364cff:   hlt    
[Stub Code]
  0x0000000116364d00:   nopl   0x0(%rax,%rax,1)             ;   {no_reloc}
  0x0000000116364d05:   movabs $0x0,%rbx                    ;   {static_stub}
  0x0000000116364d0f:   jmpq   0x0000000116364d0f           ;   {runtime_call const_jargs+-133693537}
[Exception Handler]
  0x0000000116364d14:   callq  0x0000000115d7ee80           ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x0000000116364d19:   movabs $0x109bdae43,%rdi            ;   {external_word}
  0x0000000116364d23:   and    $0xfffffffffffffff0,%rsp
  0x0000000116364d27:   callq  0x000000010987dc50           ;   {runtime_call _ZN14MacroAssembler7debug64EPcxPx}
  0x0000000116364d2c:   hlt    
[Deopt Handler Code]
  0x0000000116364d2d:   movabs $0x116364d2d,%r10            ;   {section_word}
  0x0000000116364d37:   push   %r10
  0x0000000116364d39:   jmpq   0x0000000115cdc3a0           ;   {runtime_call DeoptimizationBlob}
  0x0000000116364d3e:   hlt    
  0x0000000116364d3f:   hlt    
--------------------------------------------------------------------------------

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     569  836 %     4       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop @ 10 (39 bytes)
 total in heap  [0x000000011d7a7990,0x000000011d7a7f90] = 1536
 relocation     [0x000000011d7a7af0,0x000000011d7a7b10] = 32
 main code      [0x000000011d7a7b20,0x000000011d7a7e80] = 864
 stub code      [0x000000011d7a7e80,0x000000011d7a7e98] = 24
 oops           [0x000000011d7a7e98,0x000000011d7a7ea0] = 8
 metadata       [0x000000011d7a7ea0,0x000000011d7a7eb0] = 16
 scopes data    [0x000000011d7a7eb0,0x000000011d7a7f18] = 104
 scopes pcs     [0x000000011d7a7f18,0x000000011d7a7f78] = 96
 dependencies   [0x000000011d7a7f78,0x000000011d7a7f80] = 8
 nul chk table  [0x000000011d7a7f80,0x000000011d7a7f90] = 16

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000108ca9d30} 'tryToParseEightDigits10InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  0x000000011d7a7b20:   callq  0x000000010997b100           ;   {runtime_call _ZN2os10breakpointEv}
  0x000000011d7a7b25:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x000000011d7a7b30:   mov    %eax,-0x14000(%rsp)
  0x000000011d7a7b37:   push   %rbp
  0x000000011d7a7b38:   sub    $0x30,%rsp
  0x000000011d7a7b3c:   mov    0x20(%rsi),%r14
  0x000000011d7a7b40:   mov    0x28(%rsi),%ebx
  0x000000011d7a7b43:   mov    0x18(%rsi),%r13d
  0x000000011d7a7b47:   mov    0x10(%rsi),%ebp
  0x000000011d7a7b4a:   mov    %rsi,%rdi
  0x000000011d7a7b4d:   movabs $0x109a18200,%r10
  0x000000011d7a7b57:   callq  *%r10
  0x000000011d7a7b5a:   nopw   0x0(%rax,%rax,1)
  0x000000011d7a7b60:   mov    0x8(%r14),%r11d              ; implicit exception: dispatches to 0x000000011d7a7e3c
  0x000000011d7a7b64:   cmp    $0x1180,%r11d                ;   {metadata({type array long})}
  0x000000011d7a7b6b:   jne    0x000000011d7a7e24
  0x000000011d7a7b71:   cmp    %r13d,%ebp
  0x000000011d7a7b74:   jge    0x000000011d7a7df4
  0x000000011d7a7b7a:   mov    0xc(%r14),%r9d
  0x000000011d7a7b7e:   mov    %ebp,%r10d
  0x000000011d7a7b81:   inc    %r10d
  0x000000011d7a7b84:   xor    %r11d,%r11d
  0x000000011d7a7b87:   test   %r10d,%r10d
  0x000000011d7a7b8a:   cmovl  %r11d,%r10d
  0x000000011d7a7b8e:   cmp    %r13d,%r10d
  0x000000011d7a7b91:   cmovg  %r13d,%r10d
  0x000000011d7a7b95:   movabs $0xff000000ff,%r11
  0x000000011d7a7b9f:   movabs $0x271000000001,%rdx
  0x000000011d7a7ba9:   movabs $0xf424000000064,%rcx
  0x000000011d7a7bb3:   cmp    %r9d,%ebp
  0x000000011d7a7bb6:   jae    0x000000011d7a7e0a
  0x000000011d7a7bbc:   movabs $0xcfcfcfcfcfcfcfd0,%r8
  0x000000011d7a7bc6:   add    0x10(%r14,%rbp,8),%r8
  0x000000011d7a7bcb:   imul   $0xa01,%r8,%r8
  0x000000011d7a7bd2:   mov    %r8,%rdi
  0x000000011d7a7bd5:   shr    $0x8,%rdi
  0x000000011d7a7bd9:   and    %r11,%rdi
  0x000000011d7a7bdc:   imul   %rcx,%rdi
  0x000000011d7a7be0:   sar    $0x8,%r8
  0x000000011d7a7be4:   shr    $0x10,%r8
  0x000000011d7a7be8:   and    %r11,%r8
  0x000000011d7a7beb:   imul   %rdx,%r8
  0x000000011d7a7bef:   add    %rdi,%r8
  0x000000011d7a7bf2:   shr    $0x20,%r8
  0x000000011d7a7bf6:   mov    %r8d,%r8d
  0x000000011d7a7bf9:   add    %r8d,%ebx
  0x000000011d7a7bfc:   inc    %ebp
  0x000000011d7a7bfe:   xchg   %ax,%ax
  0x000000011d7a7c00:   cmp    %r10d,%ebp
  0x000000011d7a7c03:   jl     0x000000011d7a7bb3
  0x000000011d7a7c05:   movslq %r9d,%r10
  0x000000011d7a7c08:   movslq %r13d,%r8
  0x000000011d7a7c0b:   cmp    %r10,%r8
  0x000000011d7a7c0e:   mov    %r13d,%r10d
  0x000000011d7a7c11:   cmovg  %r9d,%r10d
  0x000000011d7a7c15:   mov    %r10d,%r8d
  0x000000011d7a7c18:   add    $0xfffffffd,%r8d
  0x000000011d7a7c1c:   mov    $0x80000000,%edi
  0x000000011d7a7c21:   cmp    %r8d,%r10d
  0x000000011d7a7c24:   cmovl  %edi,%r8d
  0x000000011d7a7c28:   cmp    %r8d,%ebp
  0x000000011d7a7c2b:   jge    0x000000011d7a7d9b
  0x000000011d7a7c31:   jmp    0x000000011d7a7c41
  0x000000011d7a7c33:   vmovd  %xmm1,%r13d
  0x000000011d7a7c38:   vmovd  %xmm2,%r9d
  0x000000011d7a7c3d:   mov    (%rsp),%r8d
  0x000000011d7a7c41:   mov    %r8d,%eax
  0x000000011d7a7c44:   sub    %ebp,%eax
  0x000000011d7a7c46:   xor    %edi,%edi
  0x000000011d7a7c48:   cmp    %ebp,%r8d
  0x000000011d7a7c4b:   cmovl  %edi,%eax
  0x000000011d7a7c4e:   cmp    $0xfa0,%eax
  0x000000011d7a7c54:   mov    $0xfa0,%r10d
  0x000000011d7a7c5a:   cmova  %r10d,%eax
  0x000000011d7a7c5e:   add    %ebp,%eax
  0x000000011d7a7c60:   vmovd  %r13d,%xmm1
  0x000000011d7a7c65:   vmovd  %r9d,%xmm2
  0x000000011d7a7c6a:   mov    %r8d,(%rsp)
  0x000000011d7a7c6e:   xchg   %ax,%ax
  0x000000011d7a7c70:   movabs $0xcfcfcfcfcfcfcfd0,%r10
  0x000000011d7a7c7a:   add    0x10(%r14,%rbp,8),%r10
  0x000000011d7a7c7f:   movslq %ebp,%r9
  0x000000011d7a7c82:   movabs $0xcfcfcfcfcfcfcfd0,%rdi
  0x000000011d7a7c8c:   add    0x18(%r14,%r9,8),%rdi
  0x000000011d7a7c91:   movabs $0xcfcfcfcfcfcfcfd0,%rsi
  0x000000011d7a7c9b:   add    0x28(%r14,%r9,8),%rsi
  0x000000011d7a7ca0:   movabs $0xcfcfcfcfcfcfcfd0,%r8
  0x000000011d7a7caa:   add    0x20(%r14,%r9,8),%r8
  0x000000011d7a7caf:   imul   $0xa01,%r10,%r10
  0x000000011d7a7cb6:   imul   $0xa01,%r8,%r8
  0x000000011d7a7cbd:   mov    %r10,%r9
  0x000000011d7a7cc0:   sar    $0x8,%r9
  0x000000011d7a7cc4:   mov    %r8,%r13
  0x000000011d7a7cc7:   sar    $0x8,%r13
  0x000000011d7a7ccb:   shr    $0x10,%r9
  0x000000011d7a7ccf:   and    %r11,%r9
  0x000000011d7a7cd2:   imul   %rdx,%r9
  0x000000011d7a7cd6:   shr    $0x10,%r13
  0x000000011d7a7cda:   and    %r11,%r13
  0x000000011d7a7cdd:   imul   %rdx,%r13
  0x000000011d7a7ce1:   shr    $0x8,%r8
  0x000000011d7a7ce5:   and    %r11,%r8
  0x000000011d7a7ce8:   imul   %rcx,%r8
  0x000000011d7a7cec:   add    %r8,%r13
  0x000000011d7a7cef:   shr    $0x8,%r10
  0x000000011d7a7cf3:   and    %r11,%r10
  0x000000011d7a7cf6:   imul   %rcx,%r10
  0x000000011d7a7cfa:   add    %r10,%r9
  0x000000011d7a7cfd:   shr    $0x20,%r13
  0x000000011d7a7d01:   shr    $0x20,%r9
  0x000000011d7a7d05:   mov    %r13d,%r10d
  0x000000011d7a7d08:   mov    %r9d,%r9d
  0x000000011d7a7d0b:   add    %r9d,%ebx
  0x000000011d7a7d0e:   imul   $0xa01,%rsi,%r9
  0x000000011d7a7d15:   imul   $0xa01,%rdi,%r8
  0x000000011d7a7d1c:   mov    %r9,%rdi
  0x000000011d7a7d1f:   sar    $0x8,%rdi
  0x000000011d7a7d23:   mov    %r8,%rsi
  0x000000011d7a7d26:   sar    $0x8,%rsi
  0x000000011d7a7d2a:   shr    $0x10,%rdi
  0x000000011d7a7d2e:   and    %r11,%rdi
  0x000000011d7a7d31:   imul   %rdx,%rdi
  0x000000011d7a7d35:   shr    $0x10,%rsi
  0x000000011d7a7d39:   and    %r11,%rsi
  0x000000011d7a7d3c:   imul   %rdx,%rsi
  0x000000011d7a7d40:   shr    $0x8,%r8
  0x000000011d7a7d44:   and    %r11,%r8
  0x000000011d7a7d47:   imul   %rcx,%r8
  0x000000011d7a7d4b:   add    %r8,%rsi
  0x000000011d7a7d4e:   shr    $0x8,%r9
  0x000000011d7a7d52:   and    %r11,%r9
  0x000000011d7a7d55:   imul   %rcx,%r9
  0x000000011d7a7d59:   add    %r9,%rdi
  0x000000011d7a7d5c:   shr    $0x20,%rsi
  0x000000011d7a7d60:   shr    $0x20,%rdi
  0x000000011d7a7d64:   mov    %esi,%r8d
  0x000000011d7a7d67:   add    %r8d,%ebx
  0x000000011d7a7d6a:   add    %r10d,%ebx
  0x000000011d7a7d6d:   mov    %edi,%r10d
  0x000000011d7a7d70:   add    %r10d,%ebx
  0x000000011d7a7d73:   add    $0x4,%ebp
  0x000000011d7a7d76:   cmp    %eax,%ebp
  0x000000011d7a7d78:   jl     0x000000011d7a7c70
  0x000000011d7a7d7e:   mov    0x348(%r15),%r10             ; ImmutableOopMap {r14=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@33 (line 120)
  0x000000011d7a7d85:   test   %eax,(%r10)                  ;   {poll}
  0x000000011d7a7d88:   cmp    (%rsp),%ebp
  0x000000011d7a7d8b:   jl     0x000000011d7a7c33
  0x000000011d7a7d91:   vmovd  %xmm1,%r13d
  0x000000011d7a7d96:   vmovd  %xmm2,%r9d
  0x000000011d7a7d9b:   nopl   0x0(%rax,%rax,1)
  0x000000011d7a7da0:   cmp    %r13d,%ebp
  0x000000011d7a7da3:   jge    0x000000011d7a7df4
  0x000000011d7a7da5:   data16 xchg %ax,%ax
  0x000000011d7a7da8:   cmp    %r9d,%ebp
  0x000000011d7a7dab:   jae    0x000000011d7a7e0a
  0x000000011d7a7dad:   movabs $0xcfcfcfcfcfcfcfd0,%r10
  0x000000011d7a7db7:   add    0x10(%r14,%rbp,8),%r10
  0x000000011d7a7dbc:   imul   $0xa01,%r10,%r10
  0x000000011d7a7dc3:   mov    %r10,%r8
  0x000000011d7a7dc6:   shr    $0x8,%r8
  0x000000011d7a7dca:   and    %r11,%r8
  0x000000011d7a7dcd:   imul   %rcx,%r8
  0x000000011d7a7dd1:   sar    $0x8,%r10
  0x000000011d7a7dd5:   shr    $0x10,%r10
  0x000000011d7a7dd9:   and    %r11,%r10
  0x000000011d7a7ddc:   imul   %rdx,%r10
  0x000000011d7a7de0:   add    %r8,%r10
  0x000000011d7a7de3:   shr    $0x20,%r10
  0x000000011d7a7de7:   mov    %r10d,%r8d
  0x000000011d7a7dea:   add    %r8d,%ebx
  0x000000011d7a7ded:   inc    %ebp
  0x000000011d7a7def:   cmp    %r13d,%ebp
  0x000000011d7a7df2:   jl     0x000000011d7a7da8
  0x000000011d7a7df4:   movslq %ebx,%rax
  0x000000011d7a7df7:   add    $0x30,%rsp
  0x000000011d7a7dfb:   pop    %rbp
  0x000000011d7a7dfc:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x000000011d7a7e03:   ja     0x000000011d7a7e50
  0x000000011d7a7e09:   retq   
  0x000000011d7a7e0a:   mov    $0xffffffe4,%esi
  0x000000011d7a7e0f:   mov    %ebx,(%rsp)
  0x000000011d7a7e12:   mov    %r13d,0x4(%rsp)
  0x000000011d7a7e17:   mov    %r14,0x10(%rsp)
  0x000000011d7a7e1c:   data16 xchg %ax,%ax
  0x000000011d7a7e1f:   callq  0x0000000115cdc000           ; ImmutableOopMap {[16]=Oop }
                                                            ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@19 (line 120)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x000000011d7a7e24:   mov    $0xffffff8d,%esi
  0x000000011d7a7e29:   mov    %ebx,(%rsp)
  0x000000011d7a7e2c:   mov    %r14,0x8(%rsp)
  0x000000011d7a7e31:   mov    %r13d,0x4(%rsp)
  0x000000011d7a7e36:   nop
  0x000000011d7a7e37:   callq  0x0000000115cdc000           ; ImmutableOopMap {[8]=Oop }
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@10 (line 120)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x000000011d7a7e3c:   mov    $0xffffffbe,%esi
  0x000000011d7a7e41:   mov    %ebx,(%rsp)
  0x000000011d7a7e44:   mov    %r13d,0x4(%rsp)
  0x000000011d7a7e49:   xchg   %ax,%ax
  0x000000011d7a7e4b:   callq  0x0000000115cdc000           ; ImmutableOopMap {}
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@10 (line 120)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x000000011d7a7e50:   movabs $0x11d7a7dfc,%r10            ;   {internal_word}
  0x000000011d7a7e5a:   mov    %r10,0x358(%r15)
  0x000000011d7a7e61:   jmpq   0x0000000115cdd100           ;   {runtime_call SafepointBlob}
  0x000000011d7a7e66:   hlt    
  0x000000011d7a7e67:   hlt    
  0x000000011d7a7e68:   hlt    
  0x000000011d7a7e69:   hlt    
  0x000000011d7a7e6a:   hlt    
  0x000000011d7a7e6b:   hlt    
  0x000000011d7a7e6c:   hlt    
  0x000000011d7a7e6d:   hlt    
  0x000000011d7a7e6e:   hlt    
  0x000000011d7a7e6f:   hlt    
  0x000000011d7a7e70:   hlt    
  0x000000011d7a7e71:   hlt    
  0x000000011d7a7e72:   hlt    
  0x000000011d7a7e73:   hlt    
  0x000000011d7a7e74:   hlt    
  0x000000011d7a7e75:   hlt    
  0x000000011d7a7e76:   hlt    
  0x000000011d7a7e77:   hlt    
  0x000000011d7a7e78:   hlt    
  0x000000011d7a7e79:   hlt    
  0x000000011d7a7e7a:   hlt    
  0x000000011d7a7e7b:   hlt    
  0x000000011d7a7e7c:   hlt    
  0x000000011d7a7e7d:   hlt    
  0x000000011d7a7e7e:   hlt    
  0x000000011d7a7e7f:   hlt    
[Exception Handler]
  0x000000011d7a7e80:   jmpq   0x0000000115ceeb00           ;   {no_reloc}
[Deopt Handler Code]
  0x000000011d7a7e85:   callq  0x000000011d7a7e8a
  0x000000011d7a7e8a:   subq   $0x5,(%rsp)
  0x000000011d7a7e8f:   jmpq   0x0000000115cdc3a0           ;   {runtime_call DeoptimizationBlob}
  0x000000011d7a7e94:   hlt    
  0x000000011d7a7e95:   hlt    
  0x000000011d7a7e96:   hlt    
  0x000000011d7a7e97:   hlt    
--------------------------------------------------------------------------------

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     572  831       4       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10 (51 bytes)
 total in heap  [0x000000011d7a8890,0x000000011d7a8af0] = 608
 relocation     [0x000000011d7a89f0,0x000000011d7a8a00] = 16
 main code      [0x000000011d7a8a00,0x000000011d7a8aa0] = 160
 stub code      [0x000000011d7a8aa0,0x000000011d7a8ab8] = 24
 oops           [0x000000011d7a8ab8,0x000000011d7a8ac0] = 8
 scopes data    [0x000000011d7a8ac0,0x000000011d7a8ac8] = 8
 scopes pcs     [0x000000011d7a8ac8,0x000000011d7a8ae8] = 32
 dependencies   [0x000000011d7a8ae8,0x000000011d7a8af0] = 8

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000108ca96d8} 'tryToParseEightDigits10' '(J)I' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  # parm0:    rsi:rsi   = long
  #           [sp+0x20]  (sp of caller)
  0x000000011d7a8a00:   sub    $0x18,%rsp
  0x000000011d7a8a07:   mov    %rbp,0x10(%rsp)
  0x000000011d7a8a0c:   movabs $0x271000000001,%r10
  0x000000011d7a8a16:   movabs $0xff000000ff,%r11
  0x000000011d7a8a20:   movabs $0xcfcfcfcfcfcfcfd0,%r8
  0x000000011d7a8a2a:   add    %r8,%rsi
  0x000000011d7a8a2d:   imul   $0xa01,%rsi,%r8
  0x000000011d7a8a34:   mov    %r8,%r9
  0x000000011d7a8a37:   sar    $0x8,%r9
  0x000000011d7a8a3b:   shr    $0x8,%r8
  0x000000011d7a8a3f:   and    %r11,%r8
  0x000000011d7a8a42:   shr    $0x10,%r9
  0x000000011d7a8a46:   and    %r11,%r9
  0x000000011d7a8a49:   imul   %r10,%r9
  0x000000011d7a8a4d:   movabs $0xf424000000064,%r10
  0x000000011d7a8a57:   imul   %r10,%r8
  0x000000011d7a8a5b:   add    %r9,%r8
  0x000000011d7a8a5e:   shr    $0x20,%r8
  0x000000011d7a8a62:   mov    %r8d,%eax
  0x000000011d7a8a65:   add    $0x10,%rsp
  0x000000011d7a8a69:   pop    %rbp
  0x000000011d7a8a6a:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x000000011d7a8a71:   ja     0x000000011d7a8a78
  0x000000011d7a8a77:   retq   
  0x000000011d7a8a78:   movabs $0x11d7a8a6a,%r10            ;   {internal_word}
  0x000000011d7a8a82:   mov    %r10,0x358(%r15)
  0x000000011d7a8a89:   jmpq   0x0000000115cdd100           ;   {runtime_call SafepointBlob}
  0x000000011d7a8a8e:   hlt    
  0x000000011d7a8a8f:   hlt    
  0x000000011d7a8a90:   hlt    
  0x000000011d7a8a91:   hlt    
  0x000000011d7a8a92:   hlt    
  0x000000011d7a8a93:   hlt    
  0x000000011d7a8a94:   hlt    
  0x000000011d7a8a95:   hlt    
  0x000000011d7a8a96:   hlt    
  0x000000011d7a8a97:   hlt    
  0x000000011d7a8a98:   hlt    
  0x000000011d7a8a99:   hlt    
  0x000000011d7a8a9a:   hlt    
  0x000000011d7a8a9b:   hlt    
  0x000000011d7a8a9c:   hlt    
  0x000000011d7a8a9d:   hlt    
  0x000000011d7a8a9e:   hlt    
  0x000000011d7a8a9f:   hlt    
[Exception Handler]
  0x000000011d7a8aa0:   jmpq   0x0000000115ceeb00           ;   {no_reloc}
[Deopt Handler Code]
  0x000000011d7a8aa5:   callq  0x000000011d7a8aaa
  0x000000011d7a8aaa:   subq   $0x5,(%rsp)
  0x000000011d7a8aaf:   jmpq   0x0000000115cdc3a0           ;   {runtime_call DeoptimizationBlob}
  0x000000011d7a8ab4:   hlt    
  0x000000011d7a8ab5:   hlt    
  0x000000011d7a8ab6:   hlt    
  0x000000011d7a8ab7:   hlt    
--------------------------------------------------------------------------------

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     575  840       4       ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop (39 bytes)
 total in heap  [0x000000011d7a9790,0x000000011d7a9cc0] = 1328
 relocation     [0x000000011d7a98f0,0x000000011d7a9908] = 24
 main code      [0x000000011d7a9920,0x000000011d7a9be0] = 704
 stub code      [0x000000011d7a9be0,0x000000011d7a9bf8] = 24
 oops           [0x000000011d7a9bf8,0x000000011d7a9c00] = 8
 metadata       [0x000000011d7a9c00,0x000000011d7a9c08] = 8
 scopes data    [0x000000011d7a9c08,0x000000011d7a9c58] = 80
 scopes pcs     [0x000000011d7a9c58,0x000000011d7a9ca8] = 80
 dependencies   [0x000000011d7a9ca8,0x000000011d7a9cb0] = 8
 nul chk table  [0x000000011d7a9cb0,0x000000011d7a9cc0] = 16

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000108ca9d30} 'tryToParseEightDigits10InLoop' '([J)J' in 'ch/randelshofer/fastdoubleparser/EightDigitsJmhWithoutCheckAlgos'
  # parm0:    rsi:rsi   = '[J'
  #           [sp+0x30]  (sp of caller)
  0x000000011d7a9920:   mov    %eax,-0x14000(%rsp)
  0x000000011d7a9927:   push   %rbp
  0x000000011d7a9928:   sub    $0x20,%rsp
  0x000000011d7a992c:   mov    0xc(%rsi),%ebx               ; implicit exception: dispatches to 0x000000011d7a9bac
  0x000000011d7a992f:   test   %ebx,%ebx
  0x000000011d7a9931:   jbe    0x000000011d7a9b94
  0x000000011d7a9937:   mov    %ebx,%r8d
  0x000000011d7a993a:   dec    %r8d
  0x000000011d7a993d:   data16 xchg %ax,%ax
  0x000000011d7a9940:   cmp    %ebx,%r8d
  0x000000011d7a9943:   jae    0x000000011d7a9b98
  0x000000011d7a9949:   mov    %ebx,%r9d
  0x000000011d7a994c:   add    $0xfffffffd,%r9d
  0x000000011d7a9950:   mov    $0x80000000,%r11d
  0x000000011d7a9956:   cmp    %r9d,%r8d
  0x000000011d7a9959:   cmovl  %r11d,%r9d
  0x000000011d7a995d:   movabs $0xcfcfcfcfcfcfcfd0,%r10
  0x000000011d7a9967:   add    0x10(%rsi),%r10
  0x000000011d7a996b:   imul   $0xa01,%r10,%r10
  0x000000011d7a9972:   mov    %r10,%rdi
  0x000000011d7a9975:   shr    $0x8,%rdi
  0x000000011d7a9979:   sar    $0x8,%r10
  0x000000011d7a997d:   shr    $0x10,%r10
  0x000000011d7a9981:   mov    $0x1,%ecx
  0x000000011d7a9986:   movabs $0xff000000ff,%r11
  0x000000011d7a9990:   and    %r11,%rdi
  0x000000011d7a9993:   and    %r11,%r10
  0x000000011d7a9996:   movabs $0x271000000001,%r8
  0x000000011d7a99a0:   imul   %r8,%r10
  0x000000011d7a99a4:   movabs $0xf424000000064,%rbp
  0x000000011d7a99ae:   imul   %rbp,%rdi
  0x000000011d7a99b2:   add    %rdi,%r10
  0x000000011d7a99b5:   shr    $0x20,%r10
  0x000000011d7a99b9:   mov    %r10d,%edx
  0x000000011d7a99bc:   nopl   0x0(%rax)
  0x000000011d7a99c0:   cmp    $0x1,%r9d
  0x000000011d7a99c4:   jle    0x000000011d7a9b32
  0x000000011d7a99ca:   jmp    0x000000011d7a99d5
  0x000000011d7a99cc:   vmovq  %xmm0,%rsi
  0x000000011d7a99d1:   vmovd  %xmm2,%ebx
  0x000000011d7a99d5:   mov    %r9d,%edi
  0x000000011d7a99d8:   sub    %ecx,%edi
  0x000000011d7a99da:   xor    %eax,%eax
  0x000000011d7a99dc:   cmp    %ecx,%r9d
  0x000000011d7a99df:   cmovl  %eax,%edi
  0x000000011d7a99e2:   cmp    $0xfa0,%edi
  0x000000011d7a99e8:   mov    $0xfa0,%r10d
  0x000000011d7a99ee:   cmova  %r10d,%edi
  0x000000011d7a99f2:   add    %ecx,%edi
  0x000000011d7a99f4:   vmovq  %rsi,%xmm0
  0x000000011d7a99f9:   vmovd  %ebx,%xmm2
  0x000000011d7a99fd:   data16 xchg %ax,%ax
  0x000000011d7a9a00:   movabs $0xcfcfcfcfcfcfcfd0,%r10
  0x000000011d7a9a0a:   vmovq  %xmm0,%rbx
  0x000000011d7a9a0f:   add    0x28(%rbx,%rcx,8),%r10
  0x000000011d7a9a14:   movabs $0xcfcfcfcfcfcfcfd0,%rsi
  0x000000011d7a9a1e:   add    0x20(%rbx,%rcx,8),%rsi
  0x000000011d7a9a23:   movabs $0xcfcfcfcfcfcfcfd0,%rax
  0x000000011d7a9a2d:   add    0x18(%rbx,%rcx,8),%rax
  0x000000011d7a9a32:   movabs $0xcfcfcfcfcfcfcfd0,%rbx
  0x000000011d7a9a3c:   vmovq  %xmm0,%r13
  0x000000011d7a9a41:   add    0x10(%r13,%rcx,8),%rbx
  0x000000011d7a9a46:   imul   $0xa01,%r10,%r10
  0x000000011d7a9a4d:   imul   $0xa01,%rbx,%rbx
  0x000000011d7a9a54:   mov    %r10,%r13
  0x000000011d7a9a57:   sar    $0x8,%r13
  0x000000011d7a9a5b:   mov    %rbx,%r14
  0x000000011d7a9a5e:   sar    $0x8,%r14
  0x000000011d7a9a62:   shr    $0x10,%r13
  0x000000011d7a9a66:   and    %r11,%r13
  0x000000011d7a9a69:   imul   %r8,%r13
  0x000000011d7a9a6d:   shr    $0x10,%r14
  0x000000011d7a9a71:   and    %r11,%r14
  0x000000011d7a9a74:   imul   %r8,%r14
  0x000000011d7a9a78:   shr    $0x8,%rbx
  0x000000011d7a9a7c:   and    %r11,%rbx
  0x000000011d7a9a7f:   imul   %rbp,%rbx
  0x000000011d7a9a83:   add    %rbx,%r14
  0x000000011d7a9a86:   shr    $0x8,%r10
  0x000000011d7a9a8a:   and    %r11,%r10
  0x000000011d7a9a8d:   imul   %rbp,%r10
  0x000000011d7a9a91:   add    %r10,%r13
  0x000000011d7a9a94:   shr    $0x20,%r14
  0x000000011d7a9a98:   shr    $0x20,%r13
  0x000000011d7a9a9c:   mov    %r14d,%ebx
  0x000000011d7a9a9f:   add    %ebx,%edx
  0x000000011d7a9aa1:   mov    %r13d,%r10d
  0x000000011d7a9aa4:   imul   $0xa01,%rax,%rax
  0x000000011d7a9aab:   imul   $0xa01,%rsi,%rbx
  0x000000011d7a9ab2:   mov    %rax,%r13
  0x000000011d7a9ab5:   sar    $0x8,%r13
  0x000000011d7a9ab9:   mov    %rbx,%rsi
  0x000000011d7a9abc:   sar    $0x8,%rsi
  0x000000011d7a9ac0:   shr    $0x10,%r13
  0x000000011d7a9ac4:   and    %r11,%r13
  0x000000011d7a9ac7:   imul   %r8,%r13
  0x000000011d7a9acb:   shr    $0x10,%rsi
  0x000000011d7a9acf:   and    %r11,%rsi
  0x000000011d7a9ad2:   imul   %r8,%rsi
  0x000000011d7a9ad6:   shr    $0x8,%rbx
  0x000000011d7a9ada:   and    %r11,%rbx
  0x000000011d7a9add:   imul   %rbp,%rbx
  0x000000011d7a9ae1:   add    %rbx,%rsi
  0x000000011d7a9ae4:   shr    $0x8,%rax
  0x000000011d7a9ae8:   and    %r11,%rax
  0x000000011d7a9aeb:   imul   %rbp,%rax
  0x000000011d7a9aef:   add    %rax,%r13
  0x000000011d7a9af2:   shr    $0x20,%rsi
  0x000000011d7a9af6:   shr    $0x20,%r13
  0x000000011d7a9afa:   mov    %esi,%esi
  0x000000011d7a9afc:   mov    %r13d,%ebx
  0x000000011d7a9aff:   add    %ebx,%edx
  0x000000011d7a9b01:   add    %esi,%edx
  0x000000011d7a9b03:   add    %r10d,%edx
  0x000000011d7a9b06:   add    $0x4,%ecx
  0x000000011d7a9b09:   cmp    %edi,%ecx
  0x000000011d7a9b0b:   jl     0x000000011d7a9a00
  0x000000011d7a9b11:   mov    0x348(%r15),%r10             ; ImmutableOopMap {xmm0=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@33 (line 120)
  0x000000011d7a9b18:   test   %eax,(%r10)                  ;   {poll}
  0x000000011d7a9b1b:   nopl   0x0(%rax,%rax,1)
  0x000000011d7a9b20:   cmp    %r9d,%ecx
  0x000000011d7a9b23:   jl     0x000000011d7a99cc
  0x000000011d7a9b29:   vmovq  %xmm0,%rsi
  0x000000011d7a9b2e:   vmovd  %xmm2,%ebx
  0x000000011d7a9b32:   cmp    %ebx,%ecx
  0x000000011d7a9b34:   jge    0x000000011d7a9b7e
  0x000000011d7a9b36:   xchg   %ax,%ax
  0x000000011d7a9b38:   movabs $0xcfcfcfcfcfcfcfd0,%r10
  0x000000011d7a9b42:   add    0x10(%rsi,%rcx,8),%r10
  0x000000011d7a9b47:   imul   $0xa01,%r10,%r10
  0x000000011d7a9b4e:   mov    %r10,%r9
  0x000000011d7a9b51:   shr    $0x8,%r9
  0x000000011d7a9b55:   and    %r11,%r9
  0x000000011d7a9b58:   imul   %rbp,%r9
  0x000000011d7a9b5c:   sar    $0x8,%r10
  0x000000011d7a9b60:   shr    $0x10,%r10
  0x000000011d7a9b64:   and    %r11,%r10
  0x000000011d7a9b67:   imul   %r8,%r10
  0x000000011d7a9b6b:   add    %r9,%r10
  0x000000011d7a9b6e:   shr    $0x20,%r10
  0x000000011d7a9b72:   mov    %r10d,%r10d
  0x000000011d7a9b75:   add    %r10d,%edx
  0x000000011d7a9b78:   inc    %ecx
  0x000000011d7a9b7a:   cmp    %ebx,%ecx
  0x000000011d7a9b7c:   jl     0x000000011d7a9b38
  0x000000011d7a9b7e:   movslq %edx,%rax
  0x000000011d7a9b81:   add    $0x20,%rsp
  0x000000011d7a9b85:   pop    %rbp
  0x000000011d7a9b86:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x000000011d7a9b8d:   ja     0x000000011d7a9bb8
  0x000000011d7a9b93:   retq   
  0x000000011d7a9b94:   xor    %edx,%edx
  0x000000011d7a9b96:   jmp    0x000000011d7a9b7e
  0x000000011d7a9b98:   mov    %rsi,%rbp
  0x000000011d7a9b9b:   mov    %ebx,0x4(%rsp)
  0x000000011d7a9b9f:   mov    $0xffffff76,%esi
  0x000000011d7a9ba4:   data16 xchg %ax,%ax
  0x000000011d7a9ba7:   callq  0x0000000115cdc000           ; ImmutableOopMap {rbp=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@13 (line 120)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x000000011d7a9bac:   mov    $0xfffffff6,%esi
  0x000000011d7a9bb1:   xchg   %ax,%ax
  0x000000011d7a9bb3:   callq  0x0000000115cdc000           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheckAlgos::tryToParseEightDigits10InLoop@5 (line 120)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x000000011d7a9bb8:   movabs $0x11d7a9b86,%r10            ;   {internal_word}
  0x000000011d7a9bc2:   mov    %r10,0x358(%r15)
  0x000000011d7a9bc9:   jmpq   0x0000000115cdd100           ;   {runtime_call SafepointBlob}
  0x000000011d7a9bce:   hlt    
  0x000000011d7a9bcf:   hlt    
  0x000000011d7a9bd0:   hlt    
  0x000000011d7a9bd1:   hlt    
  0x000000011d7a9bd2:   hlt    
  0x000000011d7a9bd3:   hlt    
  0x000000011d7a9bd4:   hlt    
  0x000000011d7a9bd5:   hlt    
  0x000000011d7a9bd6:   hlt    
  0x000000011d7a9bd7:   hlt    
  0x000000011d7a9bd8:   hlt    
  0x000000011d7a9bd9:   hlt    
  0x000000011d7a9bda:   hlt    
  0x000000011d7a9bdb:   hlt    
  0x000000011d7a9bdc:   hlt    
  0x000000011d7a9bdd:   hlt    
  0x000000011d7a9bde:   hlt    
  0x000000011d7a9bdf:   hlt    
[Exception Handler]
  0x000000011d7a9be0:   jmpq   0x0000000115ceeb00           ;   {no_reloc}
[Deopt Handler Code]
  0x000000011d7a9be5:   callq  0x000000011d7a9bea
  0x000000011d7a9bea:   subq   $0x5,(%rsp)
  0x000000011d7a9bef:   jmpq   0x0000000115cdc3a0           ;   {runtime_call DeoptimizationBlob}
  0x000000011d7a9bf4:   hlt    
  0x000000011d7a9bf5:   hlt    
  0x000000011d7a9bf6:   hlt    
  0x000000011d7a9bf7:   hlt    
--------------------------------------------------------------------------------
1732.029 ns/op
Iteration   1: 1698.361 ns/op


Result "ch.randelshofer.fastdoubleparser.EightDigitsJmhWithoutCheck.m13Swar10FromLongInLoop":
  1698.361 ns/op


# Run complete. Total time: 00:02:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt     Score   Error  Units
EightDigitsJmhWithoutCheck.m01SwarChainedFromLong        avgt          2.349          ns/op
EightDigitsJmhWithoutCheck.m02Swar11FromLong             avgt          2.320          ns/op
EightDigitsJmhWithoutCheck.m03Swar10FromLong             avgt          2.258          ns/op
EightDigitsJmhWithoutCheck.m11SwarChainedFromLongInLoop  avgt       1321.626          ns/op
EightDigitsJmhWithoutCheck.m12Swar11FromLongInLoop       avgt       1792.160          ns/op
EightDigitsJmhWithoutCheck.m13Swar10FromLongInLoop       avgt       1698.361          ns/op

Process finished with exit code 0
