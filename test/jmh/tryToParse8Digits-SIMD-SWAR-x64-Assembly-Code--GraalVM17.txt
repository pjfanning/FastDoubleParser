GRAALVM

/Library/Java/JavaVirtualMachines/graalvm-ce-java17-21.3.0/Contents/Home/bin/java -Dvisualvm.id=32285147673047 -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:PrintAssemblyOptions=intel -XX:CompileCommand=print,*FastDoubleParser*.tryToParseEightDigits* -javaagent:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar=51146:/Applications/IntelliJ IDEA CE.app/Contents/bin -Dfile.encoding=UTF-8 -classpath /Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/jmh-core-1.28.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/jopt-simple-4.6.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/commons-math3-3.2.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/jmh-generator-annprocess-1.28.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-jupiter-5.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-jupiter-api-5.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/apiguardian-api-1.1.0.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/opentest4j-1.2.0.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-platform-commons-1.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-jupiter-params-5.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-jupiter-engine-5.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-platform-engine-1.7.1.jar -p /Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/out/production/FastDoubleParser:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/out/production/FastDoubleParserDemo -m ch.randelshofer.fastdoubleparserdemo/ch.randelshofer.fastdoubleparserdemo.Main
CompileCommand: print *FastDoubleParser*.tryToParseEightDigits* bool print = true
WARNING: Using incubator modules: jdk.incubator.vector
Intel(R) Core(TM) i7-8700B CPU @ 3.20GHz SIMD-256
x86_64, Mac OS X, 12.1, 12
OpenJDK 64-Bit Server VM, GraalVM Community, 17.0.1+12-jvmci-21.3-b05
-XX:ThreadPriorityPolicy=1, -XX:+UnlockExperimentalVMOptions, -XX:+EnableJVMCIProduct, -XX:-UnlockExperimentalVMOptions, -XX:+UnlockExperimentalVMOptions, -XX:+UnlockDiagnosticVMOptions, -XX:PrintAssemblyOptions=intel, -XX:CompileCommand=print,*FastDoubleParser*.tryToParseEightDigits*

parsing random numbers in the range [0,1)

============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)  552       3       ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigits (6 bytes)
 total in heap  [0x000000010e05be10,0x000000010e05c130] = 800
 relocation     [0x000000010e05bf70,0x000000010e05bfa8] = 56
 main code      [0x000000010e05bfc0,0x000000010e05c080] = 192
 stub code      [0x000000010e05c080,0x000000010e05c0c0] = 64
 oops           [0x000000010e05c0c0,0x000000010e05c0c8] = 8
 metadata       [0x000000010e05c0c8,0x000000010e05c0d0] = 8
 scopes data    [0x000000010e05c0d0,0x000000010e05c0e8] = 24
 scopes pcs     [0x000000010e05c0e8,0x000000010e05c128] = 64
 dependencies   [0x000000010e05c128,0x000000010e05c130] = 8

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000102433340} 'tryToParseEightDigits' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray'
  # parm0:    rsi:rsi   = '[B'
  # parm1:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  0x000000010e05bfc0:   mov    DWORD PTR [rsp-0x14000],eax
  0x000000010e05bfc7:   push   rbp
  0x000000010e05bfc8:   sub    rsp,0x30
  0x000000010e05bfcc:   movabs rdi,0x10242fe68              ;   {metadata(method data for {method} {0x0000000102433340} 'tryToParseEightDigits' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x000000010e05bfd6:   mov    ebx,DWORD PTR [rdi+0xac]
  0x000000010e05bfdc:   add    ebx,0x2
  0x000000010e05bfdf:   mov    DWORD PTR [rdi+0xac],ebx
  0x000000010e05bfe5:   and    ebx,0x7fe
  0x000000010e05bfeb:   cmp    ebx,0x0
  0x000000010e05bfee:   je     0x000000010e05c01f
  0x000000010e05bff4:   movabs rdi,0x10242fe68              ;   {metadata(method data for {method} {0x0000000102433340} 'tryToParseEightDigits' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x000000010e05bffe:   add    QWORD PTR [rdi+0xf0],0x1
  0x000000010e05c006:   nop
  0x000000010e05c007:   call   0x000000010da2a080           ; ImmutableOopMap {}
                                                            ;*invokestatic tryToParseEightDigitsSwarIndependentMultiplications {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigits@2 (line 608)
                                                            ;   {static_call}
  0x000000010e05c00c:   add    rsp,0x30
  0x000000010e05c010:   pop    rbp
  0x000000010e05c011:   cmp    rsp,QWORD PTR [r15+0x340]    ;   {poll_return}
  0x000000010e05c018:   ja     0x000000010e05c03d
  0x000000010e05c01e:   ret
  0x000000010e05c01f:   movabs r10,0x102433340              ;   {metadata({method} {0x0000000102433340} 'tryToParseEightDigits' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x000000010e05c029:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e05c02e:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e05c036:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigits@-1 (line 608)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e05c03b:   jmp    0x000000010e05bff4
  0x000000010e05c03d:   movabs r10,0x10e05c011              ;   {internal_word}
  0x000000010e05c047:   mov    QWORD PTR [r15+0x358],r10
  0x000000010e05c04e:   jmp    0x000000010da30100           ;   {runtime_call SafepointBlob}
  0x000000010e05c053:   nop
  0x000000010e05c054:   nop
  0x000000010e05c055:   mov    rax,QWORD PTR [r15+0x3d0]
  0x000000010e05c05c:   mov    QWORD PTR [r15+0x3d0],0x0
  0x000000010e05c067:   mov    QWORD PTR [r15+0x3d8],0x0
  0x000000010e05c072:   add    rsp,0x30
  0x000000010e05c076:   pop    rbp
  0x000000010e05c077:   jmp    0x000000010dacf000           ;   {runtime_call unwind_exception Runtime1 stub}
  0x000000010e05c07c:   hlt
  0x000000010e05c07d:   hlt
  0x000000010e05c07e:   hlt
  0x000000010e05c07f:   hlt
[Stub Code]
  0x000000010e05c080:   nop    DWORD PTR [rax+rax*1+0x0]    ;   {no_reloc}
  0x000000010e05c085:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e05c08f:   jmp    0x000000010e05c08f           ;   {runtime_call const_jargs+-25849953}
[Exception Handler]
  0x000000010e05c094:   call   0x000000010dad2900           ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x000000010e05c099:   movabs rdi,0x1034ff512              ;   {external_word}
  0x000000010e05c0a3:   and    rsp,0xfffffffffffffff0
  0x000000010e05c0a7:   call   0x00000001031a1790           ;   {runtime_call _ZN14MacroAssembler7debug64EPcxPx}
  0x000000010e05c0ac:   hlt
[Deopt Handler Code]
  0x000000010e05c0ad:   movabs r10,0x10e05c0ad              ;   {section_word}
  0x000000010e05c0b7:   push   r10
  0x000000010e05c0b9:   jmp    0x000000010da2f020           ;   {runtime_call DeoptimizationBlob}
  0x000000010e05c0be:   hlt
  0x000000010e05c0bf:   hlt
--------------------------------------------------------------------------------
[/Disassembly]

============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)  553       3       ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications (86 bytes)
 total in heap  [0x000000010e05ee90,0x000000010e05fbc8] = 3384
 relocation     [0x000000010e05eff0,0x000000010e05f0a0] = 176
 main code      [0x000000010e05f0a0,0x000000010e05f8c0] = 2080
 stub code      [0x000000010e05f8c0,0x000000010e05f910] = 80
 oops           [0x000000010e05f910,0x000000010e05f940] = 48
 metadata       [0x000000010e05f940,0x000000010e05f988] = 72
 scopes data    [0x000000010e05f988,0x000000010e05fab8] = 304
 scopes pcs     [0x000000010e05fab8,0x000000010e05fba8] = 240
 dependencies   [0x000000010e05fba8,0x000000010e05fbb0] = 8
 nul chk table  [0x000000010e05fbb0,0x000000010e05fbc8] = 24

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000102433478} 'tryToParseEightDigitsSwarIndependentMultiplications' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray'
  # parm0:    rsi:rsi   = '[B'
  # parm1:    rdx       = int
  #           [sp+0x100]  (sp of caller)
  0x000000010e05f0a0:   mov    DWORD PTR [rsp-0x14000],eax
  0x000000010e05f0a7:   push   rbp
  0x000000010e05f0a8:   sub    rsp,0xf0
  0x000000010e05f0af:   movabs rcx,0x102434a70              ;   {metadata(method data for {method} {0x0000000102433478} 'tryToParseEightDigitsSwarIndependentMultiplications' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x000000010e05f0b9:   mov    r8d,DWORD PTR [rcx+0xac]
  0x000000010e05f0c0:   add    r8d,0x2
  0x000000010e05f0c4:   mov    DWORD PTR [rcx+0xac],r8d
  0x000000010e05f0cb:   and    r8d,0x7fe
  0x000000010e05f0d2:   cmp    r8d,0x0
  0x000000010e05f0d6:   je     0x000000010e05f724
  0x000000010e05f0dc:   movabs rcx,0x102434a70              ;   {metadata(method data for {method} {0x0000000102433478} 'tryToParseEightDigitsSwarIndependentMultiplications' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x000000010e05f0e6:   add    QWORD PTR [rcx+0xf0],0x1
  0x000000010e05f0ee:   movabs rcx,0x1022b3fc8              ;   {metadata(method data for {method} {0x000000080038fd30} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x000000010e05f0f8:   mov    r8d,DWORD PTR [rcx+0xac]
  0x000000010e05f0ff:   add    r8d,0x2
  0x000000010e05f103:   mov    DWORD PTR [rcx+0xac],r8d
  0x000000010e05f10a:   and    r8d,0x1ffffe
  0x000000010e05f111:   cmp    r8d,0x0
  0x000000010e05f115:   je     0x000000010e05f745
  0x000000010e05f11b:   movabs rcx,0x61f154030              ;   {oop(a 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle'{0x000000061f154030})}
  0x000000010e05f125:   movabs r8,0x1022b3fc8               ;   {metadata(method data for {method} {0x000000080038fd30} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x000000010e05f12f:   add    QWORD PTR [r8+0xf0],0x1
  0x000000010e05f137:   movabs rcx,0x1022b3100              ;   {metadata(method data for {method} {0x00000008000cd868} 'checkExactAccessMode' '(Ljava/lang/invoke/VarHandle$AccessDescriptor;)V' in 'java/lang/invoke/VarHandle')}
  0x000000010e05f141:   mov    r8d,DWORD PTR [rcx+0xac]
  0x000000010e05f148:   add    r8d,0x2
  0x000000010e05f14c:   mov    DWORD PTR [rcx+0xac],r8d
  0x000000010e05f153:   and    r8d,0x1ffffe
  0x000000010e05f15a:   cmp    r8d,0x0
  0x000000010e05f15e:   je     0x000000010e05f766
  0x000000010e05f164:   movabs rcx,0x1022b3100              ;   {metadata(method data for {method} {0x00000008000cd868} 'checkExactAccessMode' '(Ljava/lang/invoke/VarHandle$AccessDescriptor;)V' in 'java/lang/invoke/VarHandle')}
  0x000000010e05f16e:   inc    DWORD PTR [rcx+0xf0]
  0x000000010e05f174:   movabs rcx,0x61f154030              ;   {oop(a 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle'{0x000000061f154030})}
  0x000000010e05f17e:   movabs r8,0x1022b3fc8               ;   {metadata(method data for {method} {0x000000080038fd30} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x000000010e05f188:   mov    ecx,DWORD PTR [rcx+0x8]
  0x000000010e05f18b:   movabs r10,0x800000000
  0x000000010e05f195:   add    rcx,r10
  0x000000010e05f198:   cmp    rcx,QWORD PTR [r8+0x198]
  0x000000010e05f19f:   jne    0x000000010e05f1ae
  0x000000010e05f1a1:   add    QWORD PTR [r8+0x1a0],0x1
  0x000000010e05f1a9:   jmp    0x000000010e05f370
  0x000000010e05f1ae:   cmp    rcx,QWORD PTR [r8+0x1a8]
  0x000000010e05f1b5:   jne    0x000000010e05f1c4
  0x000000010e05f1b7:   add    QWORD PTR [r8+0x1b0],0x1
  0x000000010e05f1bf:   jmp    0x000000010e05f370
  0x000000010e05f1c4:   cmp    rcx,QWORD PTR [r8+0x1b8]
  0x000000010e05f1cb:   jne    0x000000010e05f1da
  0x000000010e05f1cd:   add    QWORD PTR [r8+0x1c0],0x1
  0x000000010e05f1d5:   jmp    0x000000010e05f370
  0x000000010e05f1da:   cmp    rcx,QWORD PTR [r8+0x1c8]
  0x000000010e05f1e1:   jne    0x000000010e05f1f0
  0x000000010e05f1e3:   add    QWORD PTR [r8+0x1d0],0x1
  0x000000010e05f1eb:   jmp    0x000000010e05f370
  0x000000010e05f1f0:   cmp    rcx,QWORD PTR [r8+0x1d8]
  0x000000010e05f1f7:   jne    0x000000010e05f206
  0x000000010e05f1f9:   add    QWORD PTR [r8+0x1e0],0x1
  0x000000010e05f201:   jmp    0x000000010e05f370
  0x000000010e05f206:   cmp    rcx,QWORD PTR [r8+0x1e8]
  0x000000010e05f20d:   jne    0x000000010e05f21c
  0x000000010e05f20f:   add    QWORD PTR [r8+0x1f0],0x1
  0x000000010e05f217:   jmp    0x000000010e05f370
  0x000000010e05f21c:   cmp    rcx,QWORD PTR [r8+0x1f8]
  0x000000010e05f223:   jne    0x000000010e05f232
  0x000000010e05f225:   add    QWORD PTR [r8+0x200],0x1
  0x000000010e05f22d:   jmp    0x000000010e05f370
  0x000000010e05f232:   cmp    rcx,QWORD PTR [r8+0x208]
  0x000000010e05f239:   jne    0x000000010e05f248
  0x000000010e05f23b:   add    QWORD PTR [r8+0x210],0x1
  0x000000010e05f243:   jmp    0x000000010e05f370
  0x000000010e05f248:   cmp    QWORD PTR [r8+0x198],0x0
  0x000000010e05f253:   jne    0x000000010e05f26c
  0x000000010e05f255:   mov    QWORD PTR [r8+0x198],rcx
  0x000000010e05f25c:   mov    QWORD PTR [r8+0x1a0],0x1
  0x000000010e05f267:   jmp    0x000000010e05f370
  0x000000010e05f26c:   cmp    QWORD PTR [r8+0x1a8],0x0
  0x000000010e05f277:   jne    0x000000010e05f290
  0x000000010e05f279:   mov    QWORD PTR [r8+0x1a8],rcx
  0x000000010e05f280:   mov    QWORD PTR [r8+0x1b0],0x1
  0x000000010e05f28b:   jmp    0x000000010e05f370
  0x000000010e05f290:   cmp    QWORD PTR [r8+0x1b8],0x0
  0x000000010e05f29b:   jne    0x000000010e05f2b4
  0x000000010e05f29d:   mov    QWORD PTR [r8+0x1b8],rcx
  0x000000010e05f2a4:   mov    QWORD PTR [r8+0x1c0],0x1
  0x000000010e05f2af:   jmp    0x000000010e05f370
  0x000000010e05f2b4:   cmp    QWORD PTR [r8+0x1c8],0x0
  0x000000010e05f2bf:   jne    0x000000010e05f2d8
  0x000000010e05f2c1:   mov    QWORD PTR [r8+0x1c8],rcx
  0x000000010e05f2c8:   mov    QWORD PTR [r8+0x1d0],0x1
  0x000000010e05f2d3:   jmp    0x000000010e05f370
  0x000000010e05f2d8:   cmp    QWORD PTR [r8+0x1d8],0x0
  0x000000010e05f2e3:   jne    0x000000010e05f2fc
  0x000000010e05f2e5:   mov    QWORD PTR [r8+0x1d8],rcx
  0x000000010e05f2ec:   mov    QWORD PTR [r8+0x1e0],0x1
  0x000000010e05f2f7:   jmp    0x000000010e05f370
  0x000000010e05f2fc:   cmp    QWORD PTR [r8+0x1e8],0x0
  0x000000010e05f307:   jne    0x000000010e05f320
  0x000000010e05f309:   mov    QWORD PTR [r8+0x1e8],rcx
  0x000000010e05f310:   mov    QWORD PTR [r8+0x1f0],0x1
  0x000000010e05f31b:   jmp    0x000000010e05f370
  0x000000010e05f320:   cmp    QWORD PTR [r8+0x1f8],0x0
  0x000000010e05f32b:   jne    0x000000010e05f344
  0x000000010e05f32d:   mov    QWORD PTR [r8+0x1f8],rcx
  0x000000010e05f334:   mov    QWORD PTR [r8+0x200],0x1
  0x000000010e05f33f:   jmp    0x000000010e05f370
  0x000000010e05f344:   cmp    QWORD PTR [r8+0x208],0x0
  0x000000010e05f34f:   jne    0x000000010e05f368
  0x000000010e05f351:   mov    QWORD PTR [r8+0x208],rcx
  0x000000010e05f358:   mov    QWORD PTR [r8+0x210],0x1
  0x000000010e05f363:   jmp    0x000000010e05f370
  0x000000010e05f368:   add    QWORD PTR [r8+0x188],0x1
  0x000000010e05f370:   movabs rcx,0x1022b4580              ;   {metadata(method data for {method} {0x00000008000c6d90} 'isDirect' '()Z' in 'java/lang/invoke/VarHandle')}
  0x000000010e05f37a:   mov    r8d,DWORD PTR [rcx+0xac]
  0x000000010e05f381:   add    r8d,0x2
  0x000000010e05f385:   mov    DWORD PTR [rcx+0xac],r8d
  0x000000010e05f38c:   and    r8d,0x1ffffe
  0x000000010e05f393:   cmp    r8d,0x0
  0x000000010e05f397:   je     0x000000010e05f787
  0x000000010e05f39d:   movabs rcx,0x1022b3fc8              ;   {metadata(method data for {method} {0x000000080038fd30} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x000000010e05f3a7:   inc    DWORD PTR [rcx+0x230]
  0x000000010e05f3ad:   movabs rcx,0x1022b3fc8              ;   {metadata(method data for {method} {0x000000080038fd30} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x000000010e05f3b7:   inc    DWORD PTR [rcx+0x250]
  0x000000010e05f3bd:   movabs rcx,0x61f153970              ;   {oop(a 'java/lang/invoke/VarForm'{0x000000061f153970})}
  0x000000010e05f3c7:   mov    r8,rcx
  0x000000010e05f3ca:   movabs rdi,0x1022b3fc8              ;   {metadata(method data for {method} {0x000000080038fd30} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x000000010e05f3d4:   add    QWORD PTR [rdi+0x260],0x1
  0x000000010e05f3dc:   movabs r8,0x1022b3bf8               ;   {metadata(method data for {method} {0x0000000800093038} 'getMemberName' '(I)Ljava/lang/invoke/MemberName;' in 'java/lang/invoke/VarForm')}
  0x000000010e05f3e6:   mov    edi,DWORD PTR [r8+0xac]
  0x000000010e05f3ed:   add    edi,0x2
  0x000000010e05f3f0:   mov    DWORD PTR [r8+0xac],edi
  0x000000010e05f3f7:   and    edi,0x1ffffe
  0x000000010e05f3fd:   cmp    edi,0x0
  0x000000010e05f400:   je     0x000000010e05f7a8
  0x000000010e05f406:   movabs r8,0x1022b3bf8               ;   {metadata(method data for {method} {0x0000000800093038} 'getMemberName' '(I)Ljava/lang/invoke/MemberName;' in 'java/lang/invoke/VarForm')}
  0x000000010e05f410:   add    QWORD PTR [r8+0xf0],0x1
  0x000000010e05f418:   movabs rcx,0x1022b3de8              ;   {metadata(method data for {method} {0x0000000800092fe0} 'getMemberNameOrNull' '(I)Ljava/lang/invoke/MemberName;' in 'java/lang/invoke/VarForm')}
  0x000000010e05f422:   mov    r8d,DWORD PTR [rcx+0xac]
  0x000000010e05f429:   add    r8d,0x2
  0x000000010e05f42d:   mov    DWORD PTR [rcx+0xac],r8d
  0x000000010e05f434:   and    r8d,0x1ffffe
  0x000000010e05f43b:   cmp    r8d,0x0
  0x000000010e05f43f:   je     0x000000010e05f7c9
  0x000000010e05f445:   movabs rcx,0x1022b3de8              ;   {metadata(method data for {method} {0x0000000800092fe0} 'getMemberNameOrNull' '(I)Ljava/lang/invoke/MemberName;' in 'java/lang/invoke/VarForm')}
  0x000000010e05f44f:   inc    DWORD PTR [rcx+0xf0]
  0x000000010e05f455:   movabs rcx,0x1022b3bf8              ;   {metadata(method data for {method} {0x0000000800093038} 'getMemberName' '(I)Ljava/lang/invoke/MemberName;' in 'java/lang/invoke/VarForm')}
  0x000000010e05f45f:   inc    DWORD PTR [rcx+0x188]
  0x000000010e05f465:   movabs rcx,0x1022b3fc8              ;   {metadata(method data for {method} {0x000000080038fd30} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x000000010e05f46f:   add    QWORD PTR [rcx+0x2f8],0x1
  0x000000010e05f477:   movabs rcx,0x1022b4688              ;   {metadata(method data for {method} {0x000000010223c7e0} 'get' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;I)J' in 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle')}
  0x000000010e05f481:   mov    r8d,DWORD PTR [rcx+0xac]
  0x000000010e05f488:   add    r8d,0x2
  0x000000010e05f48c:   mov    DWORD PTR [rcx+0xac],r8d
  0x000000010e05f493:   and    r8d,0x1ffffe
  0x000000010e05f49a:   cmp    r8d,0x0
  0x000000010e05f49e:   je     0x000000010e05f7ea
  0x000000010e05f4a4:   movabs rcx,0x1022b4688              ;   {metadata(method data for {method} {0x000000010223c7e0} 'get' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;I)J' in 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle')}
  0x000000010e05f4ae:   add    QWORD PTR [rcx+0x220],0x1
  0x000000010e05f4b6:   movabs rcx,0x1022b4990              ;   {metadata(method data for {method} {0x000000010223c5e8} 'index' '([BI)I' in 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle')}
  0x000000010e05f4c0:   mov    r8d,DWORD PTR [rcx+0xac]
  0x000000010e05f4c7:   add    r8d,0x2
  0x000000010e05f4cb:   mov    DWORD PTR [rcx+0xac],r8d
  0x000000010e05f4d2:   and    r8d,0x1ffffe
  0x000000010e05f4d9:   cmp    r8d,0x0
  0x000000010e05f4dd:   je     0x000000010e05f80b
  0x000000010e05f4e3:   mov    ecx,DWORD PTR [rsi+0xc]      ; implicit exception: dispatches to 0x000000010e05f82c
  0x000000010e05f4e6:   sub    ecx,0x7
  0x000000010e05f4e9:   movabs r8,0x1022b4990               ;   {metadata(method data for {method} {0x000000010223c5e8} 'index' '([BI)I' in 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle')}
  0x000000010e05f4f3:   add    QWORD PTR [r8+0xf0],0x1
  0x000000010e05f4fb:   movabs r8,0x1022ab908               ;   {metadata(method data for {method} {0x00000008003a44f8} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x000000010e05f505:   mov    edi,DWORD PTR [r8+0xac]
  0x000000010e05f50c:   add    edi,0x2
  0x000000010e05f50f:   mov    DWORD PTR [r8+0xac],edi
  0x000000010e05f516:   and    edi,0x1ffffe
  0x000000010e05f51c:   cmp    edi,0x0
  0x000000010e05f51f:   je     0x000000010e05f831
  0x000000010e05f525:   cmp    edx,0x0
  0x000000010e05f528:   movabs r8,0x1022ab908               ;   {metadata(method data for {method} {0x00000008003a44f8} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x000000010e05f532:   movabs rdi,0xf0
  0x000000010e05f53c:   jl     0x000000010e05f54c
  0x000000010e05f542:   movabs rdi,0x100
  0x000000010e05f54c:   mov    rbx,QWORD PTR [r8+rdi*1]
  0x000000010e05f550:   lea    rbx,[rbx+0x1]
  0x000000010e05f554:   mov    QWORD PTR [r8+rdi*1],rbx
  0x000000010e05f558:   jl     0x000000010e05f6ec
  0x000000010e05f55e:   cmp    edx,ecx
  0x000000010e05f560:   movabs r8,0x1022ab908               ;   {metadata(method data for {method} {0x00000008003a44f8} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x000000010e05f56a:   movabs rdi,0x120
  0x000000010e05f574:   jge    0x000000010e05f584
  0x000000010e05f57a:   movabs rdi,0x110
  0x000000010e05f584:   mov    rbx,QWORD PTR [r8+rdi*1]
  0x000000010e05f588:   lea    rbx,[rbx+0x1]
  0x000000010e05f58c:   mov    QWORD PTR [r8+rdi*1],rbx
  0x000000010e05f590:   jge    0x000000010e05f6ec
  0x000000010e05f596:   movabs rdi,0x61fc02968              ;   {oop(a 'jdk/internal/misc/Unsafe'{0x000000061fc02968})}
  0x000000010e05f5a0:   mov    rcx,rdi
  0x000000010e05f5a3:   movabs r8,0x1022b4688               ;   {metadata(method data for {method} {0x000000010223c7e0} 'get' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;I)J' in 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle')}
  0x000000010e05f5ad:   add    QWORD PTR [r8+0x230],0x1
  0x000000010e05f5b5:   movsxd rdx,edx
  0x000000010e05f5b8:   mov    rcx,rdx
  0x000000010e05f5bb:   movabs r10,0x10
  0x000000010e05f5c5:   add    rcx,r10
  0x000000010e05f5c8:   mov    rdx,rsi
  0x000000010e05f5cb:   mov    r8d,0x0
  0x000000010e05f5d1:   mov    rsi,rdi
  0x000000010e05f5d4:   data16 xchg ax,ax
  0x000000010e05f5d7:   call   0x000000010e05f8c5           ; ImmutableOopMap {}
                                                            ;*invokevirtual getLongUnaligned {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@32 (line 118)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {optimized virtual_call}
  0x000000010e05f5dc:   mov    rcx,rax
  0x000000010e05f5df:   movabs r10,0x3030303030303030
  0x000000010e05f5e9:   sub    rcx,r10
  0x000000010e05f5ec:   movabs r10,0x4646464646464646
  0x000000010e05f5f6:   add    rax,r10
  0x000000010e05f5f9:   or     rax,rcx
  0x000000010e05f5fc:   movabs r10,0x8080808080808080
  0x000000010e05f606:   and    rax,r10
  0x000000010e05f609:   movabs rsi,0x0
  0x000000010e05f613:   cmp    rax,rsi
  0x000000010e05f616:   movabs rax,0x102434a70              ;   {metadata(method data for {method} {0x0000000102433478} 'tryToParseEightDigitsSwarIndependentMultiplications' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x000000010e05f620:   movabs rsi,0x198
  0x000000010e05f62a:   jne    0x000000010e05f63a
  0x000000010e05f630:   movabs rsi,0x188
  0x000000010e05f63a:   mov    rdx,QWORD PTR [rax+rsi*1]
  0x000000010e05f63e:   lea    rdx,[rdx+0x1]
  0x000000010e05f642:   mov    QWORD PTR [rax+rsi*1],rdx
  0x000000010e05f646:   jne    0x000000010e05f6d1
  0x000000010e05f64c:   movabs rax,0xa01
  0x000000010e05f656:   mov    rsi,rax
  0x000000010e05f659:   mov    rax,rcx
  0x000000010e05f65c:   imul   rax,rsi
  0x000000010e05f660:   mov    ecx,0x8
  0x000000010e05f665:   mov    rsi,rax
  0x000000010e05f668:   sar    rsi,cl
  0x000000010e05f66b:   movabs rdx,0xff000000ff
  0x000000010e05f675:   mov    rax,rsi
  0x000000010e05f678:   and    rax,rdx
  0x000000010e05f67b:   movabs rcx,0xf424000000064
  0x000000010e05f685:   imul   rax,rcx
  0x000000010e05f689:   mov    rdi,rax
  0x000000010e05f68c:   mov    ecx,0x10
  0x000000010e05f691:   shr    rsi,cl
  0x000000010e05f694:   and    rsi,rdx
  0x000000010e05f697:   movabs rax,0x271000000001
  0x000000010e05f6a1:   mov    rcx,rax
  0x000000010e05f6a4:   mov    rax,rsi
  0x000000010e05f6a7:   imul   rax,rcx
  0x000000010e05f6ab:   add    rdi,rax
  0x000000010e05f6ae:   mov    ecx,0x20
  0x000000010e05f6b3:   shr    rdi,cl
  0x000000010e05f6b6:   mov    edi,edi
  0x000000010e05f6b8:   mov    rax,rdi
  0x000000010e05f6bb:   add    rsp,0xf0
  0x000000010e05f6c2:   pop    rbp
  0x000000010e05f6c3:   cmp    rsp,QWORD PTR [r15+0x340]    ;   {poll_return}
  0x000000010e05f6ca:   ja     0x000000010e05f852
  0x000000010e05f6d0:   ret
  0x000000010e05f6d1:   mov    eax,0xffffffff
  0x000000010e05f6d6:   add    rsp,0xf0
  0x000000010e05f6dd:   pop    rbp
  0x000000010e05f6de:   cmp    rsp,QWORD PTR [r15+0x340]    ;   {poll_return}
  0x000000010e05f6e5:   ja     0x000000010e05f868
  0x000000010e05f6eb:   ret
  0x000000010e05f6ec:   mov    QWORD PTR [rsp+0xe0],rsi
  0x000000010e05f6f4:   movabs rdi,0x1022ab908              ;   {metadata(method data for {method} {0x00000008003a44f8} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x000000010e05f6fe:   add    QWORD PTR [rdi+0x130],0x1
  0x000000010e05f706:   movabs rdi,0x61f153960              ;   {oop(a 'jdk/internal/util/Preconditions$1'{0x000000061f153960})}
  0x000000010e05f710:   mov    rsi,rdi
  0x000000010e05f713:   nop    DWORD PTR [rax+0x0]
  0x000000010e05f717:   call   0x000000010da2a080           ; ImmutableOopMap {[224]=Oop }
                                                            ;*invokestatic outOfBoundsCheckIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.internal.util.Preconditions::checkIndex@12 (line 266)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::index@9 (line 103)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@19 (line 120)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {static_call}
  0x000000010e05f71c:   cmp    rax,QWORD PTR [rax]          ; implicit exception: dispatches to 0x000000010e05f87e
  0x000000010e05f71f:   jmp    0x000000010e05f8a2
  0x000000010e05f724:   movabs r10,0x102433478              ;   {metadata({method} {0x0000000102433478} 'tryToParseEightDigitsSwarIndependentMultiplications' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x000000010e05f72e:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e05f733:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e05f73b:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@-1 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e05f740:   jmp    0x000000010e05f0dc
  0x000000010e05f745:   movabs r10,0x80038fd30              ;   {metadata({method} {0x000000080038fd30} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x000000010e05f74f:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e05f754:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e05f75c:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@-1 (line 796)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e05f761:   jmp    0x000000010e05f11b
  0x000000010e05f766:   movabs r10,0x8000cd868              ;   {metadata({method} {0x00000008000cd868} 'checkExactAccessMode' '(Ljava/lang/invoke/VarHandle$AccessDescriptor;)V' in 'java/lang/invoke/VarHandle')}
  0x000000010e05f770:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e05f775:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e05f77d:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.VarHandle::checkExactAccessMode@-1 (line 2042)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@2 (line 796)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e05f782:   jmp    0x000000010e05f164
  0x000000010e05f787:   movabs r10,0x8000c6d90              ;   {metadata({method} {0x00000008000c6d90} 'isDirect' '()Z' in 'java/lang/invoke/VarHandle')}
  0x000000010e05f791:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e05f796:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e05f79e:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.VarHandle::isDirect@-1 (line 497)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@6 (line 797)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e05f7a3:   jmp    0x000000010e05f39d
  0x000000010e05f7a8:   movabs r10,0x800093038              ;   {metadata({method} {0x0000000800093038} 'getMemberName' '(I)Ljava/lang/invoke/MemberName;' in 'java/lang/invoke/VarForm')}
  0x000000010e05f7b2:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e05f7b7:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e05f7bf:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop rcx=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.VarForm::getMemberName@-1 (line 112)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@42 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e05f7c4:   jmp    0x000000010e05f406
  0x000000010e05f7c9:   movabs r10,0x800092fe0              ;   {metadata({method} {0x0000000800092fe0} 'getMemberNameOrNull' '(I)Ljava/lang/invoke/MemberName;' in 'java/lang/invoke/VarForm')}
  0x000000010e05f7d3:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e05f7d8:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e05f7e0:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.VarForm::getMemberNameOrNull@-1 (line 121)
                                                            ; - java.lang.invoke.VarForm::getMemberName@2 (line 112)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@42 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e05f7e5:   jmp    0x000000010e05f445
  0x000000010e05f7ea:   movabs r10,0x10223c7e0              ;   {metadata({method} {0x000000010223c7e0} 'get' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;I)J' in 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle')}
  0x000000010e05f7f4:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e05f7f9:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e05f801:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@-1 (line 116)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e05f806:   jmp    0x000000010e05f4a4
  0x000000010e05f80b:   movabs r10,0x10223c5e8              ;   {metadata({method} {0x000000010223c5e8} 'index' '([BI)I' in 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle')}
  0x000000010e05f815:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e05f81a:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e05f822:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::index@-1 (line 103)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@19 (line 120)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e05f827:   jmp    0x000000010e05f4e3
  0x000000010e05f82c:   call   0x000000010dacff20           ; ImmutableOopMap {rsi=Oop }
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::index@2 (line 103)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@19 (line 120)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e05f831:   movabs r10,0x8003a44f8              ;   {metadata({method} {0x00000008003a44f8} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x000000010e05f83b:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e05f840:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e05f848:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.internal.util.Preconditions::checkIndex@-1 (line 265)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::index@9 (line 103)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@19 (line 120)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e05f84d:   jmp    0x000000010e05f525
  0x000000010e05f852:   movabs r10,0x10e05f6c3              ;   {internal_word}
  0x000000010e05f85c:   mov    QWORD PTR [r15+0x358],r10
  0x000000010e05f863:   jmp    0x000000010da30100           ;   {runtime_call SafepointBlob}
  0x000000010e05f868:   movabs r10,0x10e05f6de              ;   {internal_word}
  0x000000010e05f872:   mov    QWORD PTR [r15+0x358],r10
  0x000000010e05f879:   jmp    0x000000010da30100           ;   {runtime_call SafepointBlob}
  0x000000010e05f87e:   call   0x000000010dacff20           ; ImmutableOopMap {[224]=Oop rax=Oop }
                                                            ;*athrow {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.internal.util.Preconditions::checkIndex@15 (line 266)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::index@9 (line 103)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@19 (line 120)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e05f883:   nop
  0x000000010e05f884:   nop
  0x000000010e05f885:   mov    rax,QWORD PTR [r15+0x3d0]
  0x000000010e05f88c:   mov    QWORD PTR [r15+0x3d0],0x0
  0x000000010e05f897:   mov    QWORD PTR [r15+0x3d8],0x0
  0x000000010e05f8a2:   add    rsp,0xf0
  0x000000010e05f8a9:   pop    rbp
  0x000000010e05f8aa:   jmp    0x000000010dacf000           ;   {runtime_call unwind_exception Runtime1 stub}
  0x000000010e05f8af:   hlt
  0x000000010e05f8b0:   hlt
  0x000000010e05f8b1:   hlt
  0x000000010e05f8b2:   hlt
  0x000000010e05f8b3:   hlt
  0x000000010e05f8b4:   hlt
  0x000000010e05f8b5:   hlt
  0x000000010e05f8b6:   hlt
  0x000000010e05f8b7:   hlt
  0x000000010e05f8b8:   hlt
  0x000000010e05f8b9:   hlt
  0x000000010e05f8ba:   hlt
  0x000000010e05f8bb:   hlt
  0x000000010e05f8bc:   hlt
  0x000000010e05f8bd:   hlt
  0x000000010e05f8be:   hlt
  0x000000010e05f8bf:   hlt
[Stub Code]
  0x000000010e05f8c0:   nop    DWORD PTR [rax+rax*1+0x0]    ;   {no_reloc}
  0x000000010e05f8c5:   movabs rbx,0x800401360              ;   {static_stub}
  0x000000010e05f8cf:   jmp    0x000000010da24f08           ;   {runtime_call I2C/C2I adapters}
  0x000000010e05f8d4:   nop
  0x000000010e05f8d5:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e05f8df:   jmp    0x000000010e05f8df           ;   {runtime_call const_jargs+-25849953}
[Exception Handler]
  0x000000010e05f8e4:   call   0x000000010dad2900           ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x000000010e05f8e9:   movabs rdi,0x1034ff512              ;   {external_word}
  0x000000010e05f8f3:   and    rsp,0xfffffffffffffff0
  0x000000010e05f8f7:   call   0x00000001031a1790           ;   {runtime_call _ZN14MacroAssembler7debug64EPcxPx}
  0x000000010e05f8fc:   hlt
[Deopt Handler Code]
  0x000000010e05f8fd:   movabs r10,0x10e05f8fd              ;   {section_word}
  0x000000010e05f907:   push   r10
  0x000000010e05f909:   jmp    0x000000010da2f020           ;   {runtime_call DeoptimizationBlob}
  0x000000010e05f90e:   hlt
  0x000000010e05f90f:   hlt
--------------------------------------------------------------------------------
[/Disassembly]
Trying to reach a confidence level of 99.8 % which only deviates by 1 % from the average measured duration.

=========================== JVMCI-compiled nmethod =============================
----------------------------------- Assembly -----------------------------------

Compiled method (JVMCI)  599       4       ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications (86 bytes)
 total in heap  [0x00000001154ec710,0x00000001154eca50] = 832
 relocation     [0x00000001154ec870,0x00000001154ec880] = 16
 main code      [0x00000001154ec880,0x00000001154ec994] = 276
 stub code      [0x00000001154ec994,0x00000001154ec998] = 4
 oops           [0x00000001154ec998,0x00000001154ec9a0] = 8
 metadata       [0x00000001154ec9a0,0x00000001154ec9b8] = 24
 scopes data    [0x00000001154ec9b8,0x00000001154ec9d8] = 32
 scopes pcs     [0x00000001154ec9d8,0x00000001154eca28] = 80
 dependencies   [0x00000001154eca28,0x00000001154eca30] = 8
 nul chk table  [0x00000001154eca30,0x00000001154eca40] = 16
 JVMCI data     [0x00000001154eca40,0x00000001154eca50] = 16

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000102433478} 'tryToParseEightDigitsSwarIndependentMultiplications' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray'
  # parm0:    rsi:rsi   = '[B'
  # parm1:    rdx       = int
  #           [sp+0x20]  (sp of caller)
  0x00000001154ec880:   mov    DWORD PTR [rsp-0x14000],eax
  0x00000001154ec887:   sub    rsp,0x18
  0x00000001154ec88b:   mov    QWORD PTR [rsp+0x10],rbp     ; ImmutableOopMap {rsi=Oop }
                                                            ;*getstatic readLongFromByteArray {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@0 (line 620)
  0x00000001154ec890:   mov    eax,DWORD PTR [rsi+0xc]      ; implicit exception: dispatches to 0x00000001154ec96c
  0x00000001154ec893:   cmp    eax,0x7
  0x00000001154ec896:   jb     0x00000001154ec950
  0x00000001154ec89c:   lea    eax,[rax-0x7]
  0x00000001154ec89f:   nop
  0x00000001154ec8a0:   cmp    eax,edx
  0x00000001154ec8a2:   jbe    0x00000001154ec950
  0x00000001154ec8a8:   mov    rax,QWORD PTR [rsi+rdx*1+0x10]
  0x00000001154ec8ad:   movabs r10,0xcfcfcfcfcfcfcfd0
  0x00000001154ec8b7:   add    r10,rax
  0x00000001154ec8ba:   movabs r11,0x4646464646464646
  0x00000001154ec8c4:   add    rax,r11
  0x00000001154ec8c7:   or     rax,r10
  0x00000001154ec8ca:   movabs r11,0x8080808080808080
  0x00000001154ec8d4:   test   rax,r11
  0x00000001154ec8d7:   jne    0x00000001154ec938
  0x00000001154ec8dd:   imul   rax,r10,0xa01
  0x00000001154ec8e4:   sar    rax,0x8
  0x00000001154ec8e8:   movabs r10,0xff000000ff
  0x00000001154ec8f2:   mov    r11,rax
  0x00000001154ec8f5:   and    r11,r10
  0x00000001154ec8f8:   movabs r8,0xf424000000064
  0x00000001154ec902:   imul   r11,r8
  0x00000001154ec906:   shr    rax,0x10
  0x00000001154ec90a:   and    rax,r10
  0x00000001154ec90d:   movabs r10,0x271000000001
  0x00000001154ec917:   imul   rax,r10
  0x00000001154ec91b:   add    r11,rax
  0x00000001154ec91e:   shr    r11,0x20
  0x00000001154ec922:   mov    eax,r11d
  0x00000001154ec925:   mov    rbp,QWORD PTR [rsp+0x10]
  0x00000001154ec92a:   add    rsp,0x18
  0x00000001154ec92e:   mov    rcx,QWORD PTR [r15+0x348]
  0x00000001154ec935:   test   DWORD PTR [rcx],eax          ;   {poll_return}
  0x00000001154ec937:   ret
  0x00000001154ec938:   mov    eax,0xffffffff
  0x00000001154ec93d:   mov    rbp,QWORD PTR [rsp+0x10]
  0x00000001154ec942:   add    rsp,0x18
  0x00000001154ec946:   mov    rcx,QWORD PTR [r15+0x348]
  0x00000001154ec94d:   test   DWORD PTR [rcx],eax          ;   {poll_return}
  0x00000001154ec94f:   ret
  0x00000001154ec950:   mov    DWORD PTR [r15+0x370],0xffffffe4
  0x00000001154ec95b:   mov    QWORD PTR [r15+0x378],0x0
  0x00000001154ec966:   call   0x000000010da2f27a           ; ImmutableOopMap {rsi=Oop }
                                                            ;*getstatic readLongFromByteArray {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@0 (line 620)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x00000001154ec96b:   nop
  0x00000001154ec96c:   mov    DWORD PTR [r15+0x370],0xfffffff5
  0x00000001154ec977:   mov    QWORD PTR [r15+0x378],0x0
  0x00000001154ec982:   call   0x000000010da2f27a           ; ImmutableOopMap {rsi=Oop }
                                                            ;*getstatic readLongFromByteArray {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@0 (line 620)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x00000001154ec987:   nop
[Exception Handler]
  0x00000001154ec988:   call   0x000000010daed380           ;   {runtime_call Stub<ExceptionHandlerStub.exceptionHandler>}
  0x00000001154ec98d:   nop
[Deopt Handler Code]
  0x00000001154ec98e:   call   0x000000010da2f020           ;   {runtime_call DeoptimizationBlob}
  0x00000001154ec993:   nop
[Stub Code]
  0x00000001154ec994:   hlt
  0x00000001154ec995:   hlt
  0x00000001154ec996:   hlt
  0x00000001154ec997:   hlt
--------------------------------------------------------------------------------
[/Disassembly]

============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)  832       2       ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd (55 bytes)
 total in heap  [0x000000010e0a4210,0x000000010e0a4fe8] = 3544
 relocation     [0x000000010e0a4370,0x000000010e0a4498] = 296
 main code      [0x000000010e0a44a0,0x000000010e0a49c0] = 1312
 stub code      [0x000000010e0a49c0,0x000000010e0a4ac0] = 256
 oops           [0x000000010e0a4ac0,0x000000010e0a4af8] = 56
 metadata       [0x000000010e0a4af8,0x000000010e0a4b90] = 152
 scopes data    [0x000000010e0a4b90,0x000000010e0a4d40] = 432
 scopes pcs     [0x000000010e0a4d40,0x000000010e0a4f70] = 560
 dependencies   [0x000000010e0a4f70,0x000000010e0a4f78] = 8
 nul chk table  [0x000000010e0a4f78,0x000000010e0a4fe8] = 112

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000102441d50} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray'
  # parm0:    rsi:rsi   = '[C'
  # parm1:    rdx       = int
  #           [sp+0x140]  (sp of caller)
  0x000000010e0a44a0:   mov    DWORD PTR [rsp-0x14000],eax
  0x000000010e0a44a7:   push   rbp
  0x000000010e0a44a8:   sub    rsp,0x130
  0x000000010e0a44af:   mov    rbx,rdx
  0x000000010e0a44b2:   movabs rcx,0x102442730
  0x000000010e0a44bc:   mov    edx,DWORD PTR [rcx+0x8]
  0x000000010e0a44bf:   add    edx,0x2
  0x000000010e0a44c2:   mov    DWORD PTR [rcx+0x8],edx
  0x000000010e0a44c5:   and    edx,0xffe
  0x000000010e0a44cb:   cmp    edx,0x0
  0x000000010e0a44ce:   je     0x000000010e0a489c
  0x000000010e0a44d4:   mov    ecx,DWORD PTR [rsi+0xc]      ; implicit exception: dispatches to 0x000000010e0a48bd
  0x000000010e0a44d7:   sub    ecx,0x7
  0x000000010e0a44da:   cmp    ebx,0x0
  0x000000010e0a44dd:   jl     0x000000010e0a487a
  0x000000010e0a44e3:   cmp    ebx,ecx
  0x000000010e0a44e5:   jge    0x000000010e0a487a
  0x000000010e0a44eb:   movabs rax,0x7ffb00230              ;   {oop(a 'java/lang/Class'{0x00000007ffb00230} = short)}
  0x000000010e0a44f5:   movsxd rdx,ebx
  0x000000010e0a44f8:   mov    ecx,0x1
  0x000000010e0a44fd:   shl    rdx,cl
  0x000000010e0a4500:   mov    r9,rdx
  0x000000010e0a4503:   movabs r10,0x10
  0x000000010e0a450d:   add    r9,r10
  0x000000010e0a4510:   movabs rdx,0x61f30d0e0              ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061f30d0e0})}
  0x000000010e0a451a:   mov    rdi,rsi
  0x000000010e0a451d:   movabs rsi,0x61f30d128              ;   {oop(a 'java/lang/Class'{0x000000061f30d128} = 'jdk/incubator/vector/Short128Vector')}
  0x000000010e0a4527:   mov    rdx,rax
  0x000000010e0a452a:   mov    ecx,0x8
  0x000000010e0a452f:   mov    r8,rdi
  0x000000010e0a4532:   mov    DWORD PTR [rsp],ebx
  0x000000010e0a4535:   movabs r10,0x61f30d0e0              ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061f30d0e0})}
  0x000000010e0a453f:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e0a4544:   movabs r10,0x61f319b08              ;   {oop(a 'jdk/incubator/vector/ShortVector$$Lambda$82+0x0000000800c23ae8'{0x000000061f319b08})}
  0x000000010e0a454e:   mov    QWORD PTR [rsp+0x10],r10
  0x000000010e0a4553:   mov    QWORD PTR [rsp+0xf0],rax
  0x000000010e0a455b:   nop    DWORD PTR [rax+0x0]
  0x000000010e0a455f:   call   0x000000010e09c440           ; ImmutableOopMap {[240]=Oop }
                                                            ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@31 (line 3520)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {static_call}
  0x000000010e0a4564:   cmp    rax,0x0
  0x000000010e0a4568:   je     0x000000010e0a4597
  0x000000010e0a456e:   movabs rsi,0x800c7f4f8              ;   {metadata('jdk/incubator/vector/ShortVector')}
  0x000000010e0a4578:   mov    ebx,DWORD PTR [rax+0x8]
  0x000000010e0a457b:   movabs r10,0x800000000
  0x000000010e0a4585:   add    rbx,r10
  0x000000010e0a4588:   cmp    rsi,QWORD PTR [rbx+0x58]
  0x000000010e0a458c:   jne    0x000000010e0a48c2
  0x000000010e0a4592:   jmp    0x000000010e0a4597
  0x000000010e0a4597:   mov    rdi,rax
  0x000000010e0a459a:   cmp    rax,QWORD PTR [rdi]          ; implicit exception: dispatches to 0x000000010e0a48cb
  0x000000010e0a459d:   mov    edx,0x30
  0x000000010e0a45a2:   mov    rsi,rdi
  0x000000010e0a45a5:   mov    QWORD PTR [rsp+0xf8],rdi
  0x000000010e0a45ad:   movabs rax,0xffffffffffffffff
  0x000000010e0a45b7:   call   0x000000010da26820           ; ImmutableOopMap {[240]=Oop [248]=Oop }
                                                            ;*invokevirtual broadcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@42 (line 711)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {virtual_call}
  0x000000010e0a45bc:   movabs rdx,0x61f31d618              ;   {oop(a 'jdk/incubator/vector/VectorOperators$BinaryImpl'{0x000000061f31d618})}
  0x000000010e0a45c6:   mov    rcx,rax
  0x000000010e0a45c9:   mov    rsi,QWORD PTR [rsp+0xf8]
  0x000000010e0a45d1:   nop    DWORD PTR [rax+0x0]
  0x000000010e0a45d5:   movabs rax,0xffffffffffffffff
  0x000000010e0a45df:   call   0x000000010da26860           ; ImmutableOopMap {[240]=Oop }
                                                            ;*invokevirtual lanewise {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@45 (line 711)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {virtual_call}
  0x000000010e0a45e4:   movabs rdx,0x61f31eb80              ;   {oop(a 'jdk/incubator/vector/VectorOperators$ComparisonImpl'{0x000000061f31eb80})}
  0x000000010e0a45ee:   movabs rcx,0x9
  0x000000010e0a45f8:   mov    rsi,rax
  0x000000010e0a45fb:   mov    QWORD PTR [rsp+0x100],rax
  0x000000010e0a4603:   xchg   ax,ax
  0x000000010e0a4605:   movabs rax,0xffffffffffffffff
  0x000000010e0a460f:   call   0x000000010da268a0           ; ImmutableOopMap {[240]=Oop [256]=Oop }
                                                            ;*invokevirtual compare {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@21 (line 603)
                                                            ;   {virtual_call}
  0x000000010e0a4614:   cmp    rax,QWORD PTR [rax]          ; implicit exception: dispatches to 0x000000010e0a48d0
  0x000000010e0a4617:   movabs rbx,0x61f30d1c8              ;   {oop(a 'java/lang/Class'{0x000000061f30d1c8} = 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e0a4621:   movabs r8,0xffffffffffffffff
  0x000000010e0a462b:   mov    rsi,rbx
  0x000000010e0a462e:   mov    rdx,QWORD PTR [rsp+0xf0]
  0x000000010e0a4636:   mov    ecx,0x8
  0x000000010e0a463b:   movabs r9,0x0                       ;   {oop(NULL)}
  0x000000010e0a4645:   movabs rdi,0x61f380298              ;   {oop(a 'jdk/incubator/vector/Short128Vector$Short128Mask$$Lambda$91+0x0000000800c29a10'{0x000000061f380298})}
  0x000000010e0a464f:   mov    QWORD PTR [rsp+0x110],rax
  0x000000010e0a4657:   mov    QWORD PTR [rsp+0x108],rbx
  0x000000010e0a465f:   call   0x000000010e0995c0           ; ImmutableOopMap {[240]=Oop [256]=Oop [264]=Oop [272]=Oop }
                                                            ;*invokestatic broadcastCoerced {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::maskAll@24 (line 703)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@66 (line 4010)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {static_call}
  0x000000010e0a4664:   cmp    rax,0x0
  0x000000010e0a4668:   je     0x000000010e0a4696
  0x000000010e0a466e:   movabs rdx,0x800c211a0              ;   {metadata('jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e0a4678:   mov    esi,DWORD PTR [rax+0x8]
  0x000000010e0a467b:   movabs r10,0x800000000
  0x000000010e0a4685:   add    rsi,r10
  0x000000010e0a4688:   cmp    rdx,rsi
  0x000000010e0a468b:   jne    0x000000010e0a48d5
  0x000000010e0a4691:   jmp    0x000000010e0a4696
  0x000000010e0a4696:   mov    rdi,rax
  0x000000010e0a4699:   mov    esi,0x4
  0x000000010e0a469e:   mov    rdx,QWORD PTR [rsp+0x108]
  0x000000010e0a46a6:   mov    rcx,QWORD PTR [rsp+0xf0]
  0x000000010e0a46ae:   mov    r8d,0x8
  0x000000010e0a46b4:   mov    r9,QWORD PTR [rsp+0x110]
  0x000000010e0a46bc:   movabs r10,0x61f383338              ;   {oop(a 'jdk/incubator/vector/Short128Vector$Short128Mask$$Lambda$92+0x0000000800c29c30'{0x000000061f383338})}
  0x000000010e0a46c6:   mov    QWORD PTR [rsp],r10
  0x000000010e0a46ca:   nop    DWORD PTR [rax+rax*1+0x0]
  0x000000010e0a46cf:   call   0x000000010e0a4a15           ; ImmutableOopMap {[256]=Oop }
                                                            ;*invokestatic test {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@23 (line 687)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {static_call}
  0x000000010e0a46d4:   and    eax,0x1
  0x000000010e0a46d7:   cmp    eax,0x0
  0x000000010e0a46da:   jne    0x000000010e0a485a
  0x000000010e0a46e0:   mov    rsi,QWORD PTR [rsp+0x100]
  0x000000010e0a46e8:   nop    DWORD PTR [rax+rax*1+0x0]
  0x000000010e0a46ed:   movabs rax,0x800c20b60
  0x000000010e0a46f7:   call   0x000000010e0976a0           ; ImmutableOopMap {[256]=Oop }
                                                            ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@1 (line 282)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {virtual_call}
  0x000000010e0a46fc:   mov    edi,DWORD PTR [rax+0x28]     ; implicit exception: dispatches to 0x000000010e0a48de
  0x000000010e0a46ff:   shl    rdi,0x3
  0x000000010e0a4703:   movabs rsi,0x6003e4430              ;   {oop(a 'jdk/incubator/vector/LaneType'{0x00000006003e4430})}
  0x000000010e0a470d:   cmp    rdi,rsi
  0x000000010e0a4710:   jne    0x000000010e0a4774
  0x000000010e0a4716:   mov    esi,DWORD PTR [rdi+0x20]     ; implicit exception: dispatches to 0x000000010e0a48e3
  0x000000010e0a4719:   mov    edx,0x7
  0x000000010e0a471e:   movabs rcx,0x61f350038              ;   {oop(a 'jdk/incubator/vector/VectorOperators$ConversionImpl'[][7] {0x000000061f350038})}
  0x000000010e0a4728:   cmp    edx,esi
  0x000000010e0a472a:   jbe    0x000000010e0a48e8
  0x000000010e0a4730:   movsxd rdx,esi
  0x000000010e0a4733:   mov    edx,DWORD PTR [rcx+rdx*4+0x10]; implicit exception: dispatches to 0x000000010e0a48f6
  0x000000010e0a4737:   shl    rdx,0x3
  0x000000010e0a473b:   cmp    esi,DWORD PTR [rdx+0xc]      ; implicit exception: dispatches to 0x000000010e0a48fb
  0x000000010e0a473e:   jae    0x000000010e0a4905
  0x000000010e0a4744:   movsxd rsi,esi
  0x000000010e0a4747:   mov    esi,DWORD PTR [rdx+rsi*4+0x10]
  0x000000010e0a474b:   shl    rsi,0x3
  0x000000010e0a474f:   cmp    rsi,0x0
  0x000000010e0a4753:   jne    0x000000010e0a47d7
  0x000000010e0a4759:   mov    esi,0x49
  0x000000010e0a475e:   mov    rdx,rdi
  0x000000010e0a4761:   mov    rcx,rdi
  0x000000010e0a4764:   data16 xchg ax,ax
  0x000000010e0a4767:   call   0x000000010da2a080           ; ImmutableOopMap {[256]=Oop }
                                                            ;*invokestatic makeConv {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@29 (line 1008)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {static_call}
  0x000000010e0a476c:   mov    rsi,rax
  0x000000010e0a476f:   jmp    0x000000010e0a47d7
  0x000000010e0a4774:   mov    esi,DWORD PTR [rdi+0x20]     ; implicit exception: dispatches to 0x000000010e0a4913
  0x000000010e0a4777:   mov    edx,0x7
  0x000000010e0a477c:   movabs rcx,0x61f350038              ;   {oop(a 'jdk/incubator/vector/VectorOperators$ConversionImpl'[][7] {0x000000061f350038})}
  0x000000010e0a4786:   cmp    edx,esi
  0x000000010e0a4788:   jbe    0x000000010e0a4918
  0x000000010e0a478e:   movsxd rsi,esi
  0x000000010e0a4791:   mov    esi,DWORD PTR [rcx+rsi*4+0x10]; implicit exception: dispatches to 0x000000010e0a4926
  0x000000010e0a4795:   shl    rsi,0x3
  0x000000010e0a4799:   cmp    DWORD PTR [rsi+0xc],0x5      ; implicit exception: dispatches to 0x000000010e0a492b
  0x000000010e0a47a0:   jbe    0x000000010e0a4935
  0x000000010e0a47a6:   mov    esi,DWORD PTR [rsi+0x24]
  0x000000010e0a47a9:   shl    rsi,0x3
  0x000000010e0a47ad:   cmp    rsi,0x0
  0x000000010e0a47b1:   jne    0x000000010e0a47d7
  0x000000010e0a47b7:   movabs rcx,0x6003e4430              ;   {oop(a 'jdk/incubator/vector/LaneType'{0x00000006003e4430})}
  0x000000010e0a47c1:   mov    esi,0x43
  0x000000010e0a47c6:   mov    rdx,rdi
  0x000000010e0a47c9:   nop    WORD PTR [rax+rax*1+0x0]
  0x000000010e0a47cf:   call   0x000000010da2a080           ; ImmutableOopMap {[256]=Oop }
                                                            ;*invokestatic makeConv {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@29 (line 1008)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {static_call}
  0x000000010e0a47d4:   mov    rsi,rax
  0x000000010e0a47d7:   mov    rax,QWORD PTR [rsp+0x100]
  0x000000010e0a47df:   movabs rcx,0x6003e4390              ;   {oop(a 'jdk/incubator/vector/IntVector$IntSpecies'{0x00000006003e4390})}
  0x000000010e0a47e9:   mov    rdx,rsi
  0x000000010e0a47ec:   mov    r8d,0x0
  0x000000010e0a47f2:   mov    rsi,rax
  0x000000010e0a47f5:   movabs rax,0xffffffffffffffff
  0x000000010e0a47ff:   call   0x000000010da268e0           ; ImmutableOopMap {}
                                                            ;*invokevirtual convertShape {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {virtual_call}
  0x000000010e0a4804:   movabs rdx,0x61f2fe228              ;   {oop(a 'jdk/incubator/vector/Int256Vector'{0x000000061f2fe228})}
  0x000000010e0a480e:   mov    rsi,rax
  0x000000010e0a4811:   nop    DWORD PTR [rax+0x0]
  0x000000010e0a4815:   movabs rax,0xffffffffffffffff
  0x000000010e0a481f:   call   0x000000010da26920           ; ImmutableOopMap {}
                                                            ;*invokevirtual mul {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@45 (line 608)
                                                            ;   {virtual_call}
  0x000000010e0a4824:   movabs rdx,0x61f31d5b0              ;   {oop(a 'jdk/incubator/vector/VectorOperators$AssociativeImpl'{0x000000061f31d5b0})}
  0x000000010e0a482e:   mov    rsi,rax
  0x000000010e0a4831:   nop    DWORD PTR [rax+0x0]
  0x000000010e0a4835:   movabs rax,0xffffffffffffffff
  0x000000010e0a483f:   call   0x000000010da26960           ; ImmutableOopMap {}
                                                            ;*invokevirtual reduceLanesToLong {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@51 (line 609)
                                                            ;   {virtual_call}
  0x000000010e0a4844:   add    rsp,0x130
  0x000000010e0a484b:   pop    rbp
  0x000000010e0a484c:   cmp    rsp,QWORD PTR [r15+0x340]    ;   {poll_return}
  0x000000010e0a4853:   ja     0x000000010e0a4947
  0x000000010e0a4859:   ret
  0x000000010e0a485a:   movabs rax,0xffffffffffffffff
  0x000000010e0a4864:   add    rsp,0x130
  0x000000010e0a486b:   pop    rbp
  0x000000010e0a486c:   cmp    rsp,QWORD PTR [r15+0x340]    ;   {poll_return}
  0x000000010e0a4873:   ja     0x000000010e0a495d
  0x000000010e0a4879:   ret
  0x000000010e0a487a:   mov    QWORD PTR [rsp+0x118],rsi
  0x000000010e0a4882:   movabs rsi,0x0                      ;   {oop(NULL)}
  0x000000010e0a488c:   mov    rdx,rbx
  0x000000010e0a488f:   call   0x000000010da2a080           ; ImmutableOopMap {[280]=Oop }
                                                            ;*invokestatic outOfBoundsCheckIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.internal.util.Preconditions::checkIndex@12 (line 266)
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {static_call}
  0x000000010e0a4894:   cmp    rax,QWORD PTR [rax]          ; implicit exception: dispatches to 0x000000010e0a4973
  0x000000010e0a4897:   jmp    0x000000010e0a4997
  0x000000010e0a489c:   movabs r10,0x102441d50              ;   {metadata({method} {0x0000000102441d50} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x000000010e0a48a6:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e0a48ab:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e0a48b3:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@-1 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e0a48b8:   jmp    0x000000010e0a44d4
  0x000000010e0a48bd:   call   0x000000010dacff20           ; ImmutableOopMap {rsi=Oop }
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@8 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e0a48c2:   mov    QWORD PTR [rsp],rax
  0x000000010e0a48c6:   call   0x000000010dad2f20           ; ImmutableOopMap {[240]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@34 (line 3520)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call throw_class_cast_exception Runtime1 stub}
  0x000000010e0a48cb:   call   0x000000010dacff20           ; ImmutableOopMap {[240]=Oop rdi=Oop }
                                                            ;*invokevirtual sub {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e0a48d0:   call   0x000000010dacff20           ; ImmutableOopMap {[240]=Oop [256]=Oop rax=Oop }
                                                            ;*invokevirtual anyTrue {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e0a48d5:   mov    QWORD PTR [rsp],rax
  0x000000010e0a48d9:   call   0x000000010dad2f20           ; ImmutableOopMap {[240]=Oop [256]=Oop [264]=Oop [272]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::maskAll@27 (line 703)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@66 (line 4010)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call throw_class_cast_exception Runtime1 stub}
  0x000000010e0a48de:   call   0x000000010dacff20           ; ImmutableOopMap {[256]=Oop }
                                                            ;*getfield laneType {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractVector::castShape@12 (line 285)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e0a48e3:   call   0x000000010dacff20           ; ImmutableOopMap {[256]=Oop rdi=Oop }
                                                            ;*getfield switchKey {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@57 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e0a48e8:   mov    QWORD PTR [rsp],rsi
  0x000000010e0a48ec:   mov    QWORD PTR [rsp+0x8],rcx
  0x000000010e0a48f1:   call   0x000000010dacf620           ; ImmutableOopMap {[256]=Oop rdi=Oop rcx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@60 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x000000010e0a48f6:   call   0x000000010dacff20           ; ImmutableOopMap {[256]=Oop rdi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@60 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e0a48fb:   call   0x000000010dacff20           ; ImmutableOopMap {[256]=Oop rdi=Oop rdx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e0a4900:   call   0x000000010dacff20           ; ImmutableOopMap {[256]=Oop rdi=Oop rdx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e0a4905:   mov    QWORD PTR [rsp],rsi
  0x000000010e0a4909:   mov    QWORD PTR [rsp+0x8],rdx
  0x000000010e0a490e:   call   0x000000010dacf620           ; ImmutableOopMap {[256]=Oop rdi=Oop rdx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x000000010e0a4913:   call   0x000000010dacff20           ; ImmutableOopMap {[256]=Oop rdi=Oop }
                                                            ;*getfield switchKey {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@57 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e0a4918:   mov    QWORD PTR [rsp],rsi
  0x000000010e0a491c:   mov    QWORD PTR [rsp+0x8],rcx
  0x000000010e0a4921:   call   0x000000010dacf620           ; ImmutableOopMap {[256]=Oop rdi=Oop rcx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@60 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x000000010e0a4926:   call   0x000000010dacff20           ; ImmutableOopMap {[256]=Oop rdi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@60 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e0a492b:   call   0x000000010dacff20           ; ImmutableOopMap {[256]=Oop rdi=Oop rsi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e0a4930:   call   0x000000010dacff20           ; ImmutableOopMap {[256]=Oop rdi=Oop rsi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e0a4935:   mov    QWORD PTR [rsp],0x5
  0x000000010e0a493d:   mov    QWORD PTR [rsp+0x8],rsi
  0x000000010e0a4942:   call   0x000000010dacf620           ; ImmutableOopMap {[256]=Oop rdi=Oop rsi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x000000010e0a4947:   movabs r10,0x10e0a484c              ;   {internal_word}
  0x000000010e0a4951:   mov    QWORD PTR [r15+0x358],r10
  0x000000010e0a4958:   jmp    0x000000010da30100           ;   {runtime_call SafepointBlob}
  0x000000010e0a495d:   movabs r10,0x10e0a486c              ;   {internal_word}
  0x000000010e0a4967:   mov    QWORD PTR [r15+0x358],r10
  0x000000010e0a496e:   jmp    0x000000010da30100           ;   {runtime_call SafepointBlob}
  0x000000010e0a4973:   call   0x000000010dacff20           ; ImmutableOopMap {[280]=Oop rax=Oop }
                                                            ;*athrow {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.internal.util.Preconditions::checkIndex@15 (line 266)
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e0a4978:   nop
  0x000000010e0a4979:   nop
  0x000000010e0a497a:   mov    rax,QWORD PTR [r15+0x3d0]
  0x000000010e0a4981:   mov    QWORD PTR [r15+0x3d0],0x0
  0x000000010e0a498c:   mov    QWORD PTR [r15+0x3d8],0x0
  0x000000010e0a4997:   add    rsp,0x130
  0x000000010e0a499e:   pop    rbp
  0x000000010e0a499f:   jmp    0x000000010dacf000           ;   {runtime_call unwind_exception Runtime1 stub}
  0x000000010e0a49a4:   hlt
  0x000000010e0a49a5:   hlt
  0x000000010e0a49a6:   hlt
  0x000000010e0a49a7:   hlt
  0x000000010e0a49a8:   hlt
  0x000000010e0a49a9:   hlt
  0x000000010e0a49aa:   hlt
  0x000000010e0a49ab:   hlt
  0x000000010e0a49ac:   hlt
  0x000000010e0a49ad:   hlt
  0x000000010e0a49ae:   hlt
  0x000000010e0a49af:   hlt
  0x000000010e0a49b0:   hlt
  0x000000010e0a49b1:   hlt
  0x000000010e0a49b2:   hlt
  0x000000010e0a49b3:   hlt
  0x000000010e0a49b4:   hlt
  0x000000010e0a49b5:   hlt
  0x000000010e0a49b6:   hlt
  0x000000010e0a49b7:   hlt
  0x000000010e0a49b8:   hlt
  0x000000010e0a49b9:   hlt
  0x000000010e0a49ba:   hlt
  0x000000010e0a49bb:   hlt
  0x000000010e0a49bc:   hlt
  0x000000010e0a49bd:   hlt
  0x000000010e0a49be:   hlt
  0x000000010e0a49bf:   hlt
[Stub Code]
  0x000000010e0a49c0:   nop    DWORD PTR [rax+rax*1+0x0]    ;   {no_reloc}
  0x000000010e0a49c5:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e0a49cf:   jmp    0x000000010e0a49cf           ;   {runtime_call const_jargs+-25849953}
  0x000000010e0a49d4:   nop
  0x000000010e0a49d5:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e0a49df:   jmp    0x000000010e0a49df           ;   {runtime_call const_jargs+-25849953}
  0x000000010e0a49e4:   nop
  0x000000010e0a49e5:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e0a49ef:   jmp    0x000000010e0a49ef           ;   {runtime_call const_jargs+-25849953}
  0x000000010e0a49f4:   nop
  0x000000010e0a49f5:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e0a49ff:   jmp    0x000000010e0a49ff           ;   {runtime_call const_jargs+-25849953}
  0x000000010e0a4a04:   nop
  0x000000010e0a4a05:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e0a4a0f:   jmp    0x000000010e0a4a0f           ;   {runtime_call const_jargs+-25849953}
  0x000000010e0a4a14:   nop
  0x000000010e0a4a15:   movabs rbx,0x800005620              ;   {static_stub}
  0x000000010e0a4a1f:   jmp    0x000000010daf641c           ;   {runtime_call I2C/C2I adapters}
  0x000000010e0a4a24:   nop
  0x000000010e0a4a25:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e0a4a2f:   jmp    0x000000010e0a4a2f           ;   {runtime_call const_jargs+-25849953}
  0x000000010e0a4a34:   nop
  0x000000010e0a4a35:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e0a4a3f:   jmp    0x000000010e0a4a3f           ;   {runtime_call const_jargs+-25849953}
  0x000000010e0a4a44:   nop
  0x000000010e0a4a45:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e0a4a4f:   jmp    0x000000010e0a4a4f           ;   {runtime_call const_jargs+-25849953}
  0x000000010e0a4a54:   nop
  0x000000010e0a4a55:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e0a4a5f:   jmp    0x000000010e0a4a5f           ;   {runtime_call const_jargs+-25849953}
  0x000000010e0a4a64:   nop
  0x000000010e0a4a65:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e0a4a6f:   jmp    0x000000010e0a4a6f           ;   {runtime_call const_jargs+-25849953}
  0x000000010e0a4a74:   nop
  0x000000010e0a4a75:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e0a4a7f:   jmp    0x000000010e0a4a7f           ;   {runtime_call const_jargs+-25849953}
  0x000000010e0a4a84:   nop
  0x000000010e0a4a85:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e0a4a8f:   jmp    0x000000010e0a4a8f           ;   {runtime_call const_jargs+-25849953}
[Exception Handler]
  0x000000010e0a4a94:   call   0x000000010dad2900           ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x000000010e0a4a99:   movabs rdi,0x1034ff512              ;   {external_word}
  0x000000010e0a4aa3:   and    rsp,0xfffffffffffffff0
  0x000000010e0a4aa7:   call   0x00000001031a1790           ;   {runtime_call _ZN14MacroAssembler7debug64EPcxPx}
  0x000000010e0a4aac:   hlt
[Deopt Handler Code]
  0x000000010e0a4aad:   movabs r10,0x10e0a4aad              ;   {section_word}
  0x000000010e0a4ab7:   push   r10
  0x000000010e0a4ab9:   jmp    0x000000010da2f020           ;   {runtime_call DeoptimizationBlob}
  0x000000010e0a4abe:   hlt
  0x000000010e0a4abf:   hlt
--------------------------------------------------------------------------------
[/Disassembly]

============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1) 1009       3       ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd (55 bytes)
 total in heap  [0x000000010e12eb10,0x000000010e132460] = 14672
 relocation     [0x000000010e12ec70,0x000000010e12ef10] = 672
 main code      [0x000000010e12ef20,0x000000010e1318e0] = 10688
 stub code      [0x000000010e1318e0,0x000000010e1319e0] = 256
 oops           [0x000000010e1319e0,0x000000010e131a48] = 104
 metadata       [0x000000010e131a48,0x000000010e131b38] = 240
 scopes data    [0x000000010e131b38,0x000000010e131f60] = 1064
 scopes pcs     [0x000000010e131f60,0x000000010e1323d0] = 1136
 dependencies   [0x000000010e1323d0,0x000000010e1323d8] = 8
 nul chk table  [0x000000010e1323d8,0x000000010e132460] = 136

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000102441d50} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray'
  # parm0:    rsi:rsi   = '[C'
  # parm1:    rdx       = int
  #           [sp+0x130]  (sp of caller)
  0x000000010e12ef20:   mov    DWORD PTR [rsp-0x14000],eax
  0x000000010e12ef27:   push   rbp
  0x000000010e12ef28:   sub    rsp,0x120
  0x000000010e12ef2f:   mov    rbx,rdx
  0x000000010e12ef32:   movabs rcx,0x10244e740              ;   {metadata(method data for {method} {0x0000000102441d50} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x000000010e12ef3c:   mov    edx,DWORD PTR [rcx+0xac]
  0x000000010e12ef42:   add    edx,0x2
  0x000000010e12ef45:   mov    DWORD PTR [rcx+0xac],edx
  0x000000010e12ef4b:   and    edx,0x7fe
  0x000000010e12ef51:   cmp    edx,0x0
  0x000000010e12ef54:   je     0x000000010e13137c
  0x000000010e12ef5a:   movabs rcx,0x10244e740              ;   {metadata(method data for {method} {0x0000000102441d50} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x000000010e12ef64:   add    QWORD PTR [rcx+0xf0],0x1
  0x000000010e12ef6c:   movabs rcx,0x10236aa70              ;   {metadata(method data for {method} {0x00000001022eca98} 'fromCharArray' '(Ljdk/incubator/vector/VectorSpecies;[CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12ef76:   mov    edx,DWORD PTR [rcx+0xac]
  0x000000010e12ef7c:   add    edx,0x2
  0x000000010e12ef7f:   mov    DWORD PTR [rcx+0xac],edx
  0x000000010e12ef85:   and    edx,0x1ffffe
  0x000000010e12ef8b:   cmp    edx,0x0
  0x000000010e12ef8e:   je     0x000000010e13139d
  0x000000010e12ef94:   movabs rcx,0x61a8000e8              ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061a8000e8})}
  0x000000010e12ef9e:   movabs rdx,0x10236aa70              ;   {metadata(method data for {method} {0x00000001022eca98} 'fromCharArray' '(Ljdk/incubator/vector/VectorSpecies;[CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12efa8:   mov    ecx,DWORD PTR [rcx+0x8]
  0x000000010e12efab:   movabs r10,0x800000000
  0x000000010e12efb5:   add    rcx,r10
  0x000000010e12efb8:   cmp    rcx,QWORD PTR [rdx+0x100]
  0x000000010e12efbf:   jne    0x000000010e12efce
  0x000000010e12efc1:   add    QWORD PTR [rdx+0x108],0x1
  0x000000010e12efc9:   jmp    0x000000010e12f190
  0x000000010e12efce:   cmp    rcx,QWORD PTR [rdx+0x110]
  0x000000010e12efd5:   jne    0x000000010e12efe4
  0x000000010e12efd7:   add    QWORD PTR [rdx+0x118],0x1
  0x000000010e12efdf:   jmp    0x000000010e12f190
  0x000000010e12efe4:   cmp    rcx,QWORD PTR [rdx+0x120]
  0x000000010e12efeb:   jne    0x000000010e12effa
  0x000000010e12efed:   add    QWORD PTR [rdx+0x128],0x1
  0x000000010e12eff5:   jmp    0x000000010e12f190
  0x000000010e12effa:   cmp    rcx,QWORD PTR [rdx+0x130]
  0x000000010e12f001:   jne    0x000000010e12f010
  0x000000010e12f003:   add    QWORD PTR [rdx+0x138],0x1
  0x000000010e12f00b:   jmp    0x000000010e12f190
  0x000000010e12f010:   cmp    rcx,QWORD PTR [rdx+0x140]
  0x000000010e12f017:   jne    0x000000010e12f026
  0x000000010e12f019:   add    QWORD PTR [rdx+0x148],0x1
  0x000000010e12f021:   jmp    0x000000010e12f190
  0x000000010e12f026:   cmp    rcx,QWORD PTR [rdx+0x150]
  0x000000010e12f02d:   jne    0x000000010e12f03c
  0x000000010e12f02f:   add    QWORD PTR [rdx+0x158],0x1
  0x000000010e12f037:   jmp    0x000000010e12f190
  0x000000010e12f03c:   cmp    rcx,QWORD PTR [rdx+0x160]
  0x000000010e12f043:   jne    0x000000010e12f052
  0x000000010e12f045:   add    QWORD PTR [rdx+0x168],0x1
  0x000000010e12f04d:   jmp    0x000000010e12f190
  0x000000010e12f052:   cmp    rcx,QWORD PTR [rdx+0x170]
  0x000000010e12f059:   jne    0x000000010e12f068
  0x000000010e12f05b:   add    QWORD PTR [rdx+0x178],0x1
  0x000000010e12f063:   jmp    0x000000010e12f190
  0x000000010e12f068:   cmp    QWORD PTR [rdx+0x100],0x0
  0x000000010e12f073:   jne    0x000000010e12f08c
  0x000000010e12f075:   mov    QWORD PTR [rdx+0x100],rcx
  0x000000010e12f07c:   mov    QWORD PTR [rdx+0x108],0x1
  0x000000010e12f087:   jmp    0x000000010e12f190
  0x000000010e12f08c:   cmp    QWORD PTR [rdx+0x110],0x0
  0x000000010e12f097:   jne    0x000000010e12f0b0
  0x000000010e12f099:   mov    QWORD PTR [rdx+0x110],rcx
  0x000000010e12f0a0:   mov    QWORD PTR [rdx+0x118],0x1
  0x000000010e12f0ab:   jmp    0x000000010e12f190
  0x000000010e12f0b0:   cmp    QWORD PTR [rdx+0x120],0x0
  0x000000010e12f0bb:   jne    0x000000010e12f0d4
  0x000000010e12f0bd:   mov    QWORD PTR [rdx+0x120],rcx
  0x000000010e12f0c4:   mov    QWORD PTR [rdx+0x128],0x1
  0x000000010e12f0cf:   jmp    0x000000010e12f190
  0x000000010e12f0d4:   cmp    QWORD PTR [rdx+0x130],0x0
  0x000000010e12f0df:   jne    0x000000010e12f0f8
  0x000000010e12f0e1:   mov    QWORD PTR [rdx+0x130],rcx
  0x000000010e12f0e8:   mov    QWORD PTR [rdx+0x138],0x1
  0x000000010e12f0f3:   jmp    0x000000010e12f190
  0x000000010e12f0f8:   cmp    QWORD PTR [rdx+0x140],0x0
  0x000000010e12f103:   jne    0x000000010e12f11c
  0x000000010e12f105:   mov    QWORD PTR [rdx+0x140],rcx
  0x000000010e12f10c:   mov    QWORD PTR [rdx+0x148],0x1
  0x000000010e12f117:   jmp    0x000000010e12f190
  0x000000010e12f11c:   cmp    QWORD PTR [rdx+0x150],0x0
  0x000000010e12f127:   jne    0x000000010e12f140
  0x000000010e12f129:   mov    QWORD PTR [rdx+0x150],rcx
  0x000000010e12f130:   mov    QWORD PTR [rdx+0x158],0x1
  0x000000010e12f13b:   jmp    0x000000010e12f190
  0x000000010e12f140:   cmp    QWORD PTR [rdx+0x160],0x0
  0x000000010e12f14b:   jne    0x000000010e12f164
  0x000000010e12f14d:   mov    QWORD PTR [rdx+0x160],rcx
  0x000000010e12f154:   mov    QWORD PTR [rdx+0x168],0x1
  0x000000010e12f15f:   jmp    0x000000010e12f190
  0x000000010e12f164:   cmp    QWORD PTR [rdx+0x170],0x0
  0x000000010e12f16f:   jne    0x000000010e12f188
  0x000000010e12f171:   mov    QWORD PTR [rdx+0x170],rcx
  0x000000010e12f178:   mov    QWORD PTR [rdx+0x178],0x1
  0x000000010e12f183:   jmp    0x000000010e12f190
  0x000000010e12f188:   add    QWORD PTR [rdx+0xf0],0x1
  0x000000010e12f190:   mov    ecx,DWORD PTR [rsi+0xc]      ; implicit exception: dispatches to 0x000000010e1313be
  0x000000010e12f193:   movabs rdx,0x10236aa70              ;   {metadata(method data for {method} {0x00000001022eca98} 'fromCharArray' '(Ljdk/incubator/vector/VectorSpecies;[CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f19d:   add    QWORD PTR [rdx+0x188],0x1
  0x000000010e12f1a5:   movabs rdx,0x102363cd0              ;   {metadata(method data for {method} {0x0000000102241d20} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics')}
  0x000000010e12f1af:   mov    r8d,DWORD PTR [rdx+0xac]
  0x000000010e12f1b6:   add    r8d,0x2
  0x000000010e12f1ba:   mov    DWORD PTR [rdx+0xac],r8d
  0x000000010e12f1c1:   and    r8d,0x1ffffe
  0x000000010e12f1c8:   cmp    r8d,0x0
  0x000000010e12f1cc:   je     0x000000010e1313c3
  0x000000010e12f1d2:   sub    ecx,0x7
  0x000000010e12f1d5:   movabs rdx,0x102363cd0              ;   {metadata(method data for {method} {0x0000000102241d20} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics')}
  0x000000010e12f1df:   add    QWORD PTR [rdx+0x150],0x1
  0x000000010e12f1e7:   movabs rdx,0x10235fe08              ;   {metadata(method data for {method} {0x000000080007a390} 'checkIndex' '(II)I' in 'java/util/Objects')}
  0x000000010e12f1f1:   mov    r8d,DWORD PTR [rdx+0xac]
  0x000000010e12f1f8:   add    r8d,0x2
  0x000000010e12f1fc:   mov    DWORD PTR [rdx+0xac],r8d
  0x000000010e12f203:   and    r8d,0x1ffffe
  0x000000010e12f20a:   cmp    r8d,0x0
  0x000000010e12f20e:   je     0x000000010e1313e4
  0x000000010e12f214:   movabs rdx,0x10235fe08              ;   {metadata(method data for {method} {0x000000080007a390} 'checkIndex' '(II)I' in 'java/util/Objects')}
  0x000000010e12f21e:   add    QWORD PTR [rdx+0xf0],0x1
  0x000000010e12f226:   movabs rdx,0x1022ab908              ;   {metadata(method data for {method} {0x00000008003a44f8} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x000000010e12f230:   mov    r8d,DWORD PTR [rdx+0xac]
  0x000000010e12f237:   add    r8d,0x2
  0x000000010e12f23b:   mov    DWORD PTR [rdx+0xac],r8d
  0x000000010e12f242:   and    r8d,0x1ffffe
  0x000000010e12f249:   cmp    r8d,0x0
  0x000000010e12f24d:   je     0x000000010e131405
  0x000000010e12f253:   cmp    ebx,0x0
  0x000000010e12f256:   movabs rdx,0x1022ab908              ;   {metadata(method data for {method} {0x00000008003a44f8} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x000000010e12f260:   movabs r8,0xf0
  0x000000010e12f26a:   jl     0x000000010e12f27a
  0x000000010e12f270:   movabs r8,0x100
  0x000000010e12f27a:   mov    r9,QWORD PTR [rdx+r8*1]
  0x000000010e12f27e:   lea    r9,[r9+0x1]
  0x000000010e12f282:   mov    QWORD PTR [rdx+r8*1],r9
  0x000000010e12f286:   jl     0x000000010e131342
  0x000000010e12f28c:   cmp    ebx,ecx
  0x000000010e12f28e:   movabs rdx,0x1022ab908              ;   {metadata(method data for {method} {0x00000008003a44f8} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x000000010e12f298:   movabs r8,0x120
  0x000000010e12f2a2:   jge    0x000000010e12f2b2
  0x000000010e12f2a8:   movabs r8,0x110
  0x000000010e12f2b2:   mov    r9,QWORD PTR [rdx+r8*1]
  0x000000010e12f2b6:   lea    r9,[r9+0x1]
  0x000000010e12f2ba:   mov    QWORD PTR [rdx+r8*1],r9
  0x000000010e12f2be:   jge    0x000000010e131342
  0x000000010e12f2c4:   movabs rcx,0x61a8000e8              ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061a8000e8})}
  0x000000010e12f2ce:   mov    rdx,rcx
  0x000000010e12f2d1:   movabs r8,0x10236aa70               ;   {metadata(method data for {method} {0x00000001022eca98} 'fromCharArray' '(Ljdk/incubator/vector/VectorSpecies;[CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f2db:   add    QWORD PTR [r8+0x230],0x1
  0x000000010e12f2e3:   movabs rdx,0x102362560              ;   {metadata(method data for {method} {0x00000001022fcae0} 'dummyVector' '()Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x000000010e12f2ed:   mov    r8d,DWORD PTR [rdx+0xac]
  0x000000010e12f2f4:   add    r8d,0x2
  0x000000010e12f2f8:   mov    DWORD PTR [rdx+0xac],r8d
  0x000000010e12f2ff:   and    r8d,0x1ffffe
  0x000000010e12f306:   cmp    r8d,0x0
  0x000000010e12f30a:   je     0x000000010e131426
  0x000000010e12f310:   movabs rdx,0x102362560              ;   {metadata(method data for {method} {0x00000001022fcae0} 'dummyVector' '()Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x000000010e12f31a:   add    QWORD PTR [rdx+0xf0],0x1
  0x000000010e12f322:   movabs rcx,0x10235f110              ;   {metadata(method data for {method} {0x000000010215d468} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies')}
  0x000000010e12f32c:   mov    edx,DWORD PTR [rcx+0xac]
  0x000000010e12f332:   add    edx,0x2
  0x000000010e12f335:   mov    DWORD PTR [rcx+0xac],edx
  0x000000010e12f33b:   and    edx,0x1ffffe
  0x000000010e12f341:   cmp    edx,0x0
  0x000000010e12f344:   je     0x000000010e131447
  0x000000010e12f34a:   movabs rcx,0x10235f110              ;   {metadata(method data for {method} {0x000000010215d468} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies')}
  0x000000010e12f354:   inc    DWORD PTR [rcx+0x100]
  0x000000010e12f35a:   movabs rcx,0x61a8a9aa0              ;   {oop(a 'jdk/incubator/vector/Short128Vector'{0x000000061a8a9aa0})}
  0x000000010e12f364:   mov    rdx,rcx
  0x000000010e12f367:   movabs r8,0x10236aa70               ;   {metadata(method data for {method} {0x00000001022eca98} 'fromCharArray' '(Ljdk/incubator/vector/VectorSpecies;[CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f371:   add    QWORD PTR [r8+0x2c8],0x1
  0x000000010e12f379:   movabs rdx,0x10236ae10              ;   {metadata(method data for {method} {0x0000000102310b98} 'fromCharArray0' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/Short128Vector')}
  0x000000010e12f383:   mov    r8d,DWORD PTR [rdx+0xac]
  0x000000010e12f38a:   add    r8d,0x2
  0x000000010e12f38e:   mov    DWORD PTR [rdx+0xac],r8d
  0x000000010e12f395:   and    r8d,0x1ffffe
  0x000000010e12f39c:   cmp    r8d,0x0
  0x000000010e12f3a0:   je     0x000000010e131468
  0x000000010e12f3a6:   mov    rdx,rcx
  0x000000010e12f3a9:   movabs r8,0x10236ae10               ;   {metadata(method data for {method} {0x0000000102310b98} 'fromCharArray0' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/Short128Vector')}
  0x000000010e12f3b3:   add    QWORD PTR [r8+0xf0],0x1
  0x000000010e12f3bb:   movabs rdx,0x10236af40              ;   {metadata(method data for {method} {0x00000001022ee080} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f3c5:   mov    r8d,DWORD PTR [rdx+0xac]
  0x000000010e12f3cc:   add    r8d,0x2
  0x000000010e12f3d0:   mov    DWORD PTR [rdx+0xac],r8d
  0x000000010e12f3d7:   and    r8d,0x1ffffe
  0x000000010e12f3de:   cmp    r8d,0x0
  0x000000010e12f3e2:   je     0x000000010e131489
  0x000000010e12f3e8:   movabs rdx,0x10236af40              ;   {metadata(method data for {method} {0x00000001022ee080} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f3f2:   add    QWORD PTR [rdx+0xf0],0x1
  0x000000010e12f3fa:   movabs rcx,0x10235ff28              ;   {metadata(method data for {method} {0x000000010230daa0} 'vspecies' '()Ljdk/incubator/vector/ShortVector$ShortSpecies;' in 'jdk/incubator/vector/Short128Vector')}
  0x000000010e12f404:   mov    edx,DWORD PTR [rcx+0xac]
  0x000000010e12f40a:   add    edx,0x2
  0x000000010e12f40d:   mov    DWORD PTR [rcx+0xac],edx
  0x000000010e12f413:   and    edx,0x1ffffe
  0x000000010e12f419:   cmp    edx,0x0
  0x000000010e12f41c:   je     0x000000010e1314aa
  0x000000010e12f422:   movabs rcx,0x61a8000e8              ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061a8000e8})}
  0x000000010e12f42c:   mov    rdx,rcx
  0x000000010e12f42f:   movabs r8,0x10236af40               ;   {metadata(method data for {method} {0x00000001022ee080} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f439:   add    QWORD PTR [r8+0x188],0x1
  0x000000010e12f441:   mov    rdx,rcx
  0x000000010e12f444:   movabs r8,0x10236af40               ;   {metadata(method data for {method} {0x00000001022ee080} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f44e:   add    QWORD PTR [r8+0x220],0x1
  0x000000010e12f456:   movabs rdx,0x102362718              ;   {metadata(method data for {method} {0x00000001022fc168} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x000000010e12f460:   mov    r8d,DWORD PTR [rdx+0xac]
  0x000000010e12f467:   add    r8d,0x2
  0x000000010e12f46b:   mov    DWORD PTR [rdx+0xac],r8d
  0x000000010e12f472:   and    r8d,0x1ffffe
  0x000000010e12f479:   cmp    r8d,0x0
  0x000000010e12f47d:   je     0x000000010e1314cb
  0x000000010e12f483:   movabs rdx,0x10236af40              ;   {metadata(method data for {method} {0x00000001022ee080} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f48d:   add    QWORD PTR [rdx+0x2b8],0x1
  0x000000010e12f495:   movabs rcx,0x10236af40              ;   {metadata(method data for {method} {0x00000001022ee080} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f49f:   add    QWORD PTR [rcx+0x350],0x1
  0x000000010e12f4a7:   movabs rcx,0x10236b388              ;   {metadata(method data for {method} {0x00000001022eec60} 'charArrayAddress' '([CI)J' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f4b1:   mov    edx,DWORD PTR [rcx+0xac]
  0x000000010e12f4b7:   add    edx,0x2
  0x000000010e12f4ba:   mov    DWORD PTR [rcx+0xac],edx
  0x000000010e12f4c0:   and    edx,0x1ffffe
  0x000000010e12f4c6:   cmp    edx,0x0
  0x000000010e12f4c9:   je     0x000000010e1314ec
  0x000000010e12f4cf:   movabs rcx,0x10236af40              ;   {metadata(method data for {method} {0x00000001022ee080} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f4d9:   add    QWORD PTR [rcx+0x360],0x1
  0x000000010e12f4e1:   movsxd rdx,ebx
  0x000000010e12f4e4:   mov    ecx,0x1
  0x000000010e12f4e9:   shl    rdx,cl
  0x000000010e12f4ec:   mov    r9,rdx
  0x000000010e12f4ef:   movabs r10,0x10
  0x000000010e12f4f9:   add    r9,r10
  0x000000010e12f4fc:   movabs rdx,0x10235e958              ;   {metadata(method data for {method} {0x00000008000e5db8} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x000000010e12f506:   mov    ecx,DWORD PTR [rdx+0xac]
  0x000000010e12f50c:   add    ecx,0x2
  0x000000010e12f50f:   mov    DWORD PTR [rdx+0xac],ecx
  0x000000010e12f515:   and    ecx,0x1ffffe
  0x000000010e12f51b:   cmp    ecx,0x0
  0x000000010e12f51e:   je     0x000000010e13150d
  0x000000010e12f524:   movabs rdx,0x10235e958              ;   {metadata(method data for {method} {0x00000008000e5db8} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x000000010e12f52e:   add    QWORD PTR [rdx+0x188],0x1
  0x000000010e12f536:   movabs rdx,0x102400490              ;   {metadata(method data for {method} {0x0000000102400268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x000000010e12f540:   mov    ecx,DWORD PTR [rdx+0xac]
  0x000000010e12f546:   add    ecx,0x2
  0x000000010e12f549:   mov    DWORD PTR [rdx+0xac],ecx
  0x000000010e12f54f:   and    ecx,0x1ffffe
  0x000000010e12f555:   cmp    ecx,0x0
  0x000000010e12f558:   je     0x000000010e13152e
  0x000000010e12f55e:   movabs rdx,0x10236af40              ;   {metadata(method data for {method} {0x00000001022ee080} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f568:   add    QWORD PTR [rdx+0x370],0x1
  0x000000010e12f570:   movabs rdx,0x7ffb00230              ;   {oop(a 'java/lang/Class'{0x00000007ffb00230} = short)}
  0x000000010e12f57a:   mov    rdi,rsi
  0x000000010e12f57d:   movabs rsi,0x61a800130              ;   {oop(a 'java/lang/Class'{0x000000061a800130} = 'jdk/incubator/vector/Short128Vector')}
  0x000000010e12f587:   mov    ecx,0x8
  0x000000010e12f58c:   mov    r8,rdi
  0x000000010e12f58f:   mov    DWORD PTR [rsp],ebx
  0x000000010e12f592:   movabs r10,0x61a8000e8              ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061a8000e8})}
  0x000000010e12f59c:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e12f5a1:   movabs r10,0x61a8001f8              ;   {oop(a 'jdk/incubator/vector/ShortVector$$Lambda$82+0x0000000800c23ae8'{0x000000061a8001f8})}
  0x000000010e12f5ab:   mov    QWORD PTR [rsp+0x10],r10
  0x000000010e12f5b0:   nop    DWORD PTR [rax+0x0]
  0x000000010e12f5b7:   call   0x000000010e12ce40           ; ImmutableOopMap {}
                                                            ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@31 (line 3520)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {static_call}
  0x000000010e12f5bc:   cmp    rax,0x0
  0x000000010e12f5c0:   jne    0x000000010e12f5d8
  0x000000010e12f5c2:   movabs rbx,0x10236af40              ;   {metadata(method data for {method} {0x00000001022ee080} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f5cc:   or     BYTE PTR [rbx+0x379],0x1
  0x000000010e12f5d3:   jmp    0x000000010e12f807
  0x000000010e12f5d8:   movabs rsi,0x800c7f4f8              ;   {metadata('jdk/incubator/vector/ShortVector')}
  0x000000010e12f5e2:   mov    ebx,DWORD PTR [rax+0x8]
  0x000000010e12f5e5:   movabs r10,0x800000000
  0x000000010e12f5ef:   add    rbx,r10
  0x000000010e12f5f2:   cmp    rsi,QWORD PTR [rbx+0x58]
  0x000000010e12f5f6:   jne    0x000000010e12f7eb
  0x000000010e12f5fc:   movabs rbx,0x10236af40              ;   {metadata(method data for {method} {0x00000001022ee080} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f606:   mov    esi,DWORD PTR [rax+0x8]
  0x000000010e12f609:   movabs r10,0x800000000
  0x000000010e12f613:   add    rsi,r10
  0x000000010e12f616:   cmp    rsi,QWORD PTR [rbx+0x390]
  0x000000010e12f61d:   jne    0x000000010e12f62c
  0x000000010e12f61f:   add    QWORD PTR [rbx+0x398],0x1
  0x000000010e12f627:   jmp    0x000000010e12f807
  0x000000010e12f62c:   cmp    rsi,QWORD PTR [rbx+0x3a0]
  0x000000010e12f633:   jne    0x000000010e12f642
  0x000000010e12f635:   add    QWORD PTR [rbx+0x3a8],0x1
  0x000000010e12f63d:   jmp    0x000000010e12f807
  0x000000010e12f642:   cmp    rsi,QWORD PTR [rbx+0x3b0]
  0x000000010e12f649:   jne    0x000000010e12f658
  0x000000010e12f64b:   add    QWORD PTR [rbx+0x3b8],0x1
  0x000000010e12f653:   jmp    0x000000010e12f807
  0x000000010e12f658:   cmp    rsi,QWORD PTR [rbx+0x3c0]
  0x000000010e12f65f:   jne    0x000000010e12f66e
  0x000000010e12f661:   add    QWORD PTR [rbx+0x3c8],0x1
  0x000000010e12f669:   jmp    0x000000010e12f807
  0x000000010e12f66e:   cmp    rsi,QWORD PTR [rbx+0x3d0]
  0x000000010e12f675:   jne    0x000000010e12f684
  0x000000010e12f677:   add    QWORD PTR [rbx+0x3d8],0x1
  0x000000010e12f67f:   jmp    0x000000010e12f807
  0x000000010e12f684:   cmp    rsi,QWORD PTR [rbx+0x3e0]
  0x000000010e12f68b:   jne    0x000000010e12f69a
  0x000000010e12f68d:   add    QWORD PTR [rbx+0x3e8],0x1
  0x000000010e12f695:   jmp    0x000000010e12f807
  0x000000010e12f69a:   cmp    rsi,QWORD PTR [rbx+0x3f0]
  0x000000010e12f6a1:   jne    0x000000010e12f6b0
  0x000000010e12f6a3:   add    QWORD PTR [rbx+0x3f8],0x1
  0x000000010e12f6ab:   jmp    0x000000010e12f807
  0x000000010e12f6b0:   cmp    rsi,QWORD PTR [rbx+0x400]
  0x000000010e12f6b7:   jne    0x000000010e12f6c6
  0x000000010e12f6b9:   add    QWORD PTR [rbx+0x408],0x1
  0x000000010e12f6c1:   jmp    0x000000010e12f807
  0x000000010e12f6c6:   cmp    QWORD PTR [rbx+0x390],0x0
  0x000000010e12f6d1:   jne    0x000000010e12f6ea
  0x000000010e12f6d3:   mov    QWORD PTR [rbx+0x390],rsi
  0x000000010e12f6da:   mov    QWORD PTR [rbx+0x398],0x1
  0x000000010e12f6e5:   jmp    0x000000010e12f807
  0x000000010e12f6ea:   cmp    QWORD PTR [rbx+0x3a0],0x0
  0x000000010e12f6f5:   jne    0x000000010e12f70e
  0x000000010e12f6f7:   mov    QWORD PTR [rbx+0x3a0],rsi
  0x000000010e12f6fe:   mov    QWORD PTR [rbx+0x3a8],0x1
  0x000000010e12f709:   jmp    0x000000010e12f807
  0x000000010e12f70e:   cmp    QWORD PTR [rbx+0x3b0],0x0
  0x000000010e12f719:   jne    0x000000010e12f732
  0x000000010e12f71b:   mov    QWORD PTR [rbx+0x3b0],rsi
  0x000000010e12f722:   mov    QWORD PTR [rbx+0x3b8],0x1
  0x000000010e12f72d:   jmp    0x000000010e12f807
  0x000000010e12f732:   cmp    QWORD PTR [rbx+0x3c0],0x0
  0x000000010e12f73d:   jne    0x000000010e12f756
  0x000000010e12f73f:   mov    QWORD PTR [rbx+0x3c0],rsi
  0x000000010e12f746:   mov    QWORD PTR [rbx+0x3c8],0x1
  0x000000010e12f751:   jmp    0x000000010e12f807
  0x000000010e12f756:   cmp    QWORD PTR [rbx+0x3d0],0x0
  0x000000010e12f761:   jne    0x000000010e12f77a
  0x000000010e12f763:   mov    QWORD PTR [rbx+0x3d0],rsi
  0x000000010e12f76a:   mov    QWORD PTR [rbx+0x3d8],0x1
  0x000000010e12f775:   jmp    0x000000010e12f807
  0x000000010e12f77a:   cmp    QWORD PTR [rbx+0x3e0],0x0
  0x000000010e12f785:   jne    0x000000010e12f79e
  0x000000010e12f787:   mov    QWORD PTR [rbx+0x3e0],rsi
  0x000000010e12f78e:   mov    QWORD PTR [rbx+0x3e8],0x1
  0x000000010e12f799:   jmp    0x000000010e12f807
  0x000000010e12f79e:   cmp    QWORD PTR [rbx+0x3f0],0x0
  0x000000010e12f7a9:   jne    0x000000010e12f7c2
  0x000000010e12f7ab:   mov    QWORD PTR [rbx+0x3f0],rsi
  0x000000010e12f7b2:   mov    QWORD PTR [rbx+0x3f8],0x1
  0x000000010e12f7bd:   jmp    0x000000010e12f807
  0x000000010e12f7c2:   cmp    QWORD PTR [rbx+0x400],0x0
  0x000000010e12f7cd:   jne    0x000000010e12f7e6
  0x000000010e12f7cf:   mov    QWORD PTR [rbx+0x400],rsi
  0x000000010e12f7d6:   mov    QWORD PTR [rbx+0x408],0x1
  0x000000010e12f7e1:   jmp    0x000000010e12f807
  0x000000010e12f7e6:   jmp    0x000000010e12f807
  0x000000010e12f7eb:   movabs rbx,0x10236af40              ;   {metadata(method data for {method} {0x00000001022ee080} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f7f5:   sub    QWORD PTR [rbx+0x380],0x1
  0x000000010e12f7fd:   jmp    0x000000010e13154f
  0x000000010e12f802:   jmp    0x000000010e12f807
  0x000000010e12f807:   mov    rdi,rax
  0x000000010e12f80a:   cmp    rax,QWORD PTR [rdi]          ; implicit exception: dispatches to 0x000000010e131558
  0x000000010e12f80d:   mov    rdx,rdi
  0x000000010e12f810:   movabs rsi,0x10244e740              ;   {metadata(method data for {method} {0x0000000102441d50} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x000000010e12f81a:   add    QWORD PTR [rsi+0x100],0x1
  0x000000010e12f822:   movabs rdx,0x10236b4a8              ;   {metadata(method data for {method} {0x00000001022e7af8} 'sub' '(S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f82c:   mov    esi,DWORD PTR [rdx+0xac]
  0x000000010e12f832:   add    esi,0x2
  0x000000010e12f835:   mov    DWORD PTR [rdx+0xac],esi
  0x000000010e12f83b:   and    esi,0x1ffffe
  0x000000010e12f841:   cmp    esi,0x0
  0x000000010e12f844:   je     0x000000010e13155d
  0x000000010e12f84a:   mov    rdx,rdi
  0x000000010e12f84d:   movabs rsi,0x10236b4a8              ;   {metadata(method data for {method} {0x00000001022e7af8} 'sub' '(S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f857:   add    QWORD PTR [rsi+0xf0],0x1
  0x000000010e12f85f:   movabs rdx,0x10236b660              ;   {metadata(method data for {method} {0x00000001022e6888} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f869:   mov    esi,DWORD PTR [rdx+0xac]
  0x000000010e12f86f:   add    esi,0x2
  0x000000010e12f872:   mov    DWORD PTR [rdx+0xac],esi
  0x000000010e12f878:   and    esi,0x1ffffe
  0x000000010e12f87e:   cmp    esi,0x0
  0x000000010e12f881:   je     0x000000010e13157e
  0x000000010e12f887:   movabs rdx,0x10236b660              ;   {metadata(method data for {method} {0x00000001022e6888} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f891:   add    QWORD PTR [rdx+0xf0],0x1
  0x000000010e12f899:   movabs rdx,0x102368748              ;   {metadata(method data for {method} {0x00000001022e41b0} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f8a3:   mov    esi,DWORD PTR [rdx+0xac]
  0x000000010e12f8a9:   add    esi,0x2
  0x000000010e12f8ac:   mov    DWORD PTR [rdx+0xac],esi
  0x000000010e12f8b2:   and    esi,0x1ffffe
  0x000000010e12f8b8:   cmp    esi,0x0
  0x000000010e12f8bb:   je     0x000000010e13159f
  0x000000010e12f8c1:   movabs rdx,0x102368748              ;   {metadata(method data for {method} {0x00000001022e41b0} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12f8cb:   add    QWORD PTR [rdx+0xf0],0x1
  0x000000010e12f8d3:   movabs rdx,0x102364d90              ;   {metadata(method data for {method} {0x0000000102153b80} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/VectorOperators')}
  0x000000010e12f8dd:   mov    esi,DWORD PTR [rdx+0xac]
  0x000000010e12f8e3:   add    esi,0x2
  0x000000010e12f8e6:   mov    DWORD PTR [rdx+0xac],esi
  0x000000010e12f8ec:   and    esi,0x1ffffe
  0x000000010e12f8f2:   cmp    esi,0x0
  0x000000010e12f8f5:   je     0x000000010e1315c0
  0x000000010e12f8fb:   movabs rdx,0x61a800208              ;   {oop(a 'jdk/incubator/vector/VectorOperators$BinaryImpl'{0x000000061a800208})}
  0x000000010e12f905:   movabs rsi,0x102364d90              ;   {metadata(method data for {method} {0x0000000102153b80} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/VectorOperators')}
  0x000000010e12f90f:   mov    edx,DWORD PTR [rdx+0x8]
  0x000000010e12f912:   movabs r10,0x800000000
  0x000000010e12f91c:   add    rdx,r10
  0x000000010e12f91f:   cmp    rdx,QWORD PTR [rsi+0x198]
  0x000000010e12f926:   jne    0x000000010e12f935
  0x000000010e12f928:   add    QWORD PTR [rsi+0x1a0],0x1
  0x000000010e12f930:   jmp    0x000000010e12faf7
  0x000000010e12f935:   cmp    rdx,QWORD PTR [rsi+0x1a8]
  0x000000010e12f93c:   jne    0x000000010e12f94b
  0x000000010e12f93e:   add    QWORD PTR [rsi+0x1b0],0x1
  0x000000010e12f946:   jmp    0x000000010e12faf7
  0x000000010e12f94b:   cmp    rdx,QWORD PTR [rsi+0x1b8]
  0x000000010e12f952:   jne    0x000000010e12f961
  0x000000010e12f954:   add    QWORD PTR [rsi+0x1c0],0x1
  0x000000010e12f95c:   jmp    0x000000010e12faf7
  0x000000010e12f961:   cmp    rdx,QWORD PTR [rsi+0x1c8]
  0x000000010e12f968:   jne    0x000000010e12f977
  0x000000010e12f96a:   add    QWORD PTR [rsi+0x1d0],0x1
  0x000000010e12f972:   jmp    0x000000010e12faf7
  0x000000010e12f977:   cmp    rdx,QWORD PTR [rsi+0x1d8]
  0x000000010e12f97e:   jne    0x000000010e12f98d
  0x000000010e12f980:   add    QWORD PTR [rsi+0x1e0],0x1
  0x000000010e12f988:   jmp    0x000000010e12faf7
  0x000000010e12f98d:   cmp    rdx,QWORD PTR [rsi+0x1e8]
  0x000000010e12f994:   jne    0x000000010e12f9a3
  0x000000010e12f996:   add    QWORD PTR [rsi+0x1f0],0x1
  0x000000010e12f99e:   jmp    0x000000010e12faf7
  0x000000010e12f9a3:   cmp    rdx,QWORD PTR [rsi+0x1f8]
  0x000000010e12f9aa:   jne    0x000000010e12f9b9
  0x000000010e12f9ac:   add    QWORD PTR [rsi+0x200],0x1
  0x000000010e12f9b4:   jmp    0x000000010e12faf7
  0x000000010e12f9b9:   cmp    rdx,QWORD PTR [rsi+0x208]
  0x000000010e12f9c0:   jne    0x000000010e12f9cf
  0x000000010e12f9c2:   add    QWORD PTR [rsi+0x210],0x1
  0x000000010e12f9ca:   jmp    0x000000010e12faf7
  0x000000010e12f9cf:   cmp    QWORD PTR [rsi+0x198],0x0
  0x000000010e12f9da:   jne    0x000000010e12f9f3
  0x000000010e12f9dc:   mov    QWORD PTR [rsi+0x198],rdx
  0x000000010e12f9e3:   mov    QWORD PTR [rsi+0x1a0],0x1
  0x000000010e12f9ee:   jmp    0x000000010e12faf7
  0x000000010e12f9f3:   cmp    QWORD PTR [rsi+0x1a8],0x0
  0x000000010e12f9fe:   jne    0x000000010e12fa17
  0x000000010e12fa00:   mov    QWORD PTR [rsi+0x1a8],rdx
  0x000000010e12fa07:   mov    QWORD PTR [rsi+0x1b0],0x1
  0x000000010e12fa12:   jmp    0x000000010e12faf7
  0x000000010e12fa17:   cmp    QWORD PTR [rsi+0x1b8],0x0
  0x000000010e12fa22:   jne    0x000000010e12fa3b
  0x000000010e12fa24:   mov    QWORD PTR [rsi+0x1b8],rdx
  0x000000010e12fa2b:   mov    QWORD PTR [rsi+0x1c0],0x1
  0x000000010e12fa36:   jmp    0x000000010e12faf7
  0x000000010e12fa3b:   cmp    QWORD PTR [rsi+0x1c8],0x0
  0x000000010e12fa46:   jne    0x000000010e12fa5f
  0x000000010e12fa48:   mov    QWORD PTR [rsi+0x1c8],rdx
  0x000000010e12fa4f:   mov    QWORD PTR [rsi+0x1d0],0x1
  0x000000010e12fa5a:   jmp    0x000000010e12faf7
  0x000000010e12fa5f:   cmp    QWORD PTR [rsi+0x1d8],0x0
  0x000000010e12fa6a:   jne    0x000000010e12fa83
  0x000000010e12fa6c:   mov    QWORD PTR [rsi+0x1d8],rdx
  0x000000010e12fa73:   mov    QWORD PTR [rsi+0x1e0],0x1
  0x000000010e12fa7e:   jmp    0x000000010e12faf7
  0x000000010e12fa83:   cmp    QWORD PTR [rsi+0x1e8],0x0
  0x000000010e12fa8e:   jne    0x000000010e12faa7
  0x000000010e12fa90:   mov    QWORD PTR [rsi+0x1e8],rdx
  0x000000010e12fa97:   mov    QWORD PTR [rsi+0x1f0],0x1
  0x000000010e12faa2:   jmp    0x000000010e12faf7
  0x000000010e12faa7:   cmp    QWORD PTR [rsi+0x1f8],0x0
  0x000000010e12fab2:   jne    0x000000010e12facb
  0x000000010e12fab4:   mov    QWORD PTR [rsi+0x1f8],rdx
  0x000000010e12fabb:   mov    QWORD PTR [rsi+0x200],0x1
  0x000000010e12fac6:   jmp    0x000000010e12faf7
  0x000000010e12facb:   cmp    QWORD PTR [rsi+0x208],0x0
  0x000000010e12fad6:   jne    0x000000010e12faef
  0x000000010e12fad8:   mov    QWORD PTR [rsi+0x208],rdx
  0x000000010e12fadf:   mov    QWORD PTR [rsi+0x210],0x1
  0x000000010e12faea:   jmp    0x000000010e12faf7
  0x000000010e12faef:   add    QWORD PTR [rsi+0x188],0x1
  0x000000010e12faf7:   movabs rdx,0x102364fd8              ;   {metadata(method data for {method} {0x0000000102345918} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl')}
  0x000000010e12fb01:   mov    esi,DWORD PTR [rdx+0xac]
  0x000000010e12fb07:   add    esi,0x2
  0x000000010e12fb0a:   mov    DWORD PTR [rdx+0xac],esi
  0x000000010e12fb10:   and    esi,0x1ffffe
  0x000000010e12fb16:   cmp    esi,0x0
  0x000000010e12fb19:   je     0x000000010e1315e1
  0x000000010e12fb1f:   movabs rdx,0x102364fd8              ;   {metadata(method data for {method} {0x0000000102345918} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl')}
  0x000000010e12fb29:   inc    DWORD PTR [rdx+0xf0]
  0x000000010e12fb2f:   movabs rdx,0x10236b660              ;   {metadata(method data for {method} {0x00000001022e6888} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12fb39:   inc    DWORD PTR [rdx+0x100]
  0x000000010e12fb3f:   movabs rdx,0x10236b660              ;   {metadata(method data for {method} {0x00000001022e6888} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12fb49:   inc    DWORD PTR [rdx+0x1d8]
  0x000000010e12fb4f:   mov    rdx,rdi
  0x000000010e12fb52:   movabs rsi,0x10236b660              ;   {metadata(method data for {method} {0x00000001022e6888} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12fb5c:   mov    edx,DWORD PTR [rdx+0x8]
  0x000000010e12fb5f:   movabs r10,0x800000000
  0x000000010e12fb69:   add    rdx,r10
  0x000000010e12fb6c:   cmp    rdx,QWORD PTR [rsi+0x208]
  0x000000010e12fb73:   jne    0x000000010e12fb82
  0x000000010e12fb75:   add    QWORD PTR [rsi+0x210],0x1
  0x000000010e12fb7d:   jmp    0x000000010e12fd44
  0x000000010e12fb82:   cmp    rdx,QWORD PTR [rsi+0x218]
  0x000000010e12fb89:   jne    0x000000010e12fb98
  0x000000010e12fb8b:   add    QWORD PTR [rsi+0x220],0x1
  0x000000010e12fb93:   jmp    0x000000010e12fd44
  0x000000010e12fb98:   cmp    rdx,QWORD PTR [rsi+0x228]
  0x000000010e12fb9f:   jne    0x000000010e12fbae
  0x000000010e12fba1:   add    QWORD PTR [rsi+0x230],0x1
  0x000000010e12fba9:   jmp    0x000000010e12fd44
  0x000000010e12fbae:   cmp    rdx,QWORD PTR [rsi+0x238]
  0x000000010e12fbb5:   jne    0x000000010e12fbc4
  0x000000010e12fbb7:   add    QWORD PTR [rsi+0x240],0x1
  0x000000010e12fbbf:   jmp    0x000000010e12fd44
  0x000000010e12fbc4:   cmp    rdx,QWORD PTR [rsi+0x248]
  0x000000010e12fbcb:   jne    0x000000010e12fbda
  0x000000010e12fbcd:   add    QWORD PTR [rsi+0x250],0x1
  0x000000010e12fbd5:   jmp    0x000000010e12fd44
  0x000000010e12fbda:   cmp    rdx,QWORD PTR [rsi+0x258]
  0x000000010e12fbe1:   jne    0x000000010e12fbf0
  0x000000010e12fbe3:   add    QWORD PTR [rsi+0x260],0x1
  0x000000010e12fbeb:   jmp    0x000000010e12fd44
  0x000000010e12fbf0:   cmp    rdx,QWORD PTR [rsi+0x268]
  0x000000010e12fbf7:   jne    0x000000010e12fc06
  0x000000010e12fbf9:   add    QWORD PTR [rsi+0x270],0x1
  0x000000010e12fc01:   jmp    0x000000010e12fd44
  0x000000010e12fc06:   cmp    rdx,QWORD PTR [rsi+0x278]
  0x000000010e12fc0d:   jne    0x000000010e12fc1c
  0x000000010e12fc0f:   add    QWORD PTR [rsi+0x280],0x1
  0x000000010e12fc17:   jmp    0x000000010e12fd44
  0x000000010e12fc1c:   cmp    QWORD PTR [rsi+0x208],0x0
  0x000000010e12fc27:   jne    0x000000010e12fc40
  0x000000010e12fc29:   mov    QWORD PTR [rsi+0x208],rdx
  0x000000010e12fc30:   mov    QWORD PTR [rsi+0x210],0x1
  0x000000010e12fc3b:   jmp    0x000000010e12fd44
  0x000000010e12fc40:   cmp    QWORD PTR [rsi+0x218],0x0
  0x000000010e12fc4b:   jne    0x000000010e12fc64
  0x000000010e12fc4d:   mov    QWORD PTR [rsi+0x218],rdx
  0x000000010e12fc54:   mov    QWORD PTR [rsi+0x220],0x1
  0x000000010e12fc5f:   jmp    0x000000010e12fd44
  0x000000010e12fc64:   cmp    QWORD PTR [rsi+0x228],0x0
  0x000000010e12fc6f:   jne    0x000000010e12fc88
  0x000000010e12fc71:   mov    QWORD PTR [rsi+0x228],rdx
  0x000000010e12fc78:   mov    QWORD PTR [rsi+0x230],0x1
  0x000000010e12fc83:   jmp    0x000000010e12fd44
  0x000000010e12fc88:   cmp    QWORD PTR [rsi+0x238],0x0
  0x000000010e12fc93:   jne    0x000000010e12fcac
  0x000000010e12fc95:   mov    QWORD PTR [rsi+0x238],rdx
  0x000000010e12fc9c:   mov    QWORD PTR [rsi+0x240],0x1
  0x000000010e12fca7:   jmp    0x000000010e12fd44
  0x000000010e12fcac:   cmp    QWORD PTR [rsi+0x248],0x0
  0x000000010e12fcb7:   jne    0x000000010e12fcd0
  0x000000010e12fcb9:   mov    QWORD PTR [rsi+0x248],rdx
  0x000000010e12fcc0:   mov    QWORD PTR [rsi+0x250],0x1
  0x000000010e12fccb:   jmp    0x000000010e12fd44
  0x000000010e12fcd0:   cmp    QWORD PTR [rsi+0x258],0x0
  0x000000010e12fcdb:   jne    0x000000010e12fcf4
  0x000000010e12fcdd:   mov    QWORD PTR [rsi+0x258],rdx
  0x000000010e12fce4:   mov    QWORD PTR [rsi+0x260],0x1
  0x000000010e12fcef:   jmp    0x000000010e12fd44
  0x000000010e12fcf4:   cmp    QWORD PTR [rsi+0x268],0x0
  0x000000010e12fcff:   jne    0x000000010e12fd18
  0x000000010e12fd01:   mov    QWORD PTR [rsi+0x268],rdx
  0x000000010e12fd08:   mov    QWORD PTR [rsi+0x270],0x1
  0x000000010e12fd13:   jmp    0x000000010e12fd44
  0x000000010e12fd18:   cmp    QWORD PTR [rsi+0x278],0x0
  0x000000010e12fd23:   jne    0x000000010e12fd3c
  0x000000010e12fd25:   mov    QWORD PTR [rsi+0x278],rdx
  0x000000010e12fd2c:   mov    QWORD PTR [rsi+0x280],0x1
  0x000000010e12fd37:   jmp    0x000000010e12fd44
  0x000000010e12fd3c:   add    QWORD PTR [rsi+0x1f8],0x1
  0x000000010e12fd44:   mov    edx,0x30
  0x000000010e12fd49:   mov    rsi,rdi
  0x000000010e12fd4c:   mov    QWORD PTR [rsp+0xf0],rdi
  0x000000010e12fd54:   nop
  0x000000010e12fd55:   movabs rax,0x800c20b60
  0x000000010e12fd5f:   call   0x000000010e12c120           ; ImmutableOopMap {[240]=Oop }
                                                            ;*invokevirtual broadcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@42 (line 711)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {virtual_call}
  0x000000010e12fd64:   mov    rdi,QWORD PTR [rsp+0xf0]
  0x000000010e12fd6c:   movabs rdx,0x10236b660              ;   {metadata(method data for {method} {0x00000001022e6888} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e12fd76:   mov    edi,DWORD PTR [rdi+0x8]
  0x000000010e12fd79:   movabs r10,0x800000000
  0x000000010e12fd83:   add    rdi,r10
  0x000000010e12fd86:   cmp    rdi,QWORD PTR [rdx+0x2a0]
  0x000000010e12fd8d:   jne    0x000000010e12fd9c
  0x000000010e12fd8f:   add    QWORD PTR [rdx+0x2a8],0x1
  0x000000010e12fd97:   jmp    0x000000010e12ff5e
  0x000000010e12fd9c:   cmp    rdi,QWORD PTR [rdx+0x2b0]
  0x000000010e12fda3:   jne    0x000000010e12fdb2
  0x000000010e12fda5:   add    QWORD PTR [rdx+0x2b8],0x1
  0x000000010e12fdad:   jmp    0x000000010e12ff5e
  0x000000010e12fdb2:   cmp    rdi,QWORD PTR [rdx+0x2c0]
  0x000000010e12fdb9:   jne    0x000000010e12fdc8
  0x000000010e12fdbb:   add    QWORD PTR [rdx+0x2c8],0x1
  0x000000010e12fdc3:   jmp    0x000000010e12ff5e
  0x000000010e12fdc8:   cmp    rdi,QWORD PTR [rdx+0x2d0]
  0x000000010e12fdcf:   jne    0x000000010e12fdde
  0x000000010e12fdd1:   add    QWORD PTR [rdx+0x2d8],0x1
  0x000000010e12fdd9:   jmp    0x000000010e12ff5e
  0x000000010e12fdde:   cmp    rdi,QWORD PTR [rdx+0x2e0]
  0x000000010e12fde5:   jne    0x000000010e12fdf4
  0x000000010e12fde7:   add    QWORD PTR [rdx+0x2e8],0x1
  0x000000010e12fdef:   jmp    0x000000010e12ff5e
  0x000000010e12fdf4:   cmp    rdi,QWORD PTR [rdx+0x2f0]
  0x000000010e12fdfb:   jne    0x000000010e12fe0a
  0x000000010e12fdfd:   add    QWORD PTR [rdx+0x2f8],0x1
  0x000000010e12fe05:   jmp    0x000000010e12ff5e
  0x000000010e12fe0a:   cmp    rdi,QWORD PTR [rdx+0x300]
  0x000000010e12fe11:   jne    0x000000010e12fe20
  0x000000010e12fe13:   add    QWORD PTR [rdx+0x308],0x1
  0x000000010e12fe1b:   jmp    0x000000010e12ff5e
  0x000000010e12fe20:   cmp    rdi,QWORD PTR [rdx+0x310]
  0x000000010e12fe27:   jne    0x000000010e12fe36
  0x000000010e12fe29:   add    QWORD PTR [rdx+0x318],0x1
  0x000000010e12fe31:   jmp    0x000000010e12ff5e
  0x000000010e12fe36:   cmp    QWORD PTR [rdx+0x2a0],0x0
  0x000000010e12fe41:   jne    0x000000010e12fe5a
  0x000000010e12fe43:   mov    QWORD PTR [rdx+0x2a0],rdi
  0x000000010e12fe4a:   mov    QWORD PTR [rdx+0x2a8],0x1
  0x000000010e12fe55:   jmp    0x000000010e12ff5e
  0x000000010e12fe5a:   cmp    QWORD PTR [rdx+0x2b0],0x0
  0x000000010e12fe65:   jne    0x000000010e12fe7e
  0x000000010e12fe67:   mov    QWORD PTR [rdx+0x2b0],rdi
  0x000000010e12fe6e:   mov    QWORD PTR [rdx+0x2b8],0x1
  0x000000010e12fe79:   jmp    0x000000010e12ff5e
  0x000000010e12fe7e:   cmp    QWORD PTR [rdx+0x2c0],0x0
  0x000000010e12fe89:   jne    0x000000010e12fea2
  0x000000010e12fe8b:   mov    QWORD PTR [rdx+0x2c0],rdi
  0x000000010e12fe92:   mov    QWORD PTR [rdx+0x2c8],0x1
  0x000000010e12fe9d:   jmp    0x000000010e12ff5e
  0x000000010e12fea2:   cmp    QWORD PTR [rdx+0x2d0],0x0
  0x000000010e12fead:   jne    0x000000010e12fec6
  0x000000010e12feaf:   mov    QWORD PTR [rdx+0x2d0],rdi
  0x000000010e12feb6:   mov    QWORD PTR [rdx+0x2d8],0x1
  0x000000010e12fec1:   jmp    0x000000010e12ff5e
  0x000000010e12fec6:   cmp    QWORD PTR [rdx+0x2e0],0x0
  0x000000010e12fed1:   jne    0x000000010e12feea
  0x000000010e12fed3:   mov    QWORD PTR [rdx+0x2e0],rdi
  0x000000010e12feda:   mov    QWORD PTR [rdx+0x2e8],0x1
  0x000000010e12fee5:   jmp    0x000000010e12ff5e
  0x000000010e12feea:   cmp    QWORD PTR [rdx+0x2f0],0x0
  0x000000010e12fef5:   jne    0x000000010e12ff0e
  0x000000010e12fef7:   mov    QWORD PTR [rdx+0x2f0],rdi
  0x000000010e12fefe:   mov    QWORD PTR [rdx+0x2f8],0x1
  0x000000010e12ff09:   jmp    0x000000010e12ff5e
  0x000000010e12ff0e:   cmp    QWORD PTR [rdx+0x300],0x0
  0x000000010e12ff19:   jne    0x000000010e12ff32
  0x000000010e12ff1b:   mov    QWORD PTR [rdx+0x300],rdi
  0x000000010e12ff22:   mov    QWORD PTR [rdx+0x308],0x1
  0x000000010e12ff2d:   jmp    0x000000010e12ff5e
  0x000000010e12ff32:   cmp    QWORD PTR [rdx+0x310],0x0
  0x000000010e12ff3d:   jne    0x000000010e12ff56
  0x000000010e12ff3f:   mov    QWORD PTR [rdx+0x310],rdi
  0x000000010e12ff46:   mov    QWORD PTR [rdx+0x318],0x1
  0x000000010e12ff51:   jmp    0x000000010e12ff5e
  0x000000010e12ff56:   add    QWORD PTR [rdx+0x290],0x1
  0x000000010e12ff5e:   movabs rdx,0x61a800208              ;   {oop(a 'jdk/incubator/vector/VectorOperators$BinaryImpl'{0x000000061a800208})}
  0x000000010e12ff68:   mov    rcx,rax
  0x000000010e12ff6b:   mov    rsi,QWORD PTR [rsp+0xf0]
  0x000000010e12ff73:   xchg   ax,ax
  0x000000010e12ff75:   movabs rax,0x800c20b60
  0x000000010e12ff7f:   call   0x000000010e0ab5c0           ; ImmutableOopMap {}
                                                            ;*invokevirtual lanewise {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@45 (line 711)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {virtual_call}
  0x000000010e12ff84:   cmp    rax,QWORD PTR [rax]          ; implicit exception: dispatches to 0x000000010e131602
  0x000000010e12ff87:   mov    rdx,rax
  0x000000010e12ff8a:   movabs rcx,0x10244e740              ;   {metadata(method data for {method} {0x0000000102441d50} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x000000010e12ff94:   mov    edx,DWORD PTR [rdx+0x8]
  0x000000010e12ff97:   movabs r10,0x800000000
  0x000000010e12ffa1:   add    rdx,r10
  0x000000010e12ffa4:   cmp    rdx,QWORD PTR [rcx+0x1a8]
  0x000000010e12ffab:   jne    0x000000010e12ffba
  0x000000010e12ffad:   add    QWORD PTR [rcx+0x1b0],0x1
  0x000000010e12ffb5:   jmp    0x000000010e13017c
  0x000000010e12ffba:   cmp    rdx,QWORD PTR [rcx+0x1b8]
  0x000000010e12ffc1:   jne    0x000000010e12ffd0
  0x000000010e12ffc3:   add    QWORD PTR [rcx+0x1c0],0x1
  0x000000010e12ffcb:   jmp    0x000000010e13017c
  0x000000010e12ffd0:   cmp    rdx,QWORD PTR [rcx+0x1c8]
  0x000000010e12ffd7:   jne    0x000000010e12ffe6
  0x000000010e12ffd9:   add    QWORD PTR [rcx+0x1d0],0x1
  0x000000010e12ffe1:   jmp    0x000000010e13017c
  0x000000010e12ffe6:   cmp    rdx,QWORD PTR [rcx+0x1d8]
  0x000000010e12ffed:   jne    0x000000010e12fffc
  0x000000010e12ffef:   add    QWORD PTR [rcx+0x1e0],0x1
  0x000000010e12fff7:   jmp    0x000000010e13017c
  0x000000010e12fffc:   cmp    rdx,QWORD PTR [rcx+0x1e8]
  0x000000010e130003:   jne    0x000000010e130012
  0x000000010e130005:   add    QWORD PTR [rcx+0x1f0],0x1
  0x000000010e13000d:   jmp    0x000000010e13017c
  0x000000010e130012:   cmp    rdx,QWORD PTR [rcx+0x1f8]
  0x000000010e130019:   jne    0x000000010e130028
  0x000000010e13001b:   add    QWORD PTR [rcx+0x200],0x1
  0x000000010e130023:   jmp    0x000000010e13017c
  0x000000010e130028:   cmp    rdx,QWORD PTR [rcx+0x208]
  0x000000010e13002f:   jne    0x000000010e13003e
  0x000000010e130031:   add    QWORD PTR [rcx+0x210],0x1
  0x000000010e130039:   jmp    0x000000010e13017c
  0x000000010e13003e:   cmp    rdx,QWORD PTR [rcx+0x218]
  0x000000010e130045:   jne    0x000000010e130054
  0x000000010e130047:   add    QWORD PTR [rcx+0x220],0x1
  0x000000010e13004f:   jmp    0x000000010e13017c
  0x000000010e130054:   cmp    QWORD PTR [rcx+0x1a8],0x0
  0x000000010e13005f:   jne    0x000000010e130078
  0x000000010e130061:   mov    QWORD PTR [rcx+0x1a8],rdx
  0x000000010e130068:   mov    QWORD PTR [rcx+0x1b0],0x1
  0x000000010e130073:   jmp    0x000000010e13017c
  0x000000010e130078:   cmp    QWORD PTR [rcx+0x1b8],0x0
  0x000000010e130083:   jne    0x000000010e13009c
  0x000000010e130085:   mov    QWORD PTR [rcx+0x1b8],rdx
  0x000000010e13008c:   mov    QWORD PTR [rcx+0x1c0],0x1
  0x000000010e130097:   jmp    0x000000010e13017c
  0x000000010e13009c:   cmp    QWORD PTR [rcx+0x1c8],0x0
  0x000000010e1300a7:   jne    0x000000010e1300c0
  0x000000010e1300a9:   mov    QWORD PTR [rcx+0x1c8],rdx
  0x000000010e1300b0:   mov    QWORD PTR [rcx+0x1d0],0x1
  0x000000010e1300bb:   jmp    0x000000010e13017c
  0x000000010e1300c0:   cmp    QWORD PTR [rcx+0x1d8],0x0
  0x000000010e1300cb:   jne    0x000000010e1300e4
  0x000000010e1300cd:   mov    QWORD PTR [rcx+0x1d8],rdx
  0x000000010e1300d4:   mov    QWORD PTR [rcx+0x1e0],0x1
  0x000000010e1300df:   jmp    0x000000010e13017c
  0x000000010e1300e4:   cmp    QWORD PTR [rcx+0x1e8],0x0
  0x000000010e1300ef:   jne    0x000000010e130108
  0x000000010e1300f1:   mov    QWORD PTR [rcx+0x1e8],rdx
  0x000000010e1300f8:   mov    QWORD PTR [rcx+0x1f0],0x1
  0x000000010e130103:   jmp    0x000000010e13017c
  0x000000010e130108:   cmp    QWORD PTR [rcx+0x1f8],0x0
  0x000000010e130113:   jne    0x000000010e13012c
  0x000000010e130115:   mov    QWORD PTR [rcx+0x1f8],rdx
  0x000000010e13011c:   mov    QWORD PTR [rcx+0x200],0x1
  0x000000010e130127:   jmp    0x000000010e13017c
  0x000000010e13012c:   cmp    QWORD PTR [rcx+0x208],0x0
  0x000000010e130137:   jne    0x000000010e130150
  0x000000010e130139:   mov    QWORD PTR [rcx+0x208],rdx
  0x000000010e130140:   mov    QWORD PTR [rcx+0x210],0x1
  0x000000010e13014b:   jmp    0x000000010e13017c
  0x000000010e130150:   cmp    QWORD PTR [rcx+0x218],0x0
  0x000000010e13015b:   jne    0x000000010e130174
  0x000000010e13015d:   mov    QWORD PTR [rcx+0x218],rdx
  0x000000010e130164:   mov    QWORD PTR [rcx+0x220],0x1
  0x000000010e13016f:   jmp    0x000000010e13017c
  0x000000010e130174:   add    QWORD PTR [rcx+0x198],0x1
  0x000000010e13017c:   movabs rdx,0x61a800220              ;   {oop(a 'jdk/incubator/vector/VectorOperators$ComparisonImpl'{0x000000061a800220})}
  0x000000010e130186:   movabs rcx,0x9
  0x000000010e130190:   mov    rsi,rax
  0x000000010e130193:   mov    QWORD PTR [rsp+0xf8],rax
  0x000000010e13019b:   xchg   ax,ax
  0x000000010e13019d:   movabs rax,0x800c20b60
  0x000000010e1301a7:   call   0x000000010e0a9ec0           ; ImmutableOopMap {[248]=Oop }
                                                            ;*invokevirtual compare {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@21 (line 603)
                                                            ;   {virtual_call}
  0x000000010e1301ac:   cmp    rax,QWORD PTR [rax]          ; implicit exception: dispatches to 0x000000010e131607
  0x000000010e1301af:   mov    rsi,rax
  0x000000010e1301b2:   movabs rdx,0x10244e740              ;   {metadata(method data for {method} {0x0000000102441d50} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x000000010e1301bc:   add    QWORD PTR [rdx+0x230],0x1
  0x000000010e1301c4:   movabs rsi,0x10236b9c8              ;   {metadata(method data for {method} {0x00000001023163c0} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e1301ce:   mov    edx,DWORD PTR [rsi+0xac]
  0x000000010e1301d4:   add    edx,0x2
  0x000000010e1301d7:   mov    DWORD PTR [rsi+0xac],edx
  0x000000010e1301dd:   and    edx,0x1ffffe
  0x000000010e1301e3:   cmp    edx,0x0
  0x000000010e1301e6:   je     0x000000010e13160c
  0x000000010e1301ec:   mov    rsi,rax
  0x000000010e1301ef:   movabs rdx,0x10236b9c8              ;   {metadata(method data for {method} {0x00000001023163c0} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e1301f9:   add    QWORD PTR [rdx+0xf0],0x1
  0x000000010e130201:   movabs rsi,0x10236bc38              ;   {metadata(method data for {method} {0x00000001023155f8} 'vspecies' '()Ljdk/incubator/vector/ShortVector$ShortSpecies;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e13020b:   mov    edx,DWORD PTR [rsi+0xac]
  0x000000010e130211:   add    edx,0x2
  0x000000010e130214:   mov    DWORD PTR [rsi+0xac],edx
  0x000000010e13021a:   and    edx,0x1ffffe
  0x000000010e130220:   cmp    edx,0x0
  0x000000010e130223:   je     0x000000010e13162d
  0x000000010e130229:   movabs rsi,0x61a8000e8              ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061a8000e8})}
  0x000000010e130233:   mov    rdx,rsi
  0x000000010e130236:   movabs rcx,0x10236b9c8              ;   {metadata(method data for {method} {0x00000001023163c0} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e130240:   add    QWORD PTR [rcx+0x188],0x1
  0x000000010e130248:   movabs rdx,0x10236bd48              ;   {metadata(method data for {method} {0x00000001022fd518} 'maskAll' '(Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x000000010e130252:   mov    ecx,DWORD PTR [rdx+0xac]
  0x000000010e130258:   add    ecx,0x2
  0x000000010e13025b:   mov    DWORD PTR [rdx+0xac],ecx
  0x000000010e130261:   and    ecx,0x1ffffe
  0x000000010e130267:   cmp    ecx,0x0
  0x000000010e13026a:   je     0x000000010e13164e
  0x000000010e130270:   movabs rdx,0x10236bd48              ;   {metadata(method data for {method} {0x00000001022fd518} 'maskAll' '(Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x000000010e13027a:   add    QWORD PTR [rdx+0xf0],0x1
  0x000000010e130282:   movabs rsi,0x10236bd48              ;   {metadata(method data for {method} {0x00000001022fd518} 'maskAll' '(Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x000000010e13028c:   inc    DWORD PTR [rsi+0x188]
  0x000000010e130292:   movabs rsi,0x61a8000e8              ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061a8000e8})}
  0x000000010e13029c:   movabs rdx,0x10236bd48              ;   {metadata(method data for {method} {0x00000001022fd518} 'maskAll' '(Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x000000010e1302a6:   add    QWORD PTR [rdx+0x1b8],0x1
  0x000000010e1302ae:   movabs rsi,0x10236bd48              ;   {metadata(method data for {method} {0x00000001022fd518} 'maskAll' '(Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x000000010e1302b8:   add    QWORD PTR [rsi+0x2c0],0x1
  0x000000010e1302c0:   movabs rsi,0x10236c080              ;   {metadata(method data for {method} {0x0000000102316570} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e1302ca:   mov    edx,DWORD PTR [rsi+0xac]
  0x000000010e1302d0:   add    edx,0x2
  0x000000010e1302d3:   mov    DWORD PTR [rsi+0xac],edx
  0x000000010e1302d9:   and    edx,0x1ffffe
  0x000000010e1302df:   cmp    edx,0x0
  0x000000010e1302e2:   je     0x000000010e13166f
  0x000000010e1302e8:   movabs rsi,0x10236c080              ;   {metadata(method data for {method} {0x0000000102316570} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e1302f2:   inc    DWORD PTR [rsi+0x100]
  0x000000010e1302f8:   movabs rsi,0x10236c080              ;   {metadata(method data for {method} {0x0000000102316570} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e130302:   inc    DWORD PTR [rsi+0x110]
  0x000000010e130308:   mov    QWORD PTR [rsp+0x100],rax
  0x000000010e130310:   movabs rsi,0x10236c080              ;   {metadata(method data for {method} {0x0000000102316570} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e13031a:   add    QWORD PTR [rsi+0x128],0x1
  0x000000010e130322:   movabs rsi,0x10235e958              ;   {metadata(method data for {method} {0x00000008000e5db8} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x000000010e13032c:   mov    edx,DWORD PTR [rsi+0xac]
  0x000000010e130332:   add    edx,0x2
  0x000000010e130335:   mov    DWORD PTR [rsi+0xac],edx
  0x000000010e13033b:   and    edx,0x1ffffe
  0x000000010e130341:   cmp    edx,0x0
  0x000000010e130344:   je     0x000000010e131690
  0x000000010e13034a:   movabs rsi,0x10235e958              ;   {metadata(method data for {method} {0x00000008000e5db8} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x000000010e130354:   add    QWORD PTR [rsi+0x188],0x1
  0x000000010e13035c:   movabs rsi,0x102400490              ;   {metadata(method data for {method} {0x0000000102400268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x000000010e130366:   mov    edx,DWORD PTR [rsi+0xac]
  0x000000010e13036c:   add    edx,0x2
  0x000000010e13036f:   mov    DWORD PTR [rsi+0xac],edx
  0x000000010e130375:   and    edx,0x1ffffe
  0x000000010e13037b:   cmp    edx,0x0
  0x000000010e13037e:   je     0x000000010e1316b1
  0x000000010e130384:   movabs rsi,0x10236c080              ;   {metadata(method data for {method} {0x0000000102316570} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e13038e:   add    QWORD PTR [rsi+0x138],0x1
  0x000000010e130396:   movabs rsi,0x61a804460              ;   {oop(a 'java/lang/Class'{0x000000061a804460} = 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e1303a0:   movabs rdx,0x7ffb00230              ;   {oop(a 'java/lang/Class'{0x00000007ffb00230} = short)}
  0x000000010e1303aa:   movabs r8,0xffffffffffffffff
  0x000000010e1303b4:   mov    ecx,0x8
  0x000000010e1303b9:   movabs r9,0x0                       ;   {oop(NULL)}
  0x000000010e1303c3:   movabs rdi,0x61a800238              ;   {oop(a 'jdk/incubator/vector/Short128Vector$Short128Mask$$Lambda$91+0x0000000800c29a10'{0x000000061a800238})}
  0x000000010e1303cd:   xchg   ax,ax
  0x000000010e1303cf:   call   0x00000001155054e0           ; ImmutableOopMap {[248]=Oop [256]=Oop }
                                                            ;*invokestatic broadcastCoerced {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::maskAll@24 (line 703)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@66 (line 4010)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {static_call}
  0x000000010e1303d4:   cmp    rax,0x0
  0x000000010e1303d8:   jne    0x000000010e1303f0
  0x000000010e1303da:   movabs rcx,0x10236c080              ;   {metadata(method data for {method} {0x0000000102316570} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e1303e4:   or     BYTE PTR [rcx+0x141],0x1
  0x000000010e1303eb:   jmp    0x000000010e13061e
  0x000000010e1303f0:   movabs rdx,0x800c211a0              ;   {metadata('jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e1303fa:   mov    esi,DWORD PTR [rax+0x8]
  0x000000010e1303fd:   movabs r10,0x800000000
  0x000000010e130407:   add    rsi,r10
  0x000000010e13040a:   cmp    rdx,rsi
  0x000000010e13040d:   jne    0x000000010e130602
  0x000000010e130413:   movabs rcx,0x10236c080              ;   {metadata(method data for {method} {0x0000000102316570} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e13041d:   mov    edx,DWORD PTR [rax+0x8]
  0x000000010e130420:   movabs r10,0x800000000
  0x000000010e13042a:   add    rdx,r10
  0x000000010e13042d:   cmp    rdx,QWORD PTR [rcx+0x158]
  0x000000010e130434:   jne    0x000000010e130443
  0x000000010e130436:   add    QWORD PTR [rcx+0x160],0x1
  0x000000010e13043e:   jmp    0x000000010e13061e
  0x000000010e130443:   cmp    rdx,QWORD PTR [rcx+0x168]
  0x000000010e13044a:   jne    0x000000010e130459
  0x000000010e13044c:   add    QWORD PTR [rcx+0x170],0x1
  0x000000010e130454:   jmp    0x000000010e13061e
  0x000000010e130459:   cmp    rdx,QWORD PTR [rcx+0x178]
  0x000000010e130460:   jne    0x000000010e13046f
  0x000000010e130462:   add    QWORD PTR [rcx+0x180],0x1
  0x000000010e13046a:   jmp    0x000000010e13061e
  0x000000010e13046f:   cmp    rdx,QWORD PTR [rcx+0x188]
  0x000000010e130476:   jne    0x000000010e130485
  0x000000010e130478:   add    QWORD PTR [rcx+0x190],0x1
  0x000000010e130480:   jmp    0x000000010e13061e
  0x000000010e130485:   cmp    rdx,QWORD PTR [rcx+0x198]
  0x000000010e13048c:   jne    0x000000010e13049b
  0x000000010e13048e:   add    QWORD PTR [rcx+0x1a0],0x1
  0x000000010e130496:   jmp    0x000000010e13061e
  0x000000010e13049b:   cmp    rdx,QWORD PTR [rcx+0x1a8]
  0x000000010e1304a2:   jne    0x000000010e1304b1
  0x000000010e1304a4:   add    QWORD PTR [rcx+0x1b0],0x1
  0x000000010e1304ac:   jmp    0x000000010e13061e
  0x000000010e1304b1:   cmp    rdx,QWORD PTR [rcx+0x1b8]
  0x000000010e1304b8:   jne    0x000000010e1304c7
  0x000000010e1304ba:   add    QWORD PTR [rcx+0x1c0],0x1
  0x000000010e1304c2:   jmp    0x000000010e13061e
  0x000000010e1304c7:   cmp    rdx,QWORD PTR [rcx+0x1c8]
  0x000000010e1304ce:   jne    0x000000010e1304dd
  0x000000010e1304d0:   add    QWORD PTR [rcx+0x1d0],0x1
  0x000000010e1304d8:   jmp    0x000000010e13061e
  0x000000010e1304dd:   cmp    QWORD PTR [rcx+0x158],0x0
  0x000000010e1304e8:   jne    0x000000010e130501
  0x000000010e1304ea:   mov    QWORD PTR [rcx+0x158],rdx
  0x000000010e1304f1:   mov    QWORD PTR [rcx+0x160],0x1
  0x000000010e1304fc:   jmp    0x000000010e13061e
  0x000000010e130501:   cmp    QWORD PTR [rcx+0x168],0x0
  0x000000010e13050c:   jne    0x000000010e130525
  0x000000010e13050e:   mov    QWORD PTR [rcx+0x168],rdx
  0x000000010e130515:   mov    QWORD PTR [rcx+0x170],0x1
  0x000000010e130520:   jmp    0x000000010e13061e
  0x000000010e130525:   cmp    QWORD PTR [rcx+0x178],0x0
  0x000000010e130530:   jne    0x000000010e130549
  0x000000010e130532:   mov    QWORD PTR [rcx+0x178],rdx
  0x000000010e130539:   mov    QWORD PTR [rcx+0x180],0x1
  0x000000010e130544:   jmp    0x000000010e13061e
  0x000000010e130549:   cmp    QWORD PTR [rcx+0x188],0x0
  0x000000010e130554:   jne    0x000000010e13056d
  0x000000010e130556:   mov    QWORD PTR [rcx+0x188],rdx
  0x000000010e13055d:   mov    QWORD PTR [rcx+0x190],0x1
  0x000000010e130568:   jmp    0x000000010e13061e
  0x000000010e13056d:   cmp    QWORD PTR [rcx+0x198],0x0
  0x000000010e130578:   jne    0x000000010e130591
  0x000000010e13057a:   mov    QWORD PTR [rcx+0x198],rdx
  0x000000010e130581:   mov    QWORD PTR [rcx+0x1a0],0x1
  0x000000010e13058c:   jmp    0x000000010e13061e
  0x000000010e130591:   cmp    QWORD PTR [rcx+0x1a8],0x0
  0x000000010e13059c:   jne    0x000000010e1305b5
  0x000000010e13059e:   mov    QWORD PTR [rcx+0x1a8],rdx
  0x000000010e1305a5:   mov    QWORD PTR [rcx+0x1b0],0x1
  0x000000010e1305b0:   jmp    0x000000010e13061e
  0x000000010e1305b5:   cmp    QWORD PTR [rcx+0x1b8],0x0
  0x000000010e1305c0:   jne    0x000000010e1305d9
  0x000000010e1305c2:   mov    QWORD PTR [rcx+0x1b8],rdx
  0x000000010e1305c9:   mov    QWORD PTR [rcx+0x1c0],0x1
  0x000000010e1305d4:   jmp    0x000000010e13061e
  0x000000010e1305d9:   cmp    QWORD PTR [rcx+0x1c8],0x0
  0x000000010e1305e4:   jne    0x000000010e1305fd
  0x000000010e1305e6:   mov    QWORD PTR [rcx+0x1c8],rdx
  0x000000010e1305ed:   mov    QWORD PTR [rcx+0x1d0],0x1
  0x000000010e1305f8:   jmp    0x000000010e13061e
  0x000000010e1305fd:   jmp    0x000000010e13061e
  0x000000010e130602:   movabs rcx,0x10236c080              ;   {metadata(method data for {method} {0x0000000102316570} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e13060c:   sub    QWORD PTR [rcx+0x148],0x1
  0x000000010e130614:   jmp    0x000000010e1316d2
  0x000000010e130619:   jmp    0x000000010e13061e
  0x000000010e13061e:   mov    rdi,rax
  0x000000010e130621:   mov    rax,QWORD PTR [rsp+0x100]
  0x000000010e130629:   movabs rsi,0x10236b9c8              ;   {metadata(method data for {method} {0x00000001023163c0} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e130633:   add    QWORD PTR [rsi+0x220],0x1
  0x000000010e13063b:   movabs rsi,0x10235e958              ;   {metadata(method data for {method} {0x00000008000e5db8} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x000000010e130645:   mov    edx,DWORD PTR [rsi+0xac]
  0x000000010e13064b:   add    edx,0x2
  0x000000010e13064e:   mov    DWORD PTR [rsi+0xac],edx
  0x000000010e130654:   and    edx,0x1ffffe
  0x000000010e13065a:   cmp    edx,0x0
  0x000000010e13065d:   je     0x000000010e1316db
  0x000000010e130663:   movabs rsi,0x10235e958              ;   {metadata(method data for {method} {0x00000008000e5db8} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x000000010e13066d:   add    QWORD PTR [rsi+0x188],0x1
  0x000000010e130675:   movabs rsi,0x102400490              ;   {metadata(method data for {method} {0x0000000102400268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x000000010e13067f:   mov    edx,DWORD PTR [rsi+0xac]
  0x000000010e130685:   add    edx,0x2
  0x000000010e130688:   mov    DWORD PTR [rsi+0xac],edx
  0x000000010e13068e:   and    edx,0x1ffffe
  0x000000010e130694:   cmp    edx,0x0
  0x000000010e130697:   je     0x000000010e1316fc
  0x000000010e13069d:   movabs rsi,0x10236b9c8              ;   {metadata(method data for {method} {0x00000001023163c0} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e1306a7:   add    QWORD PTR [rsi+0x230],0x1
  0x000000010e1306af:   movabs rdx,0x61a804460              ;   {oop(a 'java/lang/Class'{0x000000061a804460} = 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e1306b9:   movabs rcx,0x7ffb00230              ;   {oop(a 'java/lang/Class'{0x00000007ffb00230} = short)}
  0x000000010e1306c3:   mov    esi,0x4
  0x000000010e1306c8:   mov    r8d,0x8
  0x000000010e1306ce:   mov    r9,rax
  0x000000010e1306d1:   movabs r10,0x61a800248              ;   {oop(a 'jdk/incubator/vector/Short128Vector$Short128Mask$$Lambda$92+0x0000000800c29c30'{0x000000061a800248})}
  0x000000010e1306db:   mov    QWORD PTR [rsp],r10
  0x000000010e1306df:   call   0x000000010e0d5bc0           ; ImmutableOopMap {[248]=Oop }
                                                            ;*invokestatic test {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@23 (line 687)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {static_call}
  0x000000010e1306e4:   and    eax,0x1
  0x000000010e1306e7:   cmp    eax,0x0
  0x000000010e1306ea:   movabs rsi,0x10244e740              ;   {metadata(method data for {method} {0x0000000102441d50} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x000000010e1306f4:   movabs rdi,0x2d8
  0x000000010e1306fe:   jne    0x000000010e13070e
  0x000000010e130704:   movabs rdi,0x2c8
  0x000000010e13070e:   mov    rbx,QWORD PTR [rsi+rdi*1]
  0x000000010e130712:   lea    rbx,[rbx+0x1]
  0x000000010e130716:   mov    QWORD PTR [rsi+rdi*1],rbx
  0x000000010e13071a:   jne    0x000000010e131322
  0x000000010e130720:   mov    rax,QWORD PTR [rsp+0xf8]
  0x000000010e130728:   movabs rsi,0x10244e740              ;   {metadata(method data for {method} {0x0000000102441d50} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x000000010e130732:   add    QWORD PTR [rsi+0x2e8],0x1
  0x000000010e13073a:   movabs rsi,0x10236c608              ;   {metadata(method data for {method} {0x0000000102146418} 'castShape' '(Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/AbstractVector')}
  0x000000010e130744:   mov    edi,DWORD PTR [rsi+0xac]
  0x000000010e13074a:   add    edi,0x2
  0x000000010e13074d:   mov    DWORD PTR [rsi+0xac],edi
  0x000000010e130753:   and    edi,0x1ffffe
  0x000000010e130759:   cmp    edi,0x0
  0x000000010e13075c:   je     0x000000010e13171d
  0x000000010e130762:   mov    rax,QWORD PTR [rsp+0xf8]
  0x000000010e13076a:   movabs rsi,0x10236c608              ;   {metadata(method data for {method} {0x0000000102146418} 'castShape' '(Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/AbstractVector')}
  0x000000010e130774:   mov    eax,DWORD PTR [rax+0x8]
  0x000000010e130777:   movabs r10,0x800000000
  0x000000010e130781:   add    rax,r10
  0x000000010e130784:   cmp    rax,QWORD PTR [rsi+0x100]
  0x000000010e13078b:   jne    0x000000010e13079a
  0x000000010e13078d:   add    QWORD PTR [rsi+0x108],0x1
  0x000000010e130795:   jmp    0x000000010e13095c
  0x000000010e13079a:   cmp    rax,QWORD PTR [rsi+0x110]
  0x000000010e1307a1:   jne    0x000000010e1307b0
  0x000000010e1307a3:   add    QWORD PTR [rsi+0x118],0x1
  0x000000010e1307ab:   jmp    0x000000010e13095c
  0x000000010e1307b0:   cmp    rax,QWORD PTR [rsi+0x120]
  0x000000010e1307b7:   jne    0x000000010e1307c6
  0x000000010e1307b9:   add    QWORD PTR [rsi+0x128],0x1
  0x000000010e1307c1:   jmp    0x000000010e13095c
  0x000000010e1307c6:   cmp    rax,QWORD PTR [rsi+0x130]
  0x000000010e1307cd:   jne    0x000000010e1307dc
  0x000000010e1307cf:   add    QWORD PTR [rsi+0x138],0x1
  0x000000010e1307d7:   jmp    0x000000010e13095c
  0x000000010e1307dc:   cmp    rax,QWORD PTR [rsi+0x140]
  0x000000010e1307e3:   jne    0x000000010e1307f2
  0x000000010e1307e5:   add    QWORD PTR [rsi+0x148],0x1
  0x000000010e1307ed:   jmp    0x000000010e13095c
  0x000000010e1307f2:   cmp    rax,QWORD PTR [rsi+0x150]
  0x000000010e1307f9:   jne    0x000000010e130808
  0x000000010e1307fb:   add    QWORD PTR [rsi+0x158],0x1
  0x000000010e130803:   jmp    0x000000010e13095c
  0x000000010e130808:   cmp    rax,QWORD PTR [rsi+0x160]
  0x000000010e13080f:   jne    0x000000010e13081e
  0x000000010e130811:   add    QWORD PTR [rsi+0x168],0x1
  0x000000010e130819:   jmp    0x000000010e13095c
  0x000000010e13081e:   cmp    rax,QWORD PTR [rsi+0x170]
  0x000000010e130825:   jne    0x000000010e130834
  0x000000010e130827:   add    QWORD PTR [rsi+0x178],0x1
  0x000000010e13082f:   jmp    0x000000010e13095c
  0x000000010e130834:   cmp    QWORD PTR [rsi+0x100],0x0
  0x000000010e13083f:   jne    0x000000010e130858
  0x000000010e130841:   mov    QWORD PTR [rsi+0x100],rax
  0x000000010e130848:   mov    QWORD PTR [rsi+0x108],0x1
  0x000000010e130853:   jmp    0x000000010e13095c
  0x000000010e130858:   cmp    QWORD PTR [rsi+0x110],0x0
  0x000000010e130863:   jne    0x000000010e13087c
  0x000000010e130865:   mov    QWORD PTR [rsi+0x110],rax
  0x000000010e13086c:   mov    QWORD PTR [rsi+0x118],0x1
  0x000000010e130877:   jmp    0x000000010e13095c
  0x000000010e13087c:   cmp    QWORD PTR [rsi+0x120],0x0
  0x000000010e130887:   jne    0x000000010e1308a0
  0x000000010e130889:   mov    QWORD PTR [rsi+0x120],rax
  0x000000010e130890:   mov    QWORD PTR [rsi+0x128],0x1
  0x000000010e13089b:   jmp    0x000000010e13095c
  0x000000010e1308a0:   cmp    QWORD PTR [rsi+0x130],0x0
  0x000000010e1308ab:   jne    0x000000010e1308c4
  0x000000010e1308ad:   mov    QWORD PTR [rsi+0x130],rax
  0x000000010e1308b4:   mov    QWORD PTR [rsi+0x138],0x1
  0x000000010e1308bf:   jmp    0x000000010e13095c
  0x000000010e1308c4:   cmp    QWORD PTR [rsi+0x140],0x0
  0x000000010e1308cf:   jne    0x000000010e1308e8
  0x000000010e1308d1:   mov    QWORD PTR [rsi+0x140],rax
  0x000000010e1308d8:   mov    QWORD PTR [rsi+0x148],0x1
  0x000000010e1308e3:   jmp    0x000000010e13095c
  0x000000010e1308e8:   cmp    QWORD PTR [rsi+0x150],0x0
  0x000000010e1308f3:   jne    0x000000010e13090c
  0x000000010e1308f5:   mov    QWORD PTR [rsi+0x150],rax
  0x000000010e1308fc:   mov    QWORD PTR [rsi+0x158],0x1
  0x000000010e130907:   jmp    0x000000010e13095c
  0x000000010e13090c:   cmp    QWORD PTR [rsi+0x160],0x0
  0x000000010e130917:   jne    0x000000010e130930
  0x000000010e130919:   mov    QWORD PTR [rsi+0x160],rax
  0x000000010e130920:   mov    QWORD PTR [rsi+0x168],0x1
  0x000000010e13092b:   jmp    0x000000010e13095c
  0x000000010e130930:   cmp    QWORD PTR [rsi+0x170],0x0
  0x000000010e13093b:   jne    0x000000010e130954
  0x000000010e13093d:   mov    QWORD PTR [rsi+0x170],rax
  0x000000010e130944:   mov    QWORD PTR [rsi+0x178],0x1
  0x000000010e13094f:   jmp    0x000000010e13095c
  0x000000010e130954:   add    QWORD PTR [rsi+0xf0],0x1
  0x000000010e13095c:   mov    rsi,QWORD PTR [rsp+0xf8]
  0x000000010e130964:   nop
  0x000000010e130965:   movabs rax,0x800c20b60
  0x000000010e13096f:   call   0x000000010da267e0           ; ImmutableOopMap {[248]=Oop }
                                                            ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@1 (line 282)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {virtual_call}
  0x000000010e130974:   mov    edi,DWORD PTR [rax+0x28]     ; implicit exception: dispatches to 0x000000010e13173e
  0x000000010e130977:   shl    rdi,0x3
  0x000000010e13097b:   movabs rsi,0x10236c608              ;   {metadata(method data for {method} {0x0000000102146418} 'castShape' '(Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/AbstractVector')}
  0x000000010e130985:   add    QWORD PTR [rsi+0x220],0x1
  0x000000010e13098d:   movabs rsi,0x10236c910              ;   {metadata(method data for {method} {0x000000010234a5c8} 'ofCast' '(Ljdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130997:   mov    edx,DWORD PTR [rsi+0xac]
  0x000000010e13099d:   add    edx,0x2
  0x000000010e1309a0:   mov    DWORD PTR [rsi+0xac],edx
  0x000000010e1309a6:   and    edx,0x1ffffe
  0x000000010e1309ac:   cmp    edx,0x0
  0x000000010e1309af:   je     0x000000010e131743
  0x000000010e1309b5:   movabs rsi,0x6003e4430              ;   {oop(a 'jdk/incubator/vector/LaneType'{0x00000006003e4430})}
  0x000000010e1309bf:   cmp    rdi,rsi
  0x000000010e1309c2:   movabs rsi,0x10236c910              ;   {metadata(method data for {method} {0x000000010234a5c8} 'ofCast' '(Ljdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e1309cc:   movabs rdx,0xf0
  0x000000010e1309d6:   jne    0x000000010e1309e6
  0x000000010e1309dc:   movabs rdx,0x100
  0x000000010e1309e6:   mov    rcx,QWORD PTR [rsi+rdx*1]
  0x000000010e1309ea:   lea    rcx,[rcx+0x1]
  0x000000010e1309ee:   mov    QWORD PTR [rsi+rdx*1],rcx
  0x000000010e1309f2:   jne    0x000000010e130b74
  0x000000010e1309f8:   movabs rsi,0x10236c910              ;   {metadata(method data for {method} {0x000000010234a5c8} 'ofCast' '(Ljdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130a02:   add    QWORD PTR [rsi+0x110],0x1
  0x000000010e130a0a:   movabs rsi,0x10236ca78              ;   {metadata(method data for {method} {0x000000010234a508} 'ofCopy' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130a14:   mov    edx,DWORD PTR [rsi+0xac]
  0x000000010e130a1a:   add    edx,0x2
  0x000000010e130a1d:   mov    DWORD PTR [rsi+0xac],edx
  0x000000010e130a23:   and    edx,0x1ffffe
  0x000000010e130a29:   cmp    edx,0x0
  0x000000010e130a2c:   je     0x000000010e131764
  0x000000010e130a32:   movabs rsi,0x10236ca78              ;   {metadata(method data for {method} {0x000000010234a508} 'ofCopy' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130a3c:   add    QWORD PTR [rsi+0xf0],0x1
  0x000000010e130a44:   movabs rsi,0x10236cba0              ;   {metadata(method data for {method} {0x000000010234a7b8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130a4e:   mov    edx,DWORD PTR [rsi+0xac]
  0x000000010e130a54:   add    edx,0x2
  0x000000010e130a57:   mov    DWORD PTR [rsi+0xac],edx
  0x000000010e130a5d:   and    edx,0x1ffffe
  0x000000010e130a63:   cmp    edx,0x0
  0x000000010e130a66:   je     0x000000010e131785
  0x000000010e130a6c:   movabs rsi,0x10236cba0              ;   {metadata(method data for {method} {0x000000010234a7b8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130a76:   add    QWORD PTR [rsi+0xf0],0x1
  0x000000010e130a7e:   movabs rsi,0x102367e10              ;   {metadata(method data for {method} {0x000000010234ad08} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130a88:   mov    edx,DWORD PTR [rsi+0xac]
  0x000000010e130a8e:   add    edx,0x2
  0x000000010e130a91:   mov    DWORD PTR [rsi+0xac],edx
  0x000000010e130a97:   and    edx,0x1ffffe
  0x000000010e130a9d:   cmp    edx,0x0
  0x000000010e130aa0:   je     0x000000010e1317a6
  0x000000010e130aa6:   movabs rsi,0x102367e10              ;   {metadata(method data for {method} {0x000000010234ad08} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130ab0:   inc    DWORD PTR [rsi+0xf0]
  0x000000010e130ab6:   movabs rsi,0x102367e10              ;   {metadata(method data for {method} {0x000000010234ad08} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130ac0:   inc    DWORD PTR [rsi+0x1e8]
  0x000000010e130ac6:   movabs rsi,0x102367e10              ;   {metadata(method data for {method} {0x000000010234ad08} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130ad0:   inc    DWORD PTR [rsi+0x1f8]
  0x000000010e130ad6:   mov    esi,DWORD PTR [rdi+0x20]     ; implicit exception: dispatches to 0x000000010e1317c7
  0x000000010e130ad9:   mov    edx,0x7
  0x000000010e130ade:   movabs rcx,0x61a800258              ;   {oop(a 'jdk/incubator/vector/VectorOperators$ConversionImpl'[][7] {0x000000061a800258})}
  0x000000010e130ae8:   cmp    edx,esi
  0x000000010e130aea:   jbe    0x000000010e1317cc
  0x000000010e130af0:   movsxd rdx,esi
  0x000000010e130af3:   mov    edx,DWORD PTR [rcx+rdx*4+0x10]; implicit exception: dispatches to 0x000000010e1317da
  0x000000010e130af7:   shl    rdx,0x3
  0x000000010e130afb:   cmp    esi,DWORD PTR [rdx+0xc]      ; implicit exception: dispatches to 0x000000010e1317df
  0x000000010e130afe:   jae    0x000000010e1317e9
  0x000000010e130b04:   movsxd rsi,esi
  0x000000010e130b07:   mov    esi,DWORD PTR [rdx+rsi*4+0x10]
  0x000000010e130b0b:   shl    rsi,0x3
  0x000000010e130b0f:   cmp    rsi,0x0
  0x000000010e130b13:   movabs rdx,0x10236cba0              ;   {metadata(method data for {method} {0x000000010234a7b8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130b1d:   movabs rcx,0x110
  0x000000010e130b27:   jne    0x000000010e130b37
  0x000000010e130b2d:   movabs rcx,0x100
  0x000000010e130b37:   mov    rbx,QWORD PTR [rdx+rcx*1]
  0x000000010e130b3b:   lea    rbx,[rbx+0x1]
  0x000000010e130b3f:   mov    QWORD PTR [rdx+rcx*1],rbx
  0x000000010e130b43:   jne    0x000000010e130cb7
  0x000000010e130b49:   movabs rsi,0x10236cba0              ;   {metadata(method data for {method} {0x000000010234a7b8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130b53:   add    QWORD PTR [rsi+0x120],0x1
  0x000000010e130b5b:   mov    esi,0x49
  0x000000010e130b60:   mov    rdx,rdi
  0x000000010e130b63:   mov    rcx,rdi
  0x000000010e130b66:   nop
  0x000000010e130b67:   call   0x000000010da2a080           ; ImmutableOopMap {[248]=Oop }
                                                            ;*invokestatic makeConv {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@29 (line 1008)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {static_call}
  0x000000010e130b6c:   mov    rsi,rax
  0x000000010e130b6f:   jmp    0x000000010e130cb7
  0x000000010e130b74:   movabs rsi,0x10236c910              ;   {metadata(method data for {method} {0x000000010234a5c8} 'ofCast' '(Ljdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130b7e:   add    QWORD PTR [rsi+0x120],0x1
  0x000000010e130b86:   movabs rsi,0x10236cba0              ;   {metadata(method data for {method} {0x000000010234a7b8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130b90:   mov    edx,DWORD PTR [rsi+0xac]
  0x000000010e130b96:   add    edx,0x2
  0x000000010e130b99:   mov    DWORD PTR [rsi+0xac],edx
  0x000000010e130b9f:   and    edx,0x1ffffe
  0x000000010e130ba5:   cmp    edx,0x0
  0x000000010e130ba8:   je     0x000000010e1317f7
  0x000000010e130bae:   movabs rsi,0x10236cba0              ;   {metadata(method data for {method} {0x000000010234a7b8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130bb8:   add    QWORD PTR [rsi+0xf0],0x1
  0x000000010e130bc0:   movabs rsi,0x102367e10              ;   {metadata(method data for {method} {0x000000010234ad08} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130bca:   mov    edx,DWORD PTR [rsi+0xac]
  0x000000010e130bd0:   add    edx,0x2
  0x000000010e130bd3:   mov    DWORD PTR [rsi+0xac],edx
  0x000000010e130bd9:   and    edx,0x1ffffe
  0x000000010e130bdf:   cmp    edx,0x0
  0x000000010e130be2:   je     0x000000010e131818
  0x000000010e130be8:   movabs rsi,0x102367e10              ;   {metadata(method data for {method} {0x000000010234ad08} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130bf2:   inc    DWORD PTR [rsi+0xf0]
  0x000000010e130bf8:   movabs rsi,0x102367e10              ;   {metadata(method data for {method} {0x000000010234ad08} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130c02:   inc    DWORD PTR [rsi+0x1e8]
  0x000000010e130c08:   movabs rsi,0x102367e10              ;   {metadata(method data for {method} {0x000000010234ad08} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130c12:   inc    DWORD PTR [rsi+0x1f8]
  0x000000010e130c18:   mov    esi,DWORD PTR [rdi+0x20]     ; implicit exception: dispatches to 0x000000010e131839
  0x000000010e130c1b:   mov    edx,0x7
  0x000000010e130c20:   movabs rcx,0x61a800258              ;   {oop(a 'jdk/incubator/vector/VectorOperators$ConversionImpl'[][7] {0x000000061a800258})}
  0x000000010e130c2a:   cmp    edx,esi
  0x000000010e130c2c:   jbe    0x000000010e13183e
  0x000000010e130c32:   movsxd rsi,esi
  0x000000010e130c35:   mov    esi,DWORD PTR [rcx+rsi*4+0x10]; implicit exception: dispatches to 0x000000010e13184c
  0x000000010e130c39:   shl    rsi,0x3
  0x000000010e130c3d:   cmp    DWORD PTR [rsi+0xc],0x5      ; implicit exception: dispatches to 0x000000010e131851
  0x000000010e130c44:   jbe    0x000000010e13185b
  0x000000010e130c4a:   mov    esi,DWORD PTR [rsi+0x24]
  0x000000010e130c4d:   shl    rsi,0x3
  0x000000010e130c51:   cmp    rsi,0x0
  0x000000010e130c55:   movabs rdx,0x10236cba0              ;   {metadata(method data for {method} {0x000000010234a7b8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130c5f:   movabs rcx,0x110
  0x000000010e130c69:   jne    0x000000010e130c79
  0x000000010e130c6f:   movabs rcx,0x100
  0x000000010e130c79:   mov    rbx,QWORD PTR [rdx+rcx*1]
  0x000000010e130c7d:   lea    rbx,[rbx+0x1]
  0x000000010e130c81:   mov    QWORD PTR [rdx+rcx*1],rbx
  0x000000010e130c85:   jne    0x000000010e130cb7
  0x000000010e130c8b:   movabs rsi,0x10236cba0              ;   {metadata(method data for {method} {0x000000010234a7b8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e130c95:   add    QWORD PTR [rsi+0x120],0x1
  0x000000010e130c9d:   movabs rcx,0x6003e4430              ;   {oop(a 'jdk/incubator/vector/LaneType'{0x00000006003e4430})}
  0x000000010e130ca7:   mov    esi,0x43
  0x000000010e130cac:   mov    rdx,rdi
  0x000000010e130caf:   call   0x000000010da2a080           ; ImmutableOopMap {[248]=Oop }
                                                            ;*invokestatic makeConv {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@29 (line 1008)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {static_call}
  0x000000010e130cb4:   mov    rsi,rax
  0x000000010e130cb7:   mov    rax,QWORD PTR [rsp+0xf8]
  0x000000010e130cbf:   mov    rdx,rax
  0x000000010e130cc2:   movabs rcx,0x10236c608              ;   {metadata(method data for {method} {0x0000000102146418} 'castShape' '(Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/AbstractVector')}
  0x000000010e130ccc:   mov    edx,DWORD PTR [rdx+0x8]
  0x000000010e130ccf:   movabs r10,0x800000000
  0x000000010e130cd9:   add    rdx,r10
  0x000000010e130cdc:   cmp    rdx,QWORD PTR [rcx+0x240]
  0x000000010e130ce3:   jne    0x000000010e130cf2
  0x000000010e130ce5:   add    QWORD PTR [rcx+0x248],0x1
  0x000000010e130ced:   jmp    0x000000010e130eb4
  0x000000010e130cf2:   cmp    rdx,QWORD PTR [rcx+0x250]
  0x000000010e130cf9:   jne    0x000000010e130d08
  0x000000010e130cfb:   add    QWORD PTR [rcx+0x258],0x1
  0x000000010e130d03:   jmp    0x000000010e130eb4
  0x000000010e130d08:   cmp    rdx,QWORD PTR [rcx+0x260]
  0x000000010e130d0f:   jne    0x000000010e130d1e
  0x000000010e130d11:   add    QWORD PTR [rcx+0x268],0x1
  0x000000010e130d19:   jmp    0x000000010e130eb4
  0x000000010e130d1e:   cmp    rdx,QWORD PTR [rcx+0x270]
  0x000000010e130d25:   jne    0x000000010e130d34
  0x000000010e130d27:   add    QWORD PTR [rcx+0x278],0x1
  0x000000010e130d2f:   jmp    0x000000010e130eb4
  0x000000010e130d34:   cmp    rdx,QWORD PTR [rcx+0x280]
  0x000000010e130d3b:   jne    0x000000010e130d4a
  0x000000010e130d3d:   add    QWORD PTR [rcx+0x288],0x1
  0x000000010e130d45:   jmp    0x000000010e130eb4
  0x000000010e130d4a:   cmp    rdx,QWORD PTR [rcx+0x290]
  0x000000010e130d51:   jne    0x000000010e130d60
  0x000000010e130d53:   add    QWORD PTR [rcx+0x298],0x1
  0x000000010e130d5b:   jmp    0x000000010e130eb4
  0x000000010e130d60:   cmp    rdx,QWORD PTR [rcx+0x2a0]
  0x000000010e130d67:   jne    0x000000010e130d76
  0x000000010e130d69:   add    QWORD PTR [rcx+0x2a8],0x1
  0x000000010e130d71:   jmp    0x000000010e130eb4
  0x000000010e130d76:   cmp    rdx,QWORD PTR [rcx+0x2b0]
  0x000000010e130d7d:   jne    0x000000010e130d8c
  0x000000010e130d7f:   add    QWORD PTR [rcx+0x2b8],0x1
  0x000000010e130d87:   jmp    0x000000010e130eb4
  0x000000010e130d8c:   cmp    QWORD PTR [rcx+0x240],0x0
  0x000000010e130d97:   jne    0x000000010e130db0
  0x000000010e130d99:   mov    QWORD PTR [rcx+0x240],rdx
  0x000000010e130da0:   mov    QWORD PTR [rcx+0x248],0x1
  0x000000010e130dab:   jmp    0x000000010e130eb4
  0x000000010e130db0:   cmp    QWORD PTR [rcx+0x250],0x0
  0x000000010e130dbb:   jne    0x000000010e130dd4
  0x000000010e130dbd:   mov    QWORD PTR [rcx+0x250],rdx
  0x000000010e130dc4:   mov    QWORD PTR [rcx+0x258],0x1
  0x000000010e130dcf:   jmp    0x000000010e130eb4
  0x000000010e130dd4:   cmp    QWORD PTR [rcx+0x260],0x0
  0x000000010e130ddf:   jne    0x000000010e130df8
  0x000000010e130de1:   mov    QWORD PTR [rcx+0x260],rdx
  0x000000010e130de8:   mov    QWORD PTR [rcx+0x268],0x1
  0x000000010e130df3:   jmp    0x000000010e130eb4
  0x000000010e130df8:   cmp    QWORD PTR [rcx+0x270],0x0
  0x000000010e130e03:   jne    0x000000010e130e1c
  0x000000010e130e05:   mov    QWORD PTR [rcx+0x270],rdx
  0x000000010e130e0c:   mov    QWORD PTR [rcx+0x278],0x1
  0x000000010e130e17:   jmp    0x000000010e130eb4
  0x000000010e130e1c:   cmp    QWORD PTR [rcx+0x280],0x0
  0x000000010e130e27:   jne    0x000000010e130e40
  0x000000010e130e29:   mov    QWORD PTR [rcx+0x280],rdx
  0x000000010e130e30:   mov    QWORD PTR [rcx+0x288],0x1
  0x000000010e130e3b:   jmp    0x000000010e130eb4
  0x000000010e130e40:   cmp    QWORD PTR [rcx+0x290],0x0
  0x000000010e130e4b:   jne    0x000000010e130e64
  0x000000010e130e4d:   mov    QWORD PTR [rcx+0x290],rdx
  0x000000010e130e54:   mov    QWORD PTR [rcx+0x298],0x1
  0x000000010e130e5f:   jmp    0x000000010e130eb4
  0x000000010e130e64:   cmp    QWORD PTR [rcx+0x2a0],0x0
  0x000000010e130e6f:   jne    0x000000010e130e88
  0x000000010e130e71:   mov    QWORD PTR [rcx+0x2a0],rdx
  0x000000010e130e78:   mov    QWORD PTR [rcx+0x2a8],0x1
  0x000000010e130e83:   jmp    0x000000010e130eb4
  0x000000010e130e88:   cmp    QWORD PTR [rcx+0x2b0],0x0
  0x000000010e130e93:   jne    0x000000010e130eac
  0x000000010e130e95:   mov    QWORD PTR [rcx+0x2b0],rdx
  0x000000010e130e9c:   mov    QWORD PTR [rcx+0x2b8],0x1
  0x000000010e130ea7:   jmp    0x000000010e130eb4
  0x000000010e130eac:   add    QWORD PTR [rcx+0x230],0x1
  0x000000010e130eb4:   movabs rcx,0x6003e4390              ;   {oop(a 'jdk/incubator/vector/IntVector$IntSpecies'{0x00000006003e4390})}
  0x000000010e130ebe:   mov    rdx,rsi
  0x000000010e130ec1:   mov    r8d,0x0
  0x000000010e130ec7:   mov    rsi,rax
  0x000000010e130eca:   data16 xchg ax,ax
  0x000000010e130ecd:   movabs rax,0x800c20b60
  0x000000010e130ed7:   call   0x000000010e0fb280           ; ImmutableOopMap {}
                                                            ;*invokevirtual convertShape {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {virtual_call}
  0x000000010e130edc:   cmp    rax,QWORD PTR [rax]          ; implicit exception: dispatches to 0x000000010e13186d
  0x000000010e130edf:   mov    rdx,rax
  0x000000010e130ee2:   movabs rsi,0x10244e740              ;   {metadata(method data for {method} {0x0000000102441d50} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x000000010e130eec:   mov    edx,DWORD PTR [rdx+0x8]
  0x000000010e130eef:   movabs r10,0x800000000
  0x000000010e130ef9:   add    rdx,r10
  0x000000010e130efc:   cmp    rdx,QWORD PTR [rsi+0x390]
  0x000000010e130f03:   jne    0x000000010e130f12
  0x000000010e130f05:   add    QWORD PTR [rsi+0x398],0x1
  0x000000010e130f0d:   jmp    0x000000010e1310d4
  0x000000010e130f12:   cmp    rdx,QWORD PTR [rsi+0x3a0]
  0x000000010e130f19:   jne    0x000000010e130f28
  0x000000010e130f1b:   add    QWORD PTR [rsi+0x3a8],0x1
  0x000000010e130f23:   jmp    0x000000010e1310d4
  0x000000010e130f28:   cmp    rdx,QWORD PTR [rsi+0x3b0]
  0x000000010e130f2f:   jne    0x000000010e130f3e
  0x000000010e130f31:   add    QWORD PTR [rsi+0x3b8],0x1
  0x000000010e130f39:   jmp    0x000000010e1310d4
  0x000000010e130f3e:   cmp    rdx,QWORD PTR [rsi+0x3c0]
  0x000000010e130f45:   jne    0x000000010e130f54
  0x000000010e130f47:   add    QWORD PTR [rsi+0x3c8],0x1
  0x000000010e130f4f:   jmp    0x000000010e1310d4
  0x000000010e130f54:   cmp    rdx,QWORD PTR [rsi+0x3d0]
  0x000000010e130f5b:   jne    0x000000010e130f6a
  0x000000010e130f5d:   add    QWORD PTR [rsi+0x3d8],0x1
  0x000000010e130f65:   jmp    0x000000010e1310d4
  0x000000010e130f6a:   cmp    rdx,QWORD PTR [rsi+0x3e0]
  0x000000010e130f71:   jne    0x000000010e130f80
  0x000000010e130f73:   add    QWORD PTR [rsi+0x3e8],0x1
  0x000000010e130f7b:   jmp    0x000000010e1310d4
  0x000000010e130f80:   cmp    rdx,QWORD PTR [rsi+0x3f0]
  0x000000010e130f87:   jne    0x000000010e130f96
  0x000000010e130f89:   add    QWORD PTR [rsi+0x3f8],0x1
  0x000000010e130f91:   jmp    0x000000010e1310d4
  0x000000010e130f96:   cmp    rdx,QWORD PTR [rsi+0x400]
  0x000000010e130f9d:   jne    0x000000010e130fac
  0x000000010e130f9f:   add    QWORD PTR [rsi+0x408],0x1
  0x000000010e130fa7:   jmp    0x000000010e1310d4
  0x000000010e130fac:   cmp    QWORD PTR [rsi+0x390],0x0
  0x000000010e130fb7:   jne    0x000000010e130fd0
  0x000000010e130fb9:   mov    QWORD PTR [rsi+0x390],rdx
  0x000000010e130fc0:   mov    QWORD PTR [rsi+0x398],0x1
  0x000000010e130fcb:   jmp    0x000000010e1310d4
  0x000000010e130fd0:   cmp    QWORD PTR [rsi+0x3a0],0x0
  0x000000010e130fdb:   jne    0x000000010e130ff4
  0x000000010e130fdd:   mov    QWORD PTR [rsi+0x3a0],rdx
  0x000000010e130fe4:   mov    QWORD PTR [rsi+0x3a8],0x1
  0x000000010e130fef:   jmp    0x000000010e1310d4
  0x000000010e130ff4:   cmp    QWORD PTR [rsi+0x3b0],0x0
  0x000000010e130fff:   jne    0x000000010e131018
  0x000000010e131001:   mov    QWORD PTR [rsi+0x3b0],rdx
  0x000000010e131008:   mov    QWORD PTR [rsi+0x3b8],0x1
  0x000000010e131013:   jmp    0x000000010e1310d4
  0x000000010e131018:   cmp    QWORD PTR [rsi+0x3c0],0x0
  0x000000010e131023:   jne    0x000000010e13103c
  0x000000010e131025:   mov    QWORD PTR [rsi+0x3c0],rdx
  0x000000010e13102c:   mov    QWORD PTR [rsi+0x3c8],0x1
  0x000000010e131037:   jmp    0x000000010e1310d4
  0x000000010e13103c:   cmp    QWORD PTR [rsi+0x3d0],0x0
  0x000000010e131047:   jne    0x000000010e131060
  0x000000010e131049:   mov    QWORD PTR [rsi+0x3d0],rdx
  0x000000010e131050:   mov    QWORD PTR [rsi+0x3d8],0x1
  0x000000010e13105b:   jmp    0x000000010e1310d4
  0x000000010e131060:   cmp    QWORD PTR [rsi+0x3e0],0x0
  0x000000010e13106b:   jne    0x000000010e131084
  0x000000010e13106d:   mov    QWORD PTR [rsi+0x3e0],rdx
  0x000000010e131074:   mov    QWORD PTR [rsi+0x3e8],0x1
  0x000000010e13107f:   jmp    0x000000010e1310d4
  0x000000010e131084:   cmp    QWORD PTR [rsi+0x3f0],0x0
  0x000000010e13108f:   jne    0x000000010e1310a8
  0x000000010e131091:   mov    QWORD PTR [rsi+0x3f0],rdx
  0x000000010e131098:   mov    QWORD PTR [rsi+0x3f8],0x1
  0x000000010e1310a3:   jmp    0x000000010e1310d4
  0x000000010e1310a8:   cmp    QWORD PTR [rsi+0x400],0x0
  0x000000010e1310b3:   jne    0x000000010e1310cc
  0x000000010e1310b5:   mov    QWORD PTR [rsi+0x400],rdx
  0x000000010e1310bc:   mov    QWORD PTR [rsi+0x408],0x1
  0x000000010e1310c7:   jmp    0x000000010e1310d4
  0x000000010e1310cc:   add    QWORD PTR [rsi+0x380],0x1
  0x000000010e1310d4:   movabs rdx,0x61a800288              ;   {oop(a 'jdk/incubator/vector/Int256Vector'{0x000000061a800288})}
  0x000000010e1310de:   mov    rsi,rax
  0x000000010e1310e1:   nop    DWORD PTR [rax+0x0]
  0x000000010e1310e5:   movabs rax,0x800c645b8
  0x000000010e1310ef:   call   0x000000010e10ddc0           ; ImmutableOopMap {}
                                                            ;*invokevirtual mul {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@45 (line 608)
                                                            ;   {virtual_call}
  0x000000010e1310f4:   cmp    rax,QWORD PTR [rax]          ; implicit exception: dispatches to 0x000000010e131872
  0x000000010e1310f7:   mov    rdx,rax
  0x000000010e1310fa:   movabs rsi,0x10244e740              ;   {metadata(method data for {method} {0x0000000102441d50} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x000000010e131104:   mov    edx,DWORD PTR [rdx+0x8]
  0x000000010e131107:   movabs r10,0x800000000
  0x000000010e131111:   add    rdx,r10
  0x000000010e131114:   cmp    rdx,QWORD PTR [rsi+0x428]
  0x000000010e13111b:   jne    0x000000010e13112a
  0x000000010e13111d:   add    QWORD PTR [rsi+0x430],0x1
  0x000000010e131125:   jmp    0x000000010e1312ec
  0x000000010e13112a:   cmp    rdx,QWORD PTR [rsi+0x438]
  0x000000010e131131:   jne    0x000000010e131140
  0x000000010e131133:   add    QWORD PTR [rsi+0x440],0x1
  0x000000010e13113b:   jmp    0x000000010e1312ec
  0x000000010e131140:   cmp    rdx,QWORD PTR [rsi+0x448]
  0x000000010e131147:   jne    0x000000010e131156
  0x000000010e131149:   add    QWORD PTR [rsi+0x450],0x1
  0x000000010e131151:   jmp    0x000000010e1312ec
  0x000000010e131156:   cmp    rdx,QWORD PTR [rsi+0x458]
  0x000000010e13115d:   jne    0x000000010e13116c
  0x000000010e13115f:   add    QWORD PTR [rsi+0x460],0x1
  0x000000010e131167:   jmp    0x000000010e1312ec
  0x000000010e13116c:   cmp    rdx,QWORD PTR [rsi+0x468]
  0x000000010e131173:   jne    0x000000010e131182
  0x000000010e131175:   add    QWORD PTR [rsi+0x470],0x1
  0x000000010e13117d:   jmp    0x000000010e1312ec
  0x000000010e131182:   cmp    rdx,QWORD PTR [rsi+0x478]
  0x000000010e131189:   jne    0x000000010e131198
  0x000000010e13118b:   add    QWORD PTR [rsi+0x480],0x1
  0x000000010e131193:   jmp    0x000000010e1312ec
  0x000000010e131198:   cmp    rdx,QWORD PTR [rsi+0x488]
  0x000000010e13119f:   jne    0x000000010e1311ae
  0x000000010e1311a1:   add    QWORD PTR [rsi+0x490],0x1
  0x000000010e1311a9:   jmp    0x000000010e1312ec
  0x000000010e1311ae:   cmp    rdx,QWORD PTR [rsi+0x498]
  0x000000010e1311b5:   jne    0x000000010e1311c4
  0x000000010e1311b7:   add    QWORD PTR [rsi+0x4a0],0x1
  0x000000010e1311bf:   jmp    0x000000010e1312ec
  0x000000010e1311c4:   cmp    QWORD PTR [rsi+0x428],0x0
  0x000000010e1311cf:   jne    0x000000010e1311e8
  0x000000010e1311d1:   mov    QWORD PTR [rsi+0x428],rdx
  0x000000010e1311d8:   mov    QWORD PTR [rsi+0x430],0x1
  0x000000010e1311e3:   jmp    0x000000010e1312ec
  0x000000010e1311e8:   cmp    QWORD PTR [rsi+0x438],0x0
  0x000000010e1311f3:   jne    0x000000010e13120c
  0x000000010e1311f5:   mov    QWORD PTR [rsi+0x438],rdx
  0x000000010e1311fc:   mov    QWORD PTR [rsi+0x440],0x1
  0x000000010e131207:   jmp    0x000000010e1312ec
  0x000000010e13120c:   cmp    QWORD PTR [rsi+0x448],0x0
  0x000000010e131217:   jne    0x000000010e131230
  0x000000010e131219:   mov    QWORD PTR [rsi+0x448],rdx
  0x000000010e131220:   mov    QWORD PTR [rsi+0x450],0x1
  0x000000010e13122b:   jmp    0x000000010e1312ec
  0x000000010e131230:   cmp    QWORD PTR [rsi+0x458],0x0
  0x000000010e13123b:   jne    0x000000010e131254
  0x000000010e13123d:   mov    QWORD PTR [rsi+0x458],rdx
  0x000000010e131244:   mov    QWORD PTR [rsi+0x460],0x1
  0x000000010e13124f:   jmp    0x000000010e1312ec
  0x000000010e131254:   cmp    QWORD PTR [rsi+0x468],0x0
  0x000000010e13125f:   jne    0x000000010e131278
  0x000000010e131261:   mov    QWORD PTR [rsi+0x468],rdx
  0x000000010e131268:   mov    QWORD PTR [rsi+0x470],0x1
  0x000000010e131273:   jmp    0x000000010e1312ec
  0x000000010e131278:   cmp    QWORD PTR [rsi+0x478],0x0
  0x000000010e131283:   jne    0x000000010e13129c
  0x000000010e131285:   mov    QWORD PTR [rsi+0x478],rdx
  0x000000010e13128c:   mov    QWORD PTR [rsi+0x480],0x1
  0x000000010e131297:   jmp    0x000000010e1312ec
  0x000000010e13129c:   cmp    QWORD PTR [rsi+0x488],0x0
  0x000000010e1312a7:   jne    0x000000010e1312c0
  0x000000010e1312a9:   mov    QWORD PTR [rsi+0x488],rdx
  0x000000010e1312b0:   mov    QWORD PTR [rsi+0x490],0x1
  0x000000010e1312bb:   jmp    0x000000010e1312ec
  0x000000010e1312c0:   cmp    QWORD PTR [rsi+0x498],0x0
  0x000000010e1312cb:   jne    0x000000010e1312e4
  0x000000010e1312cd:   mov    QWORD PTR [rsi+0x498],rdx
  0x000000010e1312d4:   mov    QWORD PTR [rsi+0x4a0],0x1
  0x000000010e1312df:   jmp    0x000000010e1312ec
  0x000000010e1312e4:   add    QWORD PTR [rsi+0x418],0x1
  0x000000010e1312ec:   movabs rdx,0x61a800298              ;   {oop(a 'jdk/incubator/vector/VectorOperators$AssociativeImpl'{0x000000061a800298})}
  0x000000010e1312f6:   mov    rsi,rax
  0x000000010e1312f9:   nop    DWORD PTR [rax+0x0]
  0x000000010e1312fd:   movabs rax,0x800c645b8
  0x000000010e131307:   call   0x000000010e115c80           ; ImmutableOopMap {}
                                                            ;*invokevirtual reduceLanesToLong {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@51 (line 609)
                                                            ;   {virtual_call}
  0x000000010e13130c:   add    rsp,0x120
  0x000000010e131313:   pop    rbp
  0x000000010e131314:   cmp    rsp,QWORD PTR [r15+0x340]    ;   {poll_return}
  0x000000010e13131b:   ja     0x000000010e131877
  0x000000010e131321:   ret
  0x000000010e131322:   movabs rax,0xffffffffffffffff
  0x000000010e13132c:   add    rsp,0x120
  0x000000010e131333:   pop    rbp
  0x000000010e131334:   cmp    rsp,QWORD PTR [r15+0x340]    ;   {poll_return}
  0x000000010e13133b:   ja     0x000000010e13188d
  0x000000010e131341:   ret
  0x000000010e131342:   mov    QWORD PTR [rsp+0x108],rsi
  0x000000010e13134a:   movabs rdx,0x1022ab908              ;   {metadata(method data for {method} {0x00000008003a44f8} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x000000010e131354:   add    QWORD PTR [rdx+0x130],0x1
  0x000000010e13135c:   movabs rsi,0x0                      ;   {oop(NULL)}
  0x000000010e131366:   mov    rdx,rbx
  0x000000010e131369:   nop    WORD PTR [rax+rax*1+0x0]
  0x000000010e13136f:   call   0x000000010da2a080           ; ImmutableOopMap {[264]=Oop }
                                                            ;*invokestatic outOfBoundsCheckIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.internal.util.Preconditions::checkIndex@12 (line 266)
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {static_call}
  0x000000010e131374:   cmp    rax,QWORD PTR [rax]          ; implicit exception: dispatches to 0x000000010e1318a3
  0x000000010e131377:   jmp    0x000000010e1318c7
  0x000000010e13137c:   movabs r10,0x102441d50              ;   {metadata({method} {0x0000000102441d50} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x000000010e131386:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e13138b:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e131393:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@-1 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e131398:   jmp    0x000000010e12ef5a
  0x000000010e13139d:   movabs r10,0x1022eca98              ;   {metadata({method} {0x00000001022eca98} 'fromCharArray' '(Ljdk/incubator/vector/VectorSpecies;[CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e1313a7:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e1313ac:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e1313b4:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@-1 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e1313b9:   jmp    0x000000010e12ef94
  0x000000010e1313be:   call   0x000000010dacff20           ; ImmutableOopMap {rsi=Oop }
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@8 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e1313c3:   movabs r10,0x102241d20              ;   {metadata({method} {0x0000000102241d20} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics')}
  0x000000010e1313cd:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e1313d2:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e1313da:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@-1 (line 49)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e1313df:   jmp    0x000000010e12f1d2
  0x000000010e1313e4:   movabs r10,0x80007a390              ;   {metadata({method} {0x000000080007a390} 'checkIndex' '(II)I' in 'java/util/Objects')}
  0x000000010e1313ee:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e1313f3:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e1313fb:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.util.Objects::checkIndex@-1 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e131400:   jmp    0x000000010e12f214
  0x000000010e131405:   movabs r10,0x8003a44f8              ;   {metadata({method} {0x00000008003a44f8} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x000000010e13140f:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e131414:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e13141c:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.internal.util.Preconditions::checkIndex@-1 (line 265)
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e131421:   jmp    0x000000010e12f253
  0x000000010e131426:   movabs r10,0x1022fcae0              ;   {metadata({method} {0x00000001022fcae0} 'dummyVector' '()Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x000000010e131430:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e131435:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e13143d:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop rcx=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::dummyVector@-1 (line 3903)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@19 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e131442:   jmp    0x000000010e12f310
  0x000000010e131447:   movabs r10,0x10215d468              ;   {metadata({method} {0x000000010215d468} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies')}
  0x000000010e131451:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e131456:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e13145e:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.AbstractSpecies::dummyVector@-1 (line 295)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::dummyVector@1 (line 3903)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@19 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e131463:   jmp    0x000000010e12f34a
  0x000000010e131468:   movabs r10,0x102310b98              ;   {metadata({method} {0x0000000102310b98} 'fromCharArray0' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/Short128Vector')}
  0x000000010e131472:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e131477:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e13147f:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop rcx=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@-1 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e131484:   jmp    0x000000010e12f3a6
  0x000000010e131489:   movabs r10,0x1022ee080              ;   {metadata({method} {0x00000001022ee080} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e131493:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e131498:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e1314a0:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop rcx=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@-1 (line 3519)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e1314a5:   jmp    0x000000010e12f3e8
  0x000000010e1314aa:   movabs r10,0x10230daa0              ;   {metadata({method} {0x000000010230daa0} 'vspecies' '()Ljdk/incubator/vector/ShortVector$ShortSpecies;' in 'jdk/incubator/vector/Short128Vector')}
  0x000000010e1314b4:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e1314b9:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e1314c1:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.Short128Vector::vspecies@-1 (line 86)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@1 (line 3519)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e1314c6:   jmp    0x000000010e12f422
  0x000000010e1314cb:   movabs r10,0x1022fc168              ;   {metadata({method} {0x00000001022fc168} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x000000010e1314d5:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e1314da:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e1314e2:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop rcx=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::elementType@-1 (line 3805)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@10 (line 3521)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e1314e7:   jmp    0x000000010e12f483
  0x000000010e1314ec:   movabs r10,0x1022eec60              ;   {metadata({method} {0x00000001022eec60} 'charArrayAddress' '([CI)J' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e1314f6:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e1314fb:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e131503:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector::charArrayAddress@-1 (line 3669)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@20 (line 3522)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e131508:   jmp    0x000000010e12f4cf
  0x000000010e13150d:   movabs r10,0x8000e5db8              ;   {metadata({method} {0x00000008000e5db8} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x000000010e131517:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e13151c:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e131524:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.Invokers$Holder::linkToTargetMethod@-1
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@26 (line 3522)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e131529:   jmp    0x000000010e12f524
  0x000000010e13152e:   movabs r10,0x102400268              ;   {metadata({method} {0x0000000102400268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x000000010e131538:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e13153d:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e131545:   call   0x000000010dad5c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000800c00400::invoke@-1
                                                            ; - java.lang.invoke.Invokers$Holder::linkToTargetMethod@4
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@26 (line 3522)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e13154a:   jmp    0x000000010e12f55e
  0x000000010e13154f:   mov    QWORD PTR [rsp],rax
  0x000000010e131553:   call   0x000000010dad2f20           ; ImmutableOopMap {}
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@34 (line 3520)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call throw_class_cast_exception Runtime1 stub}
  0x000000010e131558:   call   0x000000010dacff20           ; ImmutableOopMap {rdi=Oop }
                                                            ;*invokevirtual sub {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e13155d:   movabs r10,0x1022e7af8              ;   {metadata({method} {0x00000001022e7af8} 'sub' '(S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e131567:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e13156c:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e131574:   call   0x000000010dad5c00           ; ImmutableOopMap {rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector::sub@-1 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e131579:   jmp    0x000000010e12f84a
  0x000000010e13157e:   movabs r10,0x1022e6888              ;   {metadata({method} {0x00000001022e6888} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e131588:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e13158d:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e131595:   call   0x000000010dad5c00           ; ImmutableOopMap {rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@-1 (line 705)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e13159a:   jmp    0x000000010e12f887
  0x000000010e13159f:   movabs r10,0x1022e41b0              ;   {metadata({method} {0x00000001022e41b0} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/ShortVector')}
  0x000000010e1315a9:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e1315ae:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e1315b6:   call   0x000000010dad5c00           ; ImmutableOopMap {rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector::opKind@-1 (line 72)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@3 (line 705)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e1315bb:   jmp    0x000000010e12f8c1
  0x000000010e1315c0:   movabs r10,0x102153b80              ;   {metadata({method} {0x0000000102153b80} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/VectorOperators')}
  0x000000010e1315ca:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e1315cf:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e1315d7:   call   0x000000010dad5c00           ; ImmutableOopMap {rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators::opKind@-1 (line 409)
                                                            ; - jdk.incubator.vector.ShortVector::opKind@2 (line 72)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@3 (line 705)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e1315dc:   jmp    0x000000010e12f8fb
  0x000000010e1315e1:   movabs r10,0x102345918              ;   {metadata({method} {0x0000000102345918} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl')}
  0x000000010e1315eb:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e1315f0:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e1315f8:   call   0x000000010dad5c00           ; ImmutableOopMap {rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$OperatorImpl::opKind@-1 (line 883)
                                                            ; - jdk.incubator.vector.VectorOperators::opKind@5 (line 409)
                                                            ; - jdk.incubator.vector.ShortVector::opKind@2 (line 72)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@3 (line 705)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e1315fd:   jmp    0x000000010e12fb1f
  0x000000010e131602:   call   0x000000010dacff20           ; ImmutableOopMap {rax=Oop }
                                                            ;*invokevirtual compare {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@21 (line 603)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e131607:   call   0x000000010dacff20           ; ImmutableOopMap {[248]=Oop rax=Oop }
                                                            ;*invokevirtual anyTrue {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e13160c:   movabs r10,0x1023163c0              ;   {metadata({method} {0x00000001023163c0} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e131616:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e13161b:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e131623:   call   0x000000010dad5c00           ; ImmutableOopMap {[248]=Oop rax=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@-1 (line 687)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e131628:   jmp    0x000000010e1301ec
  0x000000010e13162d:   movabs r10,0x1023155f8              ;   {metadata({method} {0x00000001023155f8} 'vspecies' '()Ljdk/incubator/vector/ShortVector$ShortSpecies;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e131637:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e13163c:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e131644:   call   0x000000010dad5c00           ; ImmutableOopMap {[248]=Oop rax=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::vspecies@-1 (line 544)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@11 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e131649:   jmp    0x000000010e130229
  0x000000010e13164e:   movabs r10,0x1022fd518              ;   {metadata({method} {0x00000001022fd518} 'maskAll' '(Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x000000010e131658:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e13165d:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e131665:   call   0x000000010dad5c00           ; ImmutableOopMap {[248]=Oop rax=Oop rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@-1 (line 4006)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e13166a:   jmp    0x000000010e130270
  0x000000010e13166f:   movabs r10,0x102316570              ;   {metadata({method} {0x0000000102316570} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000010e131679:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e13167e:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e131686:   call   0x000000010dad5c00           ; ImmutableOopMap {[248]=Oop rax=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::maskAll@-1 (line 703)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@66 (line 4010)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e13168b:   jmp    0x000000010e1302e8
  0x000000010e131690:   movabs r10,0x8000e5db8              ;   {metadata({method} {0x00000008000e5db8} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x000000010e13169a:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e13169f:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e1316a7:   call   0x000000010dad5c00           ; ImmutableOopMap {[248]=Oop [256]=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.Invokers$Holder::linkToTargetMethod@-1
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::maskAll@19 (line 704)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@66 (line 4010)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e1316ac:   jmp    0x000000010e13034a
  0x000000010e1316b1:   movabs r10,0x102400268              ;   {metadata({method} {0x0000000102400268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x000000010e1316bb:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e1316c0:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e1316c8:   call   0x000000010dad5c00           ; ImmutableOopMap {[248]=Oop [256]=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000800c00400::invoke@-1
                                                            ; - java.lang.invoke.Invokers$Holder::linkToTargetMethod@4
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::maskAll@19 (line 704)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@66 (line 4010)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e1316cd:   jmp    0x000000010e130384
  0x000000010e1316d2:   mov    QWORD PTR [rsp],rax
  0x000000010e1316d6:   call   0x000000010dad2f20           ; ImmutableOopMap {[248]=Oop [256]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::maskAll@27 (line 703)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@66 (line 4010)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call throw_class_cast_exception Runtime1 stub}
  0x000000010e1316db:   movabs r10,0x8000e5db8              ;   {metadata({method} {0x00000008000e5db8} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x000000010e1316e5:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e1316ea:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e1316f2:   call   0x000000010dad5c00           ; ImmutableOopMap {[248]=Oop rdi=Oop rax=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.Invokers$Holder::linkToTargetMethod@-1
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@18 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e1316f7:   jmp    0x000000010e130663
  0x000000010e1316fc:   movabs r10,0x102400268              ;   {metadata({method} {0x0000000102400268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x000000010e131706:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e13170b:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e131713:   call   0x000000010dad5c00           ; ImmutableOopMap {[248]=Oop rdi=Oop rax=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000800c00400::invoke@-1
                                                            ; - java.lang.invoke.Invokers$Holder::linkToTargetMethod@4
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@18 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e131718:   jmp    0x000000010e13069d
  0x000000010e13171d:   movabs r10,0x102146418              ;   {metadata({method} {0x0000000102146418} 'castShape' '(Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/AbstractVector')}
  0x000000010e131727:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e13172c:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e131734:   call   0x000000010dad5c00           ; ImmutableOopMap {[248]=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@-1 (line 282)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e131739:   jmp    0x000000010e130762
  0x000000010e13173e:   call   0x000000010dacff20           ; ImmutableOopMap {[248]=Oop }
                                                            ;*getfield laneType {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractVector::castShape@12 (line 285)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e131743:   movabs r10,0x10234a5c8              ;   {metadata({method} {0x000000010234a5c8} 'ofCast' '(Ljdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e13174d:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e131752:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e13175a:   call   0x000000010dad5c00           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@-1 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e13175f:   jmp    0x000000010e1309b5
  0x000000010e131764:   movabs r10,0x10234a508              ;   {metadata({method} {0x000000010234a508} 'ofCopy' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e13176e:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e131773:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e13177b:   call   0x000000010dad5c00           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@-1 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e131780:   jmp    0x000000010e130a32
  0x000000010e131785:   movabs r10,0x10234a7b8              ;   {metadata({method} {0x000000010234a7b8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e13178f:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e131794:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e13179c:   call   0x000000010dad5c00           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@-1 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e1317a1:   jmp    0x000000010e130a6c
  0x000000010e1317a6:   movabs r10,0x10234ad08              ;   {metadata({method} {0x000000010234ad08} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e1317b0:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e1317b5:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e1317bd:   call   0x000000010dad5c00           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@-1 (line 1072)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e1317c2:   jmp    0x000000010e130aa6
  0x000000010e1317c7:   call   0x000000010dacff20           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*getfield switchKey {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@57 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e1317cc:   mov    QWORD PTR [rsp],rsi
  0x000000010e1317d0:   mov    QWORD PTR [rsp+0x8],rcx
  0x000000010e1317d5:   call   0x000000010dacf620           ; ImmutableOopMap {[248]=Oop rdi=Oop rcx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@60 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x000000010e1317da:   call   0x000000010dacff20           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@60 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e1317df:   call   0x000000010dacff20           ; ImmutableOopMap {[248]=Oop rdi=Oop rdx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e1317e4:   call   0x000000010dacff20           ; ImmutableOopMap {[248]=Oop rdi=Oop rdx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e1317e9:   mov    QWORD PTR [rsp],rsi
  0x000000010e1317ed:   mov    QWORD PTR [rsp+0x8],rdx
  0x000000010e1317f2:   call   0x000000010dacf620           ; ImmutableOopMap {[248]=Oop rdi=Oop rdx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x000000010e1317f7:   movabs r10,0x10234a7b8              ;   {metadata({method} {0x000000010234a7b8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e131801:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e131806:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e13180e:   call   0x000000010dad5c00           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@-1 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e131813:   jmp    0x000000010e130bae
  0x000000010e131818:   movabs r10,0x10234ad08              ;   {metadata({method} {0x000000010234ad08} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000010e131822:   mov    QWORD PTR [rsp+0x8],r10
  0x000000010e131827:   mov    QWORD PTR [rsp],0xffffffffffffffff
  0x000000010e13182f:   call   0x000000010dad5c00           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@-1 (line 1072)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000010e131834:   jmp    0x000000010e130be8
  0x000000010e131839:   call   0x000000010dacff20           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*getfield switchKey {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@57 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e13183e:   mov    QWORD PTR [rsp],rsi
  0x000000010e131842:   mov    QWORD PTR [rsp+0x8],rcx
  0x000000010e131847:   call   0x000000010dacf620           ; ImmutableOopMap {[248]=Oop rdi=Oop rcx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@60 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x000000010e13184c:   call   0x000000010dacff20           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@60 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e131851:   call   0x000000010dacff20           ; ImmutableOopMap {[248]=Oop rdi=Oop rsi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e131856:   call   0x000000010dacff20           ; ImmutableOopMap {[248]=Oop rdi=Oop rsi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e13185b:   mov    QWORD PTR [rsp],0x5
  0x000000010e131863:   mov    QWORD PTR [rsp+0x8],rsi
  0x000000010e131868:   call   0x000000010dacf620           ; ImmutableOopMap {[248]=Oop rdi=Oop rsi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x000000010e13186d:   call   0x000000010dacff20           ; ImmutableOopMap {rax=Oop }
                                                            ;*invokevirtual mul {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@45 (line 608)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e131872:   call   0x000000010dacff20           ; ImmutableOopMap {rax=Oop }
                                                            ;*invokevirtual reduceLanesToLong {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@51 (line 609)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e131877:   movabs r10,0x10e131314              ;   {internal_word}
  0x000000010e131881:   mov    QWORD PTR [r15+0x358],r10
  0x000000010e131888:   jmp    0x000000010da30100           ;   {runtime_call SafepointBlob}
  0x000000010e13188d:   movabs r10,0x10e131334              ;   {internal_word}
  0x000000010e131897:   mov    QWORD PTR [r15+0x358],r10
  0x000000010e13189e:   jmp    0x000000010da30100           ;   {runtime_call SafepointBlob}
  0x000000010e1318a3:   call   0x000000010dacff20           ; ImmutableOopMap {[264]=Oop rax=Oop }
                                                            ;*athrow {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.internal.util.Preconditions::checkIndex@15 (line 266)
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000010e1318a8:   nop
  0x000000010e1318a9:   nop
  0x000000010e1318aa:   mov    rax,QWORD PTR [r15+0x3d0]
  0x000000010e1318b1:   mov    QWORD PTR [r15+0x3d0],0x0
  0x000000010e1318bc:   mov    QWORD PTR [r15+0x3d8],0x0
  0x000000010e1318c7:   add    rsp,0x120
  0x000000010e1318ce:   pop    rbp
  0x000000010e1318cf:   jmp    0x000000010dacf000           ;   {runtime_call unwind_exception Runtime1 stub}
  0x000000010e1318d4:   hlt
  0x000000010e1318d5:   hlt
  0x000000010e1318d6:   hlt
  0x000000010e1318d7:   hlt
  0x000000010e1318d8:   hlt
  0x000000010e1318d9:   hlt
  0x000000010e1318da:   hlt
  0x000000010e1318db:   hlt
  0x000000010e1318dc:   hlt
  0x000000010e1318dd:   hlt
  0x000000010e1318de:   hlt
  0x000000010e1318df:   hlt
[Stub Code]
  0x000000010e1318e0:   nop    DWORD PTR [rax+rax*1+0x0]    ;   {no_reloc}
  0x000000010e1318e5:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e1318ef:   jmp    0x000000010e1318ef           ;   {runtime_call const_jargs+-25849953}
  0x000000010e1318f4:   nop
  0x000000010e1318f5:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e1318ff:   jmp    0x000000010e1318ff           ;   {runtime_call const_jargs+-25849953}
  0x000000010e131904:   nop
  0x000000010e131905:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e13190f:   jmp    0x000000010e13190f           ;   {runtime_call const_jargs+-25849953}
  0x000000010e131914:   nop
  0x000000010e131915:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e13191f:   jmp    0x000000010e13191f           ;   {runtime_call const_jargs+-25849953}
  0x000000010e131924:   nop
  0x000000010e131925:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e13192f:   jmp    0x000000010e13192f           ;   {runtime_call const_jargs+-25849953}
  0x000000010e131934:   nop
  0x000000010e131935:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e13193f:   jmp    0x000000010e13193f           ;   {runtime_call const_jargs+-25849953}
  0x000000010e131944:   nop
  0x000000010e131945:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e13194f:   jmp    0x000000010e13194f           ;   {runtime_call const_jargs+-25849953}
  0x000000010e131954:   nop
  0x000000010e131955:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e13195f:   jmp    0x000000010e13195f           ;   {runtime_call const_jargs+-25849953}
  0x000000010e131964:   nop
  0x000000010e131965:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e13196f:   jmp    0x000000010e13196f           ;   {runtime_call const_jargs+-25849953}
  0x000000010e131974:   nop
  0x000000010e131975:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e13197f:   jmp    0x000000010e13197f           ;   {runtime_call const_jargs+-25849953}
  0x000000010e131984:   nop
  0x000000010e131985:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e13198f:   jmp    0x000000010e13198f           ;   {runtime_call const_jargs+-25849953}
  0x000000010e131994:   nop
  0x000000010e131995:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e13199f:   jmp    0x000000010e13199f           ;   {runtime_call const_jargs+-25849953}
  0x000000010e1319a4:   nop
  0x000000010e1319a5:   movabs rbx,0x0                      ;   {static_stub}
  0x000000010e1319af:   jmp    0x000000010e1319af           ;   {runtime_call const_jargs+-25849953}
[Exception Handler]
  0x000000010e1319b4:   call   0x000000010dad2900           ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x000000010e1319b9:   movabs rdi,0x1034ff512              ;   {external_word}
  0x000000010e1319c3:   and    rsp,0xfffffffffffffff0
  0x000000010e1319c7:   call   0x00000001031a1790           ;   {runtime_call _ZN14MacroAssembler7debug64EPcxPx}
  0x000000010e1319cc:   hlt
[Deopt Handler Code]
  0x000000010e1319cd:   movabs r10,0x10e1319cd              ;   {section_word}
  0x000000010e1319d7:   push   r10
  0x000000010e1319d9:   jmp    0x000000010da2f020           ;   {runtime_call DeoptimizationBlob}
  0x000000010e1319de:   hlt
  0x000000010e1319df:   hlt
--------------------------------------------------------------------------------
[/Disassembly]

=========================== JVMCI-compiled nmethod =============================
----------------------------------- Assembly -----------------------------------

Compiled method (JVMCI) 1031       4       ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd (55 bytes)
 total in heap  [0x0000000115508f90,0x000000011550a928] = 6552
 relocation     [0x00000001155090f0,0x00000001155091c8] = 216
 main code      [0x00000001155091e0,0x000000011550a020] = 3648
 stub code      [0x000000011550a020,0x000000011550a060] = 64
 oops           [0x000000011550a060,0x000000011550a098] = 56
 metadata       [0x000000011550a098,0x000000011550a1d8] = 320
 scopes data    [0x000000011550a1d8,0x000000011550a430] = 600
 scopes pcs     [0x000000011550a430,0x000000011550a6e0] = 688
 dependencies   [0x000000011550a6e0,0x000000011550a6f8] = 24
 nul chk table  [0x000000011550a6f8,0x000000011550a768] = 112
 speculations   [0x000000011550a768,0x000000011550a918] = 432
 JVMCI data     [0x000000011550a918,0x000000011550a928] = 16

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000102441d50} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray'
  # parm0:    rsi:rsi   = '[C'
  # parm1:    rdx       = int
  #           [sp+0x70]  (sp of caller)
  0x00000001155091e0:   mov    DWORD PTR [rsp-0x14000],eax
  0x00000001155091e7:   sub    rsp,0x68
  0x00000001155091eb:   mov    QWORD PTR [rsp+0x60],rbp
  0x00000001155091f0:   mov    r10,rsi
  0x00000001155091f3:   mov    r11d,edx                     ; ImmutableOopMap {r10=Oop }
                                                            ;*getstatic SPECIES_128 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@0 (line 600)
  0x00000001155091f6:   mov    esi,DWORD PTR [r10+0xc]      ; implicit exception: dispatches to 0x0000000115509e6e
  0x00000001155091fa:   nop    WORD PTR [rax+rax*1+0x0]
  0x0000000115509200:   cmp    esi,0x7
  0x0000000115509203:   jb     0x0000000115509d0e
  0x0000000115509209:   lea    eax,[rsi-0x7]
  0x000000011550920c:   cmp    eax,r11d
  0x000000011550920f:   jbe    0x0000000115509e06
  0x0000000115509215:   cmp    esi,r11d
  0x0000000115509218:   jbe    0x0000000115509d90
  0x000000011550921e:   mov    ebp,r11d
  0x0000000115509221:   inc    ebp
  0x0000000115509223:   cmp    esi,ebp
  0x0000000115509225:   jbe    0x0000000115509cf0
  0x000000011550922b:   lea    ecx,[r11+0x2]
  0x000000011550922f:   cmp    esi,ecx
  0x0000000115509231:   jbe    0x0000000115509d66
  0x0000000115509237:   lea    r8d,[r11+0x3]
  0x000000011550923b:   nop    DWORD PTR [rax+rax*1+0x0]
  0x0000000115509240:   cmp    esi,r8d
  0x0000000115509243:   jbe    0x0000000115509e34
  0x0000000115509249:   lea    r9d,[r11+0x4]
  0x000000011550924d:   cmp    esi,r9d
  0x0000000115509250:   jbe    0x0000000115509e3f
  0x0000000115509256:   lea    edi,[r11+0x5]
  0x000000011550925a:   nop    WORD PTR [rax+rax*1+0x0]
  0x0000000115509260:   cmp    esi,edi
  0x0000000115509262:   jbe    0x0000000115509dc6
  0x0000000115509268:   lea    ebx,[r11+0x6]
  0x000000011550926c:   cmp    esi,ebx
  0x000000011550926e:   jbe    0x0000000115509d85
  0x0000000115509274:   lea    r13d,[r11+0x7]
  0x0000000115509278:   nop    DWORD PTR [rax+rax*1+0x0]
  0x0000000115509280:   cmp    esi,r13d
  0x0000000115509283:   jbe    0x0000000115509d6e
  0x0000000115509289:   mov    rsi,QWORD PTR [r15+0x108]
  0x0000000115509290:   lea    rax,[rsi+0x10]
  0x0000000115509294:   nop    DWORD PTR [rax+rax*1+0x0]
  0x000000011550929c:   data16 data16 xchg ax,ax
  0x00000001155092a0:   cmp    rax,QWORD PTR [r15+0x118]
  0x00000001155092a7:   ja     0x0000000115509bfa
  0x00000001155092ad:   mov    QWORD PTR [r15+0x108],rax
  0x00000001155092b4:   prefetchw BYTE PTR [rsi+0xd0]
  0x00000001155092bb:   mov    QWORD PTR [rsi],0x1
  0x00000001155092c2:   mov    DWORD PTR [rsi+0x8],0xc20b60 ;   {metadata('jdk/incubator/vector/Short128Vector')}
  0x00000001155092c9:   mov    DWORD PTR [rsi+0xc],0x0
  0x00000001155092d0:   mov    rax,QWORD PTR [r15+0x108]
  0x00000001155092d7:   lea    rdx,[rax+0x20]
  0x00000001155092db:   nop    DWORD PTR [rax+rax*1+0x0]
  0x00000001155092e0:   cmp    rdx,QWORD PTR [r15+0x118]
  0x00000001155092e7:   ja     0x0000000115509b93
  0x00000001155092ed:   mov    QWORD PTR [r15+0x108],rdx
  0x00000001155092f4:   prefetchw BYTE PTR [rax+0xe0]
  0x00000001155092fb:   prefetchw BYTE PTR [rax+0x120]
  0x0000000115509302:   prefetchw BYTE PTR [rax+0x160]
  0x0000000115509309:   prefetchw BYTE PTR [rax+0x1a0]
  0x0000000115509310:   mov    DWORD PTR [rax+0xc],0x8
  0x0000000115509317:   mov    QWORD PTR [rax],0x1
  0x000000011550931e:   mov    DWORD PTR [rax+0x8],0x6520   ;   {metadata({type array short})}
  0x0000000115509325:   mov    QWORD PTR [rax+0x10],0x0
  0x000000011550932d:   mov    QWORD PTR [rax+0x18],0x0
  0x0000000115509335:   mov    r14,rax
  0x0000000115509338:   movsx  eax,WORD PTR [r10+r13*2+0x10]
  0x000000011550933e:   mov    WORD PTR [r14+0x1e],ax
  0x0000000115509343:   movsx  eax,WORD PTR [r10+rbx*2+0x10]
  0x0000000115509349:   mov    WORD PTR [r14+0x1c],ax
  0x000000011550934e:   movsx  eax,WORD PTR [r10+rdi*2+0x10]
  0x0000000115509354:   mov    WORD PTR [r14+0x1a],ax
  0x0000000115509359:   movsx  eax,WORD PTR [r10+r9*2+0x10]
  0x000000011550935f:   mov    WORD PTR [r14+0x18],ax
  0x0000000115509364:   movsx  eax,WORD PTR [r10+r8*2+0x10]
  0x000000011550936a:   mov    WORD PTR [r14+0x16],ax
  0x000000011550936f:   movsx  eax,WORD PTR [r10+rcx*2+0x10]
  0x0000000115509375:   mov    WORD PTR [r14+0x14],ax
  0x000000011550937a:   movsx  eax,WORD PTR [r10+rbp*2+0x10]
  0x0000000115509380:   mov    WORD PTR [r14+0x12],ax
  0x0000000115509385:   movsx  eax,WORD PTR [r10+r11*2+0x10]
  0x000000011550938b:   mov    WORD PTR [r14+0x10],ax
  0x0000000115509390:   mov    rax,QWORD PTR [r15+0x108]
  0x0000000115509397:   lea    rdx,[rax+0x10]
  0x000000011550939b:   nop    DWORD PTR [rax+rax*1+0x0]
  0x00000001155093a0:   cmp    rdx,QWORD PTR [r15+0x118]
  0x00000001155093a7:   ja     0x0000000115509bdd
  0x00000001155093ad:   mov    QWORD PTR [r15+0x108],rdx
  0x00000001155093b4:   prefetchw BYTE PTR [rax+0xd0]
  0x00000001155093bb:   mov    QWORD PTR [rax],0x1
  0x00000001155093c2:   mov    DWORD PTR [rax+0x8],0xc20b60 ;   {metadata('jdk/incubator/vector/Short128Vector')}
  0x00000001155093c9:   mov    DWORD PTR [rax+0xc],0x0
  0x00000001155093d0:   mov    rdx,QWORD PTR [r15+0x108]
  0x00000001155093d7:   lea    rbp,[rdx+0x20]
  0x00000001155093db:   nop    DWORD PTR [rax+rax*1+0x0]
  0x00000001155093e0:   cmp    rbp,QWORD PTR [r15+0x118]
  0x00000001155093e7:   ja     0x0000000115509b32
  0x00000001155093ed:   mov    QWORD PTR [r15+0x108],rbp
  0x00000001155093f4:   prefetchw BYTE PTR [rdx+0xe0]
  0x00000001155093fb:   prefetchw BYTE PTR [rdx+0x120]
  0x0000000115509402:   prefetchw BYTE PTR [rdx+0x160]
  0x0000000115509409:   prefetchw BYTE PTR [rdx+0x1a0]
  0x0000000115509410:   mov    DWORD PTR [rdx+0xc],0x8
  0x0000000115509417:   mov    QWORD PTR [rdx],0x1
  0x000000011550941e:   mov    DWORD PTR [rdx+0x8],0x6520   ;   {metadata({type array short})}
  0x0000000115509425:   mov    QWORD PTR [rdx+0x10],0x0
  0x000000011550942d:   mov    QWORD PTR [rdx+0x18],0x0
  0x0000000115509435:   mov    WORD PTR [rdx+0x1e],0x30
  0x000000011550943b:   mov    WORD PTR [rdx+0x1c],0x30
  0x0000000115509441:   mov    WORD PTR [rdx+0x1a],0x30
  0x0000000115509447:   mov    WORD PTR [rdx+0x18],0x30
  0x000000011550944d:   mov    WORD PTR [rdx+0x16],0x30
  0x0000000115509453:   mov    WORD PTR [rdx+0x14],0x30
  0x0000000115509459:   mov    WORD PTR [rdx+0x12],0x30
  0x000000011550945f:   mov    WORD PTR [rdx+0x10],0x30
  0x0000000115509465:   mov    r10,r14
  0x0000000115509468:   shr    r10,0x3
  0x000000011550946c:   mov    DWORD PTR [rsi+0xc],r10d
  0x0000000115509470:   mov    r10,rsi
  0x0000000115509473:   xor    r10,r14
  0x0000000115509476:   movabs r11,0x11a9dd000
  0x0000000115509480:   test   r10,0xffffffffffc00000
  0x0000000115509487:   je     0x0000000115509a59
  0x000000011550948d:   test   r14,r14
  0x0000000115509490:   je     0x0000000115509a85
  0x0000000115509496:   mov    r10,rsi
  0x0000000115509499:   shr    r10,0x9
  0x000000011550949d:   data16 xchg ax,ax
  0x00000001155094a0:   cmp    BYTE PTR [r10+r11*1],0x4
  0x00000001155094a5:   jne    0x0000000115509afa
  0x00000001155094ab:   mov    r13,rax
  0x00000001155094ae:   mov    rbx,rsi
  0x00000001155094b1:   mov    rsi,rdx
  0x00000001155094b4:   shr    rsi,0x3
  0x00000001155094b8:   mov    DWORD PTR [r13+0xc],esi
  0x00000001155094bc:   mov    rax,r13
  0x00000001155094bf:   xor    rax,rdx
  0x00000001155094c2:   test   rax,0xffffffffffc00000
  0x00000001155094c9:   je     0x00000001155094eb
  0x00000001155094cf:   test   rdx,rdx
  0x00000001155094d2:   je     0x00000001155094eb
  0x00000001155094d8:   mov    rax,r13
  0x00000001155094db:   shr    rax,0x9
  0x00000001155094df:   nop
  0x00000001155094e0:   cmp    BYTE PTR [rax+r11*1],0x4
  0x00000001155094e5:   jne    0x0000000115509ae5
  0x00000001155094eb:   mov    QWORD PTR [rsp+0x50],r11
  0x00000001155094f0:   movabs r10,0x600804d30              ;   {oop(a 'java/lang/Class'{0x0000000600804d30} = 'jdk/incubator/vector/Short128Vector')}
  0x00000001155094fa:   movabs rax,0x7ffb00230              ;   {oop(a 'java/lang/Class'{0x00000007ffb00230} = short)}
  0x0000000115509504:   movabs rbp,0x6008bb088              ;   {oop(a 'jdk/incubator/vector/ShortVector$$Lambda$87+0x0000000800c28b68'{0x00000006008bb088})}
  0x000000011550950e:   mov    esi,0x5
  0x0000000115509513:   mov    rdx,r10
  0x0000000115509516:   mov    rcx,rax
  0x0000000115509519:   mov    r8d,0x8
  0x000000011550951f:   mov    r9,rbx
  0x0000000115509522:   mov    rdi,r13
  0x0000000115509525:   mov    QWORD PTR [rsp],rbp
  0x0000000115509529:   mov    QWORD PTR [rsp+0x48],rbx
  0x000000011550952e:   mov    QWORD PTR [rsp+0x40],r13
  0x0000000115509533:   mov    QWORD PTR [rsp+0x38],rax
  0x0000000115509538:   mov    QWORD PTR [rsp+0x30],r10
  0x000000011550953d:   xchg   ax,ax
  0x000000011550953f:   nop
  0x0000000115509540:   nop    DWORD PTR [rax+0x0]
  0x0000000115509547:   call   0x0000000115505d00           ; ImmutableOopMap {[48]=Oop [56]=Oop [64]=Oop [72]=Oop }
                                                            ;*invokestatic binaryOp {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.ShortVector::lanewiseTemplate@245 (line 620)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@45 (line 711)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {static_call}
  0x000000011550954c:   nop
  0x000000011550954d:   mov    QWORD PTR [rsp+0x28],rax
  0x0000000115509552:   test   rax,rax
  0x0000000115509555:   je     0x0000000115509a4f
  0x000000011550955b:   mov    esi,DWORD PTR [rax+0x8]
  0x000000011550955e:   movabs rdx,0x800000000
  0x0000000115509568:   lea    rsi,[rdx+rsi*1]
  0x000000011550956c:   mov    rsi,QWORD PTR [rsi+0x58]
  0x0000000115509570:   movabs rdx,0x800c7f4f8              ;   {metadata('jdk/incubator/vector/ShortVector')}
  0x000000011550957a:   cmp    rdx,rsi
  0x000000011550957d:   sete   sil
  0x0000000115509581:   movzx  esi,sil
  0x0000000115509585:   test   rax,rax
  0x0000000115509588:   je     0x0000000115509596
  0x000000011550958e:   test   esi,esi
  0x0000000115509590:   je     0x0000000115509d3c
  0x0000000115509596:   test   rax,rax
  0x0000000115509599:   je     0x00000001155099f7
  0x000000011550959f:   mov    esi,DWORD PTR [rax+0x8]
  0x00000001155095a2:   movabs rdx,0x800000000
  0x00000001155095ac:   lea    rsi,[rdx+rsi*1]
  0x00000001155095b0:   test   rax,rax
  0x00000001155095b3:   je     0x00000001155095cc
  0x00000001155095b9:   movabs rdx,0x800c20b60              ;   {metadata('jdk/incubator/vector/Short128Vector')}
  0x00000001155095c3:   cmp    rdx,rsi
  0x00000001155095c6:   jne    0x0000000115509d3c           ; ImmutableOopMap {rax=Oop [40]=Oop [48]=Oop [56]=Oop [64]=Oop [72]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::lanewiseTemplate@248 (line 620)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@45 (line 711)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
  0x00000001155095cc:   test   DWORD PTR [rax],eax          ; implicit exception: dispatches to 0x0000000115509e8a
  0x00000001155095ce:   mov    rsi,QWORD PTR [r15+0x108]
  0x00000001155095d5:   lea    rdx,[rsi+0x10]
  0x00000001155095d9:   nop    DWORD PTR [rax+0x0]
  0x00000001155095e0:   cmp    rdx,QWORD PTR [r15+0x118]
  0x00000001155095e7:   ja     0x0000000115509bb8
  0x00000001155095ed:   mov    QWORD PTR [r15+0x108],rdx
  0x00000001155095f4:   prefetchw BYTE PTR [rsi+0xd0]
  0x00000001155095fb:   mov    QWORD PTR [rsi],0x1
  0x0000000115509602:   mov    DWORD PTR [rsi+0x8],0xc20b60 ;   {metadata('jdk/incubator/vector/Short128Vector')}
  0x0000000115509609:   mov    DWORD PTR [rsi+0xc],0x0
  0x0000000115509610:   mov    rcx,rsi
  0x0000000115509613:   mov    rsi,QWORD PTR [r15+0x108]
  0x000000011550961a:   lea    rdx,[rsi+0x20]
  0x000000011550961e:   xchg   ax,ax
  0x0000000115509620:   cmp    rdx,QWORD PTR [r15+0x118]
  0x0000000115509627:   ja     0x0000000115509b65
  0x000000011550962d:   mov    QWORD PTR [r15+0x108],rdx
  0x0000000115509634:   prefetchw BYTE PTR [rsi+0xe0]
  0x000000011550963b:   prefetchw BYTE PTR [rsi+0x120]
  0x0000000115509642:   prefetchw BYTE PTR [rsi+0x160]
  0x0000000115509649:   prefetchw BYTE PTR [rsi+0x1a0]
  0x0000000115509650:   mov    DWORD PTR [rsi+0xc],0x8
  0x0000000115509657:   mov    QWORD PTR [rsi],0x1
  0x000000011550965e:   mov    DWORD PTR [rsi+0x8],0x6520   ;   {metadata({type array short})}
  0x0000000115509665:   mov    QWORD PTR [rsi+0x10],0x0
  0x000000011550966d:   mov    QWORD PTR [rsi+0x18],0x0
  0x0000000115509675:   mov    WORD PTR [rsi+0x1e],0x9
  0x000000011550967b:   mov    WORD PTR [rsi+0x1c],0x9
  0x0000000115509681:   mov    WORD PTR [rsi+0x1a],0x9
  0x0000000115509687:   mov    WORD PTR [rsi+0x18],0x9
  0x000000011550968d:   mov    WORD PTR [rsi+0x16],0x9
  0x0000000115509693:   mov    WORD PTR [rsi+0x14],0x9
  0x0000000115509699:   mov    WORD PTR [rsi+0x12],0x9
  0x000000011550969f:   mov    WORD PTR [rsi+0x10],0x9
  0x00000001155096a5:   mov    rdx,rsi
  0x00000001155096a8:   shr    rdx,0x3
  0x00000001155096ac:   mov    DWORD PTR [rcx+0xc],edx
  0x00000001155096af:   mov    rdx,rcx
  0x00000001155096b2:   xor    rdx,rsi
  0x00000001155096b5:   data16 data16 nop WORD PTR [rax+rax*1+0x0]
  0x00000001155096c0:   test   rdx,0xffffffffffc00000
  0x00000001155096c7:   je     0x0000000115509a47
  0x00000001155096cd:   test   rsi,rsi
  0x00000001155096d0:   je     0x0000000115509a7a
  0x00000001155096d6:   mov    r11,QWORD PTR [rsp+0x50]
  0x00000001155096db:   mov    r10,rcx
  0x00000001155096de:   shr    r10,0x9
  0x00000001155096e2:   cmp    BYTE PTR [r10+r11*1],0x4
  0x00000001155096e7:   jne    0x0000000115509aca
  0x00000001155096ed:   mov    r8,rax
  0x00000001155096f0:   mov    esi,0x11
  0x00000001155096f5:   mov    rdx,r8
  0x00000001155096f8:   nop    DWORD PTR [rax+0x0]
  0x00000001155096ff:   nop
  0x0000000115509700:   nop    DWORD PTR [rax+0x0]
  0x0000000115509707:   call   0x00000001154f8040           ; ImmutableOopMap {[40]=Oop [48]=Oop [56]=Oop }
                                                            ;*invokestatic lambda$compareTemplate$41 {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.ShortVector$$Lambda$89/0x0000000800c293d0::apply@9
                                                            ; - jdk.internal.vm.vector.VectorSupport::compare@31 (line 394)
                                                            ; - jdk.incubator.vector.ShortVector::compareTemplate@52 (line 1743)
                                                            ; - jdk.incubator.vector.ShortVector::compareTemplate@8 (line 1858)
                                                            ; - jdk.incubator.vector.Short128Vector::compare@5 (line 363)
                                                            ; - jdk.incubator.vector.Short128Vector::compare@3 (line 41)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@21 (line 603)
                                                            ;   {static_call}
  0x000000011550970c:   nop                                 ; ImmutableOopMap {rax=Oop [40]=Oop [48]=Oop [56]=Oop }
                                                            ;*areturn {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector$$Lambda$89/0x0000000800c293d0::apply@12
                                                            ; - jdk.internal.vm.vector.VectorSupport::compare@31 (line 394)
                                                            ; - jdk.incubator.vector.ShortVector::compareTemplate@52 (line 1743)
                                                            ; - jdk.incubator.vector.ShortVector::compareTemplate@8 (line 1858)
                                                            ; - jdk.incubator.vector.Short128Vector::compare@5 (line 363)
                                                            ; - jdk.incubator.vector.Short128Vector::compare@3 (line 41)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@21 (line 603)
  0x000000011550970d:   cmp    DWORD PTR [rax+0x8],0xc211a0 ; implicit exception: dispatches to 0x0000000115509ea6
                                                            ;   {metadata('jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000115509714:   jne    0x0000000115509d76
  0x000000011550971a:   mov    esi,DWORD PTR [rax+0xc]
  0x000000011550971d:   data16 xchg ax,ax
  0x0000000115509720:   test   esi,esi
  0x0000000115509722:   je     0x0000000115509a05
  0x0000000115509728:   mov    edx,DWORD PTR [rsi*8+0x8]
  0x000000011550972f:   movabs rcx,0x800000000
  0x0000000115509739:   lea    rdx,[rcx+rdx*1]
  0x000000011550973d:   data16 xchg ax,ax
  0x0000000115509740:   test   esi,esi
  0x0000000115509742:   je     0x000000011550975b
  0x0000000115509748:   movabs rcx,0x800000960              ;   {metadata({type array bool})}
  0x0000000115509752:   cmp    rcx,rdx
  0x0000000115509755:   jne    0x0000000115509d16           ; ImmutableOopMap {rax=Oop rsi=NarrowOop [40]=Oop [48]=Oop [56]=Oop }
                                                            ;*areturn {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector$$Lambda$89/0x0000000800c293d0::apply@12
                                                            ; - jdk.internal.vm.vector.VectorSupport::compare@31 (line 394)
                                                            ; - jdk.incubator.vector.ShortVector::compareTemplate@52 (line 1743)
                                                            ; - jdk.incubator.vector.ShortVector::compareTemplate@8 (line 1858)
                                                            ; - jdk.incubator.vector.Short128Vector::compare@5 (line 363)
                                                            ; - jdk.incubator.vector.Short128Vector::compare@3 (line 41)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@21 (line 603)
  0x000000011550975b:   mov    edx,DWORD PTR [rsi*8+0xc]    ; implicit exception: dispatches to 0x0000000115509ec6
  0x0000000115509762:   test   edx,edx
  0x0000000115509764:   je     0x00000001155097b1
  0x000000011550976a:   cmp    BYTE PTR [rsi*8+0x10],0x0
  0x0000000115509772:   jne    0x0000000115509cd3
  0x0000000115509778:   mov    ecx,edx
  0x000000011550977a:   dec    ecx
  0x000000011550977c:   movsxd rcx,ecx
  0x000000011550977f:   mov    r8d,edx
  0x0000000115509782:   cmp    r8,rcx
  0x0000000115509785:   ja     0x0000000115509794
  0x000000011550978b:   cmp    edx,0x2
  0x000000011550978e:   jae    0x0000000115509e5c
  0x0000000115509794:   mov    ecx,0x1
  0x0000000115509799:   jmp    0x00000001155097ad
  0x000000011550979e:   xchg   ax,ax
  0x00000001155097a0:   cmp    BYTE PTR [rcx+rsi*8+0x10],0x0
  0x00000001155097a5:   jne    0x0000000115509cd3
  0x00000001155097ab:   inc    ecx
  0x00000001155097ad:   cmp    edx,ecx
  0x00000001155097af:   jg     0x00000001155097a0
  0x00000001155097b1:   mov    r11,QWORD PTR [rsp+0x28]
  0x00000001155097b6:   mov    rax,QWORD PTR [rsp+0x38]
  0x00000001155097bb:   mov    r10,QWORD PTR [rsp+0x30]
  0x00000001155097c0:   movabs rbx,0x6003e44c0              ;   {oop(a 'java/lang/Class'{0x00000006003e44c0} = 'jdk/incubator/vector/Int256Vector')}
  0x00000001155097ca:   movabs rbp,0x7ffb002a0              ;   {oop(a 'java/lang/Class'{0x00000007ffb002a0} = int)}
  0x00000001155097d4:   movabs r13,0x6003e4390              ;   {oop(a 'jdk/incubator/vector/IntVector$IntSpecies'{0x00000006003e4390})}
  0x00000001155097de:   movabs r14,0x60081a700              ;   {oop(a 'jdk/incubator/vector/AbstractVector$$Lambda$93+0x0000000800c2a060'{0x000000060081a700})}
  0x00000001155097e8:   mov    esi,0x11
  0x00000001155097ed:   mov    rdx,r10
  0x00000001155097f0:   mov    rcx,rax
  0x00000001155097f3:   mov    r8d,0x8
  0x00000001155097f9:   mov    r9,rbx
  0x00000001155097fc:   mov    rdi,rbp
  0x00000001155097ff:   mov    DWORD PTR [rsp],0x8
  0x0000000115509806:   mov    QWORD PTR [rsp+0x8],r11
  0x000000011550980b:   mov    QWORD PTR [rsp+0x10],r13
  0x0000000115509810:   mov    QWORD PTR [rsp+0x18],r14
  0x0000000115509815:   mov    QWORD PTR [rsp+0x30],rbp
  0x000000011550981a:   mov    QWORD PTR [rsp+0x38],rbx
  0x000000011550981f:   nop
  0x0000000115509820:   nop    DWORD PTR [rax+0x0]
  0x0000000115509827:   call   0x00000001154fc700           ; ImmutableOopMap {[40]=Oop [48]=Oop [56]=Oop }
                                                            ;*invokestatic convert {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.AbstractVector::convert0@128 (line 678)
                                                            ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 366)
                                                            ; - jdk.incubator.vector.Short128Vector::convertShape@4 (line 248)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {static_call}
  0x000000011550982c:   nop
  0x000000011550982d:   test   rax,rax
  0x0000000115509830:   je     0x0000000115509a70
  0x0000000115509836:   mov    esi,DWORD PTR [rax+0x8]
  0x0000000115509839:   movabs rdx,0x800000000
  0x0000000115509843:   lea    rsi,[rdx+rsi*1]
  0x0000000115509847:   mov    rsi,QWORD PTR [rsi+0x50]
  0x000000011550984b:   movabs rdx,0x800c5f020              ;   {metadata('jdk/incubator/vector/AbstractVector')}
  0x0000000115509855:   cmp    rdx,rsi
  0x0000000115509858:   sete   sil
  0x000000011550985c:   movzx  esi,sil
  0x0000000115509860:   test   rax,rax
  0x0000000115509863:   je     0x0000000115509871
  0x0000000115509869:   test   esi,esi
  0x000000011550986b:   je     0x0000000115509e11           ; ImmutableOopMap {rax=Oop [40]=Oop [48]=Oop [56]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractVector::convert0@131 (line 678)
                                                            ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 366)
                                                            ; - jdk.incubator.vector.Short128Vector::convertShape@4 (line 248)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
  0x0000000115509871:   cmp    DWORD PTR [rax+0x8],0xc645b8 ; implicit exception: dispatches to 0x0000000115509ee6
                                                            ;   {metadata('jdk/incubator/vector/Int256Vector')}
  0x0000000115509878:   jne    0x0000000115509dd1
  0x000000011550987e:   mov    rbp,QWORD PTR [rsp+0x30]
  0x0000000115509883:   mov    rbx,QWORD PTR [rsp+0x38]
  0x0000000115509888:   movabs rdi,0x60081a8b8              ;   {oop(a 'jdk/incubator/vector/Int256Vector'{0x000000060081a8b8})}
  0x0000000115509892:   movabs r10,0x60081a3d8              ;   {oop(a 'jdk/incubator/vector/IntVector$$Lambda$97+0x0000000800c2ace0'{0x000000060081a3d8})}
  0x000000011550989c:   mov    esi,0x6
  0x00000001155098a1:   mov    rdx,rbx
  0x00000001155098a4:   mov    rcx,rbp
  0x00000001155098a7:   mov    r8d,0x8
  0x00000001155098ad:   mov    r9,rax
  0x00000001155098b0:   mov    QWORD PTR [rsp],r10
  0x00000001155098b4:   mov    QWORD PTR [rsp+0x20],rax
  0x00000001155098b9:   nop    WORD PTR [rax+rax*1+0x0]
  0x00000001155098bf:   nop
  0x00000001155098c0:   nop    DWORD PTR [rax+0x0]
  0x00000001155098c7:   call   0x0000000115505d00           ; ImmutableOopMap {[32]=Oop }
                                                            ;*invokestatic binaryOp {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@244 (line 620)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::mul@5 (line 1232)
                                                            ; - jdk.incubator.vector.IntVector::mul@2 (line 52)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@45 (line 608)
                                                            ;   {static_call}
  0x00000001155098cc:   nop
  0x00000001155098cd:   test   rax,rax
  0x00000001155098d0:   je     0x0000000115509a65
  0x00000001155098d6:   mov    r10d,DWORD PTR [rax+0x8]
  0x00000001155098da:   movabs r11,0x800000000
  0x00000001155098e4:   lea    r10,[r11+r10*1]
  0x00000001155098e8:   mov    r10,QWORD PTR [r10+0x58]
  0x00000001155098ec:   movabs r11,0x800c5f510              ;   {metadata('jdk/incubator/vector/IntVector')}
  0x00000001155098f6:   cmp    r11,r10
  0x00000001155098f9:   sete   r10b
  0x00000001155098fd:   movzx  r10d,r10b
  0x0000000115509901:   test   rax,rax
  0x0000000115509904:   je     0x0000000115509913
  0x000000011550990a:   test   r10d,r10d
  0x000000011550990d:   je     0x0000000115509e4a
  0x0000000115509913:   test   rax,rax
  0x0000000115509916:   je     0x0000000115509a11
  0x000000011550991c:   mov    r10d,DWORD PTR [rax+0x8]
  0x0000000115509920:   movabs r11,0x800000000
  0x000000011550992a:   lea    r10,[r11+r10*1]
  0x000000011550992e:   test   rax,rax
  0x0000000115509931:   je     0x000000011550994a
  0x0000000115509937:   movabs r11,0x800c645b8              ;   {metadata('jdk/incubator/vector/Int256Vector')}
  0x0000000115509941:   cmp    r11,r10
  0x0000000115509944:   jne    0x0000000115509df7           ; ImmutableOopMap {rax=Oop [32]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::lanewiseTemplate@247 (line 620)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::mul@5 (line 1232)
                                                            ; - jdk.incubator.vector.IntVector::mul@2 (line 52)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@45 (line 608)
  0x000000011550994a:   mov    r10d,DWORD PTR [rax+0xc]     ; implicit exception: dispatches to 0x0000000115509f06
  0x000000011550994e:   test   r10d,r10d
  0x0000000115509951:   je     0x0000000115509a1d
  0x0000000115509957:   mov    r11d,DWORD PTR [r10*8+0x8]
  0x000000011550995f:   movabs r8,0x800000000
  0x0000000115509969:   lea    r11,[r8+r11*1]
  0x000000011550996d:   test   r10d,r10d
  0x0000000115509970:   je     0x0000000115509989
  0x0000000115509976:   movabs r8,0x800006718               ;   {metadata({type array int})}
  0x0000000115509980:   cmp    r8,r11
  0x0000000115509983:   jne    0x0000000115509d9b           ; ImmutableOopMap {rax=Oop r10=NarrowOop [32]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::lanewiseTemplate@247 (line 620)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::mul@5 (line 1232)
                                                            ; - jdk.incubator.vector.IntVector::mul@2 (line 52)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@45 (line 608)
  0x0000000115509989:   mov    r11d,DWORD PTR [r10*8+0xc]   ; implicit exception: dispatches to 0x0000000115509f26
  0x0000000115509991:   test   r11d,r11d
  0x0000000115509994:   je     0x0000000115509a29
  0x000000011550999a:   mov    r8d,r11d
  0x000000011550999d:   dec    r8d
  0x00000001155099a0:   movsxd r8,r8d
  0x00000001155099a3:   mov    r9d,r11d
  0x00000001155099a6:   cmp    r9,r8
  0x00000001155099a9:   ja     0x00000001155099b9
  0x00000001155099af:   cmp    r11d,0x2
  0x00000001155099b3:   jae    0x0000000115509e22
  0x00000001155099b9:   mov    eax,DWORD PTR [r10*8+0x10]
  0x00000001155099c1:   mov    r8d,0x1
  0x00000001155099c7:   jmp    0x00000001155099d8
  0x00000001155099cc:   nop    DWORD PTR [rax+0x0]
  0x00000001155099d0:   add    eax,DWORD PTR [rcx+r8*4+0x10]
  0x00000001155099d5:   inc    r8d
  0x00000001155099d8:   cmp    r11d,0x3
  0x00000001155099dc:   mov    r9d,0x2
  0x00000001155099e2:   cmovb  r9d,r11d
  0x00000001155099e6:   mov    ecx,r10d
  0x00000001155099e9:   shl    rcx,0x3
  0x00000001155099ed:   cmp    r9d,r8d
  0x00000001155099f0:   jg     0x00000001155099d0
  0x00000001155099f2:   jmp    0x0000000115509a90
  0x00000001155099f7:   mov    rsi,0x0
  0x00000001155099fe:   xchg   ax,ax
  0x0000000115509a00:   jmp    0x00000001155095b0
  0x0000000115509a05:   mov    rdx,0x0
  0x0000000115509a0c:   jmp    0x000000011550973d
  0x0000000115509a11:   mov    r10,0x0
  0x0000000115509a18:   jmp    0x000000011550992e
  0x0000000115509a1d:   mov    r11,0x0
  0x0000000115509a24:   jmp    0x000000011550996d
  0x0000000115509a29:   mov    eax,0x0
  0x0000000115509a2e:   movsxd rax,eax
  0x0000000115509a31:   mov    rbp,QWORD PTR [rsp+0x60]
  0x0000000115509a36:   add    rsp,0x68
  0x0000000115509a3a:   mov    rcx,QWORD PTR [r15+0x348]
  0x0000000115509a41:   test   DWORD PTR [rcx],eax          ;   {poll_return}
  0x0000000115509a43:   vzeroupper
  0x0000000115509a46:   ret
  0x0000000115509a47:   mov    r8,rax
  0x0000000115509a4a:   jmp    0x00000001155096f0
  0x0000000115509a4f:   mov    esi,0x0
  0x0000000115509a54:   jmp    0x0000000115509585
  0x0000000115509a59:   mov    r13,rax
  0x0000000115509a5c:   mov    rbx,rsi
  0x0000000115509a5f:   nop
  0x0000000115509a60:   jmp    0x00000001155094b1
  0x0000000115509a65:   mov    r10d,0x0
  0x0000000115509a6b:   jmp    0x0000000115509901
  0x0000000115509a70:   mov    esi,0x0
  0x0000000115509a75:   jmp    0x0000000115509860
  0x0000000115509a7a:   mov    r8,rax
  0x0000000115509a7d:   data16 xchg ax,ax
  0x0000000115509a80:   jmp    0x00000001155096f0
  0x0000000115509a85:   mov    r13,rax
  0x0000000115509a88:   mov    rbx,rsi
  0x0000000115509a8b:   jmp    0x00000001155094b1
  0x0000000115509a90:   lea    r10d,[r11-0x4]
  0x0000000115509a94:   jmp    0x0000000115509abf
  0x0000000115509a99:   nop    DWORD PTR [rax+0x0]
  0x0000000115509aa0:   add    eax,DWORD PTR [rcx+r8*4+0x10]
  0x0000000115509aa5:   movsxd r9,r8d
  0x0000000115509aa8:   mov    ebx,DWORD PTR [rcx+r9*4+0x14]
  0x0000000115509aad:   mov    edi,DWORD PTR [rcx+r9*4+0x18]
  0x0000000115509ab2:   add    eax,ebx
  0x0000000115509ab4:   add    eax,edi
  0x0000000115509ab6:   add    eax,DWORD PTR [rcx+r9*4+0x1c]
  0x0000000115509abb:   lea    r8d,[r8+0x4]
  0x0000000115509abf:   nop
  0x0000000115509ac0:   cmp    r10d,r8d
  0x0000000115509ac3:   jg     0x0000000115509aa0
  0x0000000115509ac5:   jmp    0x0000000115509b16
  0x0000000115509aca:   lock add DWORD PTR [rsp],0x0
  0x0000000115509acf:   cmp    BYTE PTR [r10+r11*1],0x0
  0x0000000115509ad4:   jne    0x0000000115509c14
  0x0000000115509ada:   mov    r8,rax
  0x0000000115509add:   data16 xchg ax,ax
  0x0000000115509ae0:   jmp    0x00000001155096f0
  0x0000000115509ae5:   lock add DWORD PTR [rsp],0x0
  0x0000000115509aea:   cmp    BYTE PTR [rax+r11*1],0x0
  0x0000000115509aef:   je     0x00000001155094eb
  0x0000000115509af5:   jmp    0x0000000115509c45
  0x0000000115509afa:   lock add DWORD PTR [rsp],0x0
  0x0000000115509aff:   nop
  0x0000000115509b00:   cmp    BYTE PTR [r10+r11*1],0x0
  0x0000000115509b05:   jne    0x0000000115509c70
  0x0000000115509b0b:   mov    r13,rax
  0x0000000115509b0e:   mov    rbx,rsi
  0x0000000115509b11:   jmp    0x00000001155094b1
  0x0000000115509b16:   mov    r10d,r8d
  0x0000000115509b19:   jmp    0x0000000115509b28
  0x0000000115509b1e:   xchg   ax,ax
  0x0000000115509b20:   add    eax,DWORD PTR [rcx+r10*4+0x10]
  0x0000000115509b25:   inc    r10d
  0x0000000115509b28:   cmp    r11d,r10d
  0x0000000115509b2b:   jg     0x0000000115509b20
  0x0000000115509b2d:   jmp    0x0000000115509a2e
  0x0000000115509b32:   movabs rdx,0x800006520              ;   {metadata({type array short})}
  0x0000000115509b3c:   mov    rbx,rsi
  0x0000000115509b3f:   mov    rsi,rdx
  0x0000000115509b42:   mov    edx,0x8
  0x0000000115509b47:   mov    r13,rax
  0x0000000115509b4a:   call   0x000000010daf9c00           ; ImmutableOopMap {rbx=Oop r10=Oop r13=Oop r14=Oop }
                                                            ;*getstatic SPECIES_128 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@0 (line 600)
                                                            ;   {runtime_call Stub<new_array_or_null(KlassPointer,int)Object>}
  0x0000000115509b4f:   nop                                 ; ImmutableOopMap {rax=Oop rbx=Oop r10=Oop r13=Oop r14=Oop }
                                                            ;*getstatic SPECIES_128 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@0 (line 600)
  0x0000000115509b50:   test   DWORD PTR [rax],eax          ; implicit exception: dispatches to 0x0000000115509f46
  0x0000000115509b52:   mov    rdx,rax
  0x0000000115509b55:   mov    rax,r13
  0x0000000115509b58:   mov    rsi,rbx
  0x0000000115509b5b:   nop    DWORD PTR [rax+rax*1+0x0]
  0x0000000115509b60:   jmp    0x0000000115509435
  0x0000000115509b65:   mov    r8,rax
  0x0000000115509b68:   mov    r11,QWORD PTR [rsp+0x50]
  0x0000000115509b6d:   movabs rsi,0x800006520              ;   {metadata({type array short})}
  0x0000000115509b77:   mov    edx,0x8
  0x0000000115509b7c:   nop    DWORD PTR [rax+0x0]
  0x0000000115509b80:   call   0x000000010daf9c00           ; ImmutableOopMap {rcx=Oop r8=Oop [40]=Oop [48]=Oop [56]=Oop [64]=Oop [72]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::lanewiseTemplate@248 (line 620)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@45 (line 711)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call Stub<new_array_or_null(KlassPointer,int)Object>}
  0x0000000115509b85:   nop                                 ; ImmutableOopMap {rax=Oop rcx=Oop r8=Oop [40]=Oop [48]=Oop [56]=Oop [64]=Oop [72]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::lanewiseTemplate@248 (line 620)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@45 (line 711)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
  0x0000000115509b86:   test   DWORD PTR [rax],eax          ; implicit exception: dispatches to 0x0000000115509f66
  0x0000000115509b88:   mov    rsi,rax
  0x0000000115509b8b:   mov    rax,r8
  0x0000000115509b8e:   jmp    0x0000000115509675
  0x0000000115509b93:   movabs rdx,0x800006520              ;   {metadata({type array short})}
  0x0000000115509b9d:   mov    r14,rsi
  0x0000000115509ba0:   mov    rsi,rdx
  0x0000000115509ba3:   mov    edx,0x8
  0x0000000115509ba8:   call   0x000000010daf9c00           ; ImmutableOopMap {r10=Oop r14=Oop }
                                                            ;*getstatic SPECIES_128 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@0 (line 600)
                                                            ;   {runtime_call Stub<new_array_or_null(KlassPointer,int)Object>}
  0x0000000115509bad:   nop                                 ; ImmutableOopMap {rax=Oop r10=Oop r14=Oop }
                                                            ;*getstatic SPECIES_128 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@0 (line 600)
  0x0000000115509bae:   test   DWORD PTR [rax],eax          ; implicit exception: dispatches to 0x0000000115509f86
  0x0000000115509bb0:   mov    rsi,r14
  0x0000000115509bb3:   jmp    0x0000000115509335
  0x0000000115509bb8:   mov    r11,QWORD PTR [rsp+0x50]
  0x0000000115509bbd:   movabs rsi,0x800c20b60              ;   {metadata('jdk/incubator/vector/Short128Vector')}
  0x0000000115509bc7:   mov    r8,rax
  0x0000000115509bca:   call   0x000000010dafc980           ; ImmutableOopMap {r8=Oop [40]=Oop [48]=Oop [56]=Oop [64]=Oop [72]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::lanewiseTemplate@248 (line 620)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@45 (line 711)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call Stub<new_instance_or_null(KlassPointer)Object>}
  0x0000000115509bcf:   nop                                 ; ImmutableOopMap {rax=Oop r8=Oop [40]=Oop [48]=Oop [56]=Oop [64]=Oop [72]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::lanewiseTemplate@248 (line 620)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@45 (line 711)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
  0x0000000115509bd0:   test   DWORD PTR [rax],eax          ; implicit exception: dispatches to 0x0000000115509fa6
  0x0000000115509bd2:   mov    rcx,rax
  0x0000000115509bd5:   mov    rax,r8
  0x0000000115509bd8:   jmp    0x0000000115509613
  0x0000000115509bdd:   mov    rbx,rsi
  0x0000000115509be0:   movabs rsi,0x800c20b60              ;   {metadata('jdk/incubator/vector/Short128Vector')}
  0x0000000115509bea:   call   0x000000010dafc980           ; ImmutableOopMap {rbx=Oop r10=Oop r14=Oop }
                                                            ;*getstatic SPECIES_128 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@0 (line 600)
                                                            ;   {runtime_call Stub<new_instance_or_null(KlassPointer)Object>}
  0x0000000115509bef:   nop                                 ; ImmutableOopMap {rax=Oop rbx=Oop r10=Oop r14=Oop }
                                                            ;*getstatic SPECIES_128 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@0 (line 600)
  0x0000000115509bf0:   test   DWORD PTR [rax],eax          ; implicit exception: dispatches to 0x0000000115509fc6
  0x0000000115509bf2:   mov    rsi,rbx
  0x0000000115509bf5:   jmp    0x00000001155093d0
  0x0000000115509bfa:   movabs rsi,0x800c20b60              ;   {metadata('jdk/incubator/vector/Short128Vector')}
  0x0000000115509c04:   call   0x000000010dafc980           ; ImmutableOopMap {r10=Oop }
                                                            ;*getstatic SPECIES_128 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@0 (line 600)
                                                            ;   {runtime_call Stub<new_instance_or_null(KlassPointer)Object>}
  0x0000000115509c09:   nop                                 ; ImmutableOopMap {rax=Oop r10=Oop }
                                                            ;*getstatic SPECIES_128 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@0 (line 600)
  0x0000000115509c0a:   test   DWORD PTR [rax],eax          ; implicit exception: dispatches to 0x0000000115509fe6
  0x0000000115509c0c:   mov    rsi,rax
  0x0000000115509c0f:   jmp    0x00000001155092d0
  0x0000000115509c14:   mov    r8,rax
  0x0000000115509c17:   mov    BYTE PTR [r10+r11*1],0x0
  0x0000000115509c1c:   mov    rsi,QWORD PTR [r15+0x40]
  0x0000000115509c20:   add    r10,r11
  0x0000000115509c23:   test   rsi,rsi
  0x0000000115509c26:   je     0x0000000115509ca5
  0x0000000115509c2c:   mov    rbp,QWORD PTR [r15+0x50]
  0x0000000115509c30:   mov    QWORD PTR [rsi+rbp*1-0x8],r10
  0x0000000115509c35:   lea    rsi,[rsi-0x8]
  0x0000000115509c39:   mov    QWORD PTR [r15+0x40],rsi
  0x0000000115509c3d:   data16 xchg ax,ax
  0x0000000115509c40:   jmp    0x00000001155096f0
  0x0000000115509c45:   mov    BYTE PTR [rax+r11*1],0x0
  0x0000000115509c4a:   mov    rsi,QWORD PTR [r15+0x40]
  0x0000000115509c4e:   add    rax,r11
  0x0000000115509c51:   test   rsi,rsi
  0x0000000115509c54:   je     0x0000000115509cb3
  0x0000000115509c5a:   mov    r10,QWORD PTR [r15+0x50]
  0x0000000115509c5e:   mov    QWORD PTR [rsi+r10*1-0x8],rax
  0x0000000115509c63:   lea    rsi,[rsi-0x8]
  0x0000000115509c67:   mov    QWORD PTR [r15+0x40],rsi
  0x0000000115509c6b:   jmp    0x00000001155094eb
  0x0000000115509c70:   mov    r13,rax
  0x0000000115509c73:   mov    rbx,rsi
  0x0000000115509c76:   mov    BYTE PTR [r10+r11*1],0x0
  0x0000000115509c7b:   mov    rsi,QWORD PTR [r15+0x40]
  0x0000000115509c7f:   add    r10,r11
  0x0000000115509c82:   test   rsi,rsi
  0x0000000115509c85:   je     0x0000000115509cc5
  0x0000000115509c8b:   mov    rbp,QWORD PTR [r15+0x50]
  0x0000000115509c8f:   mov    QWORD PTR [rsi+rbp*1-0x8],r10
  0x0000000115509c94:   lea    rsi,[rsi-0x8]
  0x0000000115509c98:   mov    QWORD PTR [r15+0x40],rsi
  0x0000000115509c9c:   nop    DWORD PTR [rax+0x0]
  0x0000000115509ca0:   jmp    0x00000001155094b1
  0x0000000115509ca5:   mov    rsi,r10
  0x0000000115509ca8:   call   0x000000010dafa200           ;   {runtime_call Stub<write_barrier_post(Word)void>}
  0x0000000115509cad:   nop
  0x0000000115509cae:   jmp    0x00000001155096f0
  0x0000000115509cb3:   mov    rsi,rax
  0x0000000115509cb6:   call   0x000000010dafa200           ;   {runtime_call Stub<write_barrier_post(Word)void>}
  0x0000000115509cbb:   nop
  0x0000000115509cbc:   nop    DWORD PTR [rax+0x0]
  0x0000000115509cc0:   jmp    0x00000001155094eb
  0x0000000115509cc5:   mov    rsi,r10
  0x0000000115509cc8:   call   0x000000010dafa200           ;   {runtime_call Stub<write_barrier_post(Word)void>}
  0x0000000115509ccd:   nop
  0x0000000115509cce:   jmp    0x00000001155094b1
  0x0000000115509cd3:   mov    rax,0xffffffffffffffff
  0x0000000115509cda:   mov    rbp,QWORD PTR [rsp+0x60]
  0x0000000115509cdf:   add    rsp,0x68
  0x0000000115509ce3:   mov    rcx,QWORD PTR [r15+0x348]
  0x0000000115509cea:   test   DWORD PTR [rcx],eax          ;   {poll_return}
  0x0000000115509cec:   vzeroupper
  0x0000000115509cef:   ret
  0x0000000115509cf0:   mov    r8d,0xffffffe5
  0x0000000115509cf6:   mov    DWORD PTR [r15+0x370],r8d
  0x0000000115509cfd:   mov    QWORD PTR [r15+0x378],0x0
  0x0000000115509d08:   call   0x000000010da2f27a           ; ImmutableOopMap {r10=Oop }
                                                            ;*getstatic SPECIES_128 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@0 (line 600)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000115509d0d:   nop
  0x0000000115509d0e:   mov    r8d,0xffffffe4
  0x0000000115509d14:   jmp    0x0000000115509cf6
  0x0000000115509d16:   mov    r11,0x0
  0x0000000115509d1d:   mov    r10d,0xffffffdd
  0x0000000115509d23:   mov    r8,QWORD PTR [rsp+0x28]
  0x0000000115509d28:   mov    DWORD PTR [r15+0x370],r10d
  0x0000000115509d2f:   mov    QWORD PTR [r15+0x378],r11
  0x0000000115509d36:   call   0x000000010da2f27a           ; ImmutableOopMap {rax=Oop r8=Oop }
                                                            ;*areturn {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector$$Lambda$89/0x0000000800c293d0::apply@12
                                                            ; - jdk.internal.vm.vector.VectorSupport::compare@31 (line 394)
                                                            ; - jdk.incubator.vector.ShortVector::compareTemplate@52 (line 1743)
                                                            ; - jdk.incubator.vector.ShortVector::compareTemplate@8 (line 1858)
                                                            ; - jdk.incubator.vector.Short128Vector::compare@5 (line 363)
                                                            ; - jdk.incubator.vector.Short128Vector::compare@3 (line 41)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@21 (line 603)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000115509d3b:   nop
  0x0000000115509d3c:   mov    rax,QWORD PTR [rsp+0x40]
  0x0000000115509d41:   mov    rsi,QWORD PTR [rsp+0x48]
  0x0000000115509d46:   mov    DWORD PTR [r15+0x370],0xffffffdd
  0x0000000115509d51:   mov    QWORD PTR [r15+0x378],0x0
  0x0000000115509d5c:   nop    DWORD PTR [rax+0x0]
  0x0000000115509d60:   call   0x000000010da2f27a           ; ImmutableOopMap {rax=Oop rsi=Oop [40]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::lanewiseTemplate@248 (line 620)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@45 (line 711)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000115509d65:   nop
  0x0000000115509d66:   mov    r8d,0xffffffe5
  0x0000000115509d6c:   jmp    0x0000000115509cf6
  0x0000000115509d6e:   mov    r8d,0xffffffe5
  0x0000000115509d74:   jmp    0x0000000115509cf6
  0x0000000115509d76:   mov    r11,0x1a10
  0x0000000115509d7d:   mov    r10d,0xffffffcd
  0x0000000115509d83:   jmp    0x0000000115509d23
  0x0000000115509d85:   mov    r8d,0xffffffe5
  0x0000000115509d8b:   jmp    0x0000000115509cf6
  0x0000000115509d90:   mov    r8d,0xffffffe5
  0x0000000115509d96:   jmp    0x0000000115509cf6
  0x0000000115509d9b:   mov    r11,0x0
  0x0000000115509da2:   mov    r10d,0xffffffdd
  0x0000000115509da8:   mov    r8,QWORD PTR [rsp+0x20]
  0x0000000115509dad:   mov    DWORD PTR [r15+0x370],r10d
  0x0000000115509db4:   mov    QWORD PTR [r15+0x378],r11
  0x0000000115509dbb:   nop    DWORD PTR [rax+rax*1+0x0]
  0x0000000115509dc0:   call   0x000000010da2f27a           ; ImmutableOopMap {rax=Oop r8=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::lanewiseTemplate@247 (line 620)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::mul@5 (line 1232)
                                                            ; - jdk.incubator.vector.IntVector::mul@2 (line 52)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@45 (line 608)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000115509dc5:   nop
  0x0000000115509dc6:   mov    r8d,0xffffffe5
  0x0000000115509dcc:   jmp    0x0000000115509cf6
  0x0000000115509dd1:   mov    r11,0x2c14
  0x0000000115509dd8:   mov    r10d,0xffffffcd
  0x0000000115509dde:   mov    QWORD PTR [rsp+0x20],rax
  0x0000000115509de3:   mov    DWORD PTR [r15+0x370],r10d
  0x0000000115509dea:   mov    QWORD PTR [r15+0x378],r11
  0x0000000115509df1:   call   0x000000010da2f27a           ; ImmutableOopMap {[32]=Oop [40]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractVector::convert0@131 (line 678)
                                                            ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 366)
                                                            ; - jdk.incubator.vector.Short128Vector::convertShape@4 (line 248)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000115509df6:   nop
  0x0000000115509df7:   mov    r11,0x0
  0x0000000115509dfe:   mov    r10d,0xffffffdd
  0x0000000115509e04:   jmp    0x0000000115509da8
  0x0000000115509e06:   mov    r8d,0xffffffe4
  0x0000000115509e0c:   jmp    0x0000000115509cf6
  0x0000000115509e11:   mov    r11,0x0
  0x0000000115509e18:   mov    r10d,0xffffffdd
  0x0000000115509e1e:   xchg   ax,ax
  0x0000000115509e20:   jmp    0x0000000115509dde
  0x0000000115509e22:   mov    r11,0x3394
  0x0000000115509e29:   mov    r10d,0xffffffe5
  0x0000000115509e2f:   jmp    0x0000000115509da8
  0x0000000115509e34:   mov    r8d,0xffffffe5
  0x0000000115509e3a:   jmp    0x0000000115509cf6
  0x0000000115509e3f:   mov    r8d,0xffffffe5
  0x0000000115509e45:   jmp    0x0000000115509cf6
  0x0000000115509e4a:   mov    r11,0x0
  0x0000000115509e51:   mov    r10d,0xffffffdd
  0x0000000115509e57:   jmp    0x0000000115509da8
  0x0000000115509e5c:   mov    r11,0x3114
  0x0000000115509e63:   mov    r10d,0xffffffe5
  0x0000000115509e69:   jmp    0x0000000115509d23
  0x0000000115509e6e:   mov    DWORD PTR [r15+0x370],0xfffffff5
  0x0000000115509e79:   mov    QWORD PTR [r15+0x378],0x0
  0x0000000115509e84:   call   0x000000010da2f27a           ; ImmutableOopMap {r10=Oop }
                                                            ;*getstatic SPECIES_128 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@0 (line 600)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000115509e89:   nop
  0x0000000115509e8a:   mov    DWORD PTR [r15+0x370],0xfffffff5
  0x0000000115509e95:   mov    QWORD PTR [r15+0x378],0x0
  0x0000000115509ea0:   call   0x000000010da2f27a           ; ImmutableOopMap {rax=Oop [40]=Oop [48]=Oop [56]=Oop [64]=Oop [72]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::lanewiseTemplate@248 (line 620)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@45 (line 711)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000115509ea5:   nop
  0x0000000115509ea6:   mov    DWORD PTR [r15+0x370],0xfffffff5
  0x0000000115509eb1:   mov    QWORD PTR [r15+0x378],0x0
  0x0000000115509ebc:   nop    DWORD PTR [rax+0x0]
  0x0000000115509ec0:   call   0x000000010da2f27a           ; ImmutableOopMap {rax=Oop [40]=Oop [48]=Oop [56]=Oop }
                                                            ;*areturn {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector$$Lambda$89/0x0000000800c293d0::apply@12
                                                            ; - jdk.internal.vm.vector.VectorSupport::compare@31 (line 394)
                                                            ; - jdk.incubator.vector.ShortVector::compareTemplate@52 (line 1743)
                                                            ; - jdk.incubator.vector.ShortVector::compareTemplate@8 (line 1858)
                                                            ; - jdk.incubator.vector.Short128Vector::compare@5 (line 363)
                                                            ; - jdk.incubator.vector.Short128Vector::compare@3 (line 41)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@21 (line 603)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000115509ec5:   nop
  0x0000000115509ec6:   mov    DWORD PTR [r15+0x370],0xfffffff5
  0x0000000115509ed1:   mov    QWORD PTR [r15+0x378],0x0
  0x0000000115509edc:   nop    DWORD PTR [rax+0x0]
  0x0000000115509ee0:   call   0x000000010da2f27a           ; ImmutableOopMap {rax=Oop rsi=NarrowOop [40]=Oop [48]=Oop [56]=Oop }
                                                            ;*areturn {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector$$Lambda$89/0x0000000800c293d0::apply@12
                                                            ; - jdk.internal.vm.vector.VectorSupport::compare@31 (line 394)
                                                            ; - jdk.incubator.vector.ShortVector::compareTemplate@52 (line 1743)
                                                            ; - jdk.incubator.vector.ShortVector::compareTemplate@8 (line 1858)
                                                            ; - jdk.incubator.vector.Short128Vector::compare@5 (line 363)
                                                            ; - jdk.incubator.vector.Short128Vector::compare@3 (line 41)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@21 (line 603)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000115509ee5:   nop
  0x0000000115509ee6:   mov    DWORD PTR [r15+0x370],0xfffffff5
  0x0000000115509ef1:   mov    QWORD PTR [r15+0x378],0x0
  0x0000000115509efc:   nop    DWORD PTR [rax+0x0]
  0x0000000115509f00:   call   0x000000010da2f27a           ; ImmutableOopMap {rax=Oop [40]=Oop [48]=Oop [56]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractVector::convert0@131 (line 678)
                                                            ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 366)
                                                            ; - jdk.incubator.vector.Short128Vector::convertShape@4 (line 248)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000115509f05:   nop
  0x0000000115509f06:   mov    DWORD PTR [r15+0x370],0xfffffff5
  0x0000000115509f11:   mov    QWORD PTR [r15+0x378],0x0
  0x0000000115509f1c:   nop    DWORD PTR [rax+0x0]
  0x0000000115509f20:   call   0x000000010da2f27a           ; ImmutableOopMap {rax=Oop [32]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::lanewiseTemplate@247 (line 620)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::mul@5 (line 1232)
                                                            ; - jdk.incubator.vector.IntVector::mul@2 (line 52)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@45 (line 608)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000115509f25:   nop
  0x0000000115509f26:   mov    DWORD PTR [r15+0x370],0xfffffff5
  0x0000000115509f31:   mov    QWORD PTR [r15+0x378],0x0
  0x0000000115509f3c:   nop    DWORD PTR [rax+0x0]
  0x0000000115509f40:   call   0x000000010da2f27a           ; ImmutableOopMap {rax=Oop r10=NarrowOop [32]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::lanewiseTemplate@247 (line 620)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::mul@5 (line 1232)
                                                            ; - jdk.incubator.vector.IntVector::mul@2 (line 52)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@45 (line 608)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000115509f45:   nop
  0x0000000115509f46:   mov    DWORD PTR [r15+0x370],0xffffff8f
  0x0000000115509f51:   mov    QWORD PTR [r15+0x378],0x0
  0x0000000115509f5c:   nop    DWORD PTR [rax+0x0]
  0x0000000115509f60:   call   0x000000010da2f27a           ; ImmutableOopMap {rax=Oop rbx=Oop r10=Oop r13=Oop r14=Oop }
                                                            ;*getstatic SPECIES_128 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@0 (line 600)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000115509f65:   nop
  0x0000000115509f66:   mov    DWORD PTR [r15+0x370],0xffffff8f
  0x0000000115509f71:   mov    QWORD PTR [r15+0x378],0x0
  0x0000000115509f7c:   nop    DWORD PTR [rax+0x0]
  0x0000000115509f80:   call   0x000000010da2f27a           ; ImmutableOopMap {rax=Oop rcx=Oop r8=Oop [40]=Oop [48]=Oop [56]=Oop [64]=Oop [72]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::lanewiseTemplate@248 (line 620)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@45 (line 711)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000115509f85:   nop
  0x0000000115509f86:   mov    DWORD PTR [r15+0x370],0xffffff8f
  0x0000000115509f91:   mov    QWORD PTR [r15+0x378],0x0
  0x0000000115509f9c:   nop    DWORD PTR [rax+0x0]
  0x0000000115509fa0:   call   0x000000010da2f27a           ; ImmutableOopMap {rax=Oop r10=Oop r14=Oop }
                                                            ;*getstatic SPECIES_128 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@0 (line 600)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000115509fa5:   nop
  0x0000000115509fa6:   mov    DWORD PTR [r15+0x370],0xffffff8f
  0x0000000115509fb1:   mov    QWORD PTR [r15+0x378],0x0
  0x0000000115509fbc:   nop    DWORD PTR [rax+0x0]
  0x0000000115509fc0:   call   0x000000010da2f27a           ; ImmutableOopMap {rax=Oop r8=Oop [40]=Oop [48]=Oop [56]=Oop [64]=Oop [72]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::lanewiseTemplate@248 (line 620)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Short128Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@45 (line 711)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000115509fc5:   nop
  0x0000000115509fc6:   mov    DWORD PTR [r15+0x370],0xffffff8f
  0x0000000115509fd1:   mov    QWORD PTR [r15+0x378],0x0
  0x0000000115509fdc:   nop    DWORD PTR [rax+0x0]
  0x0000000115509fe0:   call   0x000000010da2f27a           ; ImmutableOopMap {rax=Oop rbx=Oop r10=Oop r14=Oop }
                                                            ;*getstatic SPECIES_128 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@0 (line 600)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000115509fe5:   nop
  0x0000000115509fe6:   mov    DWORD PTR [r15+0x370],0xffffff8f
  0x0000000115509ff1:   mov    QWORD PTR [r15+0x378],0x0
  0x0000000115509ffc:   nop    DWORD PTR [rax+0x0]
  0x000000011550a000:   call   0x000000010da2f27a           ; ImmutableOopMap {rax=Oop r10=Oop }
                                                            ;*getstatic SPECIES_128 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@0 (line 600)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x000000011550a005:   nop
[Exception Handler]
  0x000000011550a006:   call   0x000000010daed380           ;   {runtime_call Stub<ExceptionHandlerStub.exceptionHandler>}
  0x000000011550a00b:   nop
[Deopt Handler Code]
  0x000000011550a00c:   call   0x000000010da2f020           ;   {runtime_call DeoptimizationBlob}
  0x000000011550a011:   nop
  0x000000011550a012:   hlt
  0x000000011550a013:   hlt
  0x000000011550a014:   hlt
  0x000000011550a015:   hlt
  0x000000011550a016:   hlt
  0x000000011550a017:   hlt
  0x000000011550a018:   hlt
  0x000000011550a019:   hlt
  0x000000011550a01a:   hlt
  0x000000011550a01b:   hlt
  0x000000011550a01c:   hlt
  0x000000011550a01d:   hlt
  0x000000011550a01e:   hlt
  0x000000011550a01f:   hlt
[Stub Code]
  0x000000011550a020:   movabs rbx,0x0                      ;   {no_reloc}
  0x000000011550a02a:   jmp    0x000000011550a02a           ;   {runtime_call const_jargs+-25849953}
  0x000000011550a02f:   movabs rbx,0x0                      ;   {static_stub}
  0x000000011550a039:   jmp    0x000000011550a039           ;   {runtime_call const_jargs+-25849953}
  0x000000011550a03e:   movabs rbx,0x0                      ;   {static_stub}
  0x000000011550a048:   jmp    0x000000011550a048           ;   {runtime_call const_jargs+-25849953}
  0x000000011550a04d:   movabs rbx,0x0                      ;   {static_stub}
  0x000000011550a057:   jmp    0x000000011550a057           ;   {runtime_call const_jargs+-25849953}
  0x000000011550a05c:   hlt
  0x000000011550a05d:   hlt
  0x000000011550a05e:   hlt
  0x000000011550a05f:   hlt
--------------------------------------------------------------------------------
[/Disassembly]

FastDoubleParser               :    469.26 MB/s (+/-12.6 %)    26.35 Mfloat/s      37.95 ns/f
FastDoubleParserFromCharArray  :     93.05 MB/s (+/- 5.6 %)     5.32 Mfloat/s     187.97 ns/f
FastDoubleParserFromByteArray  :    648.96 MB/s (+/- 5.8 %)    37.08 Mfloat/s      26.97 ns/f
Double                         :    111.20 MB/s (+/- 4.2 %)     6.37 Mfloat/s     156.99 ns/f

Speedup FastDoubleParser              vs Double: 4.22
Speedup FastDoubleParserFromCharArray vs Double: 0.84
Speedup FastDoubleParserFromByteArray vs Double: 5.84


You can also provide a filename: it should contain one string per line corresponding to a number.

Process finished with exit code 0

